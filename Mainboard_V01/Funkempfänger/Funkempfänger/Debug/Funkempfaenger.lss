
Funkempfaenger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000678  0000070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001310  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051e  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a86  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00002b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b42  00000000  00000000  00003493  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00003fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	7e c1       	rjmp	.+764    	; 0x30a <__vector_3>
   e:	00 00       	nop
  10:	3d c1       	rjmp	.+634    	; 0x28c <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	80 d0       	rcall	.+256    	; 0x1c4 <main>
  c4:	d7 c2       	rjmp	.+1454   	; 0x674 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	int accu = 0;																// Define von Akku Variabel
	
																				// Daten empfangen EF
	
	return(accu);																// Wert zurückgeben
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	80 91 0a 01 	lds	r24, 0x010A
  dc:	90 91 0b 01 	lds	r25, 0x010B
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 0b 01 	sts	0x010B, r25
  e6:	80 93 0a 01 	sts	0x010A, r24
  ea:	80 91 0a 01 	lds	r24, 0x010A
  ee:	90 91 0b 01 	lds	r25, 0x010B
  f2:	8c 32       	cpi	r24, 0x2C	; 44
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	31 f4       	brne	.+12     	; 0x104 <__vector_16+0x3c>
  f8:	c4 98       	cbi	0x18, 4	; 24
  fa:	c5 98       	cbi	0x18, 5	; 24
  fc:	10 92 0b 01 	sts	0x010B, r1
 100:	10 92 0a 01 	sts	0x010A, r1
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <rf_transimit>:
// Version:	 1.1
//////////////////////////////////////////

void rf_transimit(){
	
	data_array[0] = 0x77;
 114:	87 e7       	ldi	r24, 0x77	; 119
 116:	80 93 0d 01 	sts	0x010D, r24
	data_array[1] = twi_receive(EM, akku);
 11a:	10 92 0e 01 	sts	0x010E, r1
	data_array[2] = PORTC;
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	80 93 0f 01 	sts	0x010F, r24
	data_array[3] = 0x00;
 124:	10 92 10 01 	sts	0x0110, r1
	
	
	nrf24_send(data_array);											// Datenarray versenden
 128:	8d e0       	ldi	r24, 0x0D	; 13
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	00 d2       	rcall	.+1024   	; 0x52e <nrf24_send>
	while(nrf24_isSending());										// Warten bis senden beendet ist
 12e:	53 d1       	rcall	.+678    	; 0x3d6 <nrf24_isSending>
 130:	81 11       	cpse	r24, r1
 132:	fd cf       	rjmp	.-6      	; 0x12e <rf_transimit+0x1a>
	temp = nrf24_lastMessageStatus();								// Schaut ob alle Daten angekommen sind
 134:	57 d1       	rcall	.+686    	; 0x3e4 <nrf24_lastMessageStatus>
 136:	80 93 0c 01 	sts	0x010C, r24

	if(temp == NRF24_TRANSMISSON_OK){
 13a:	81 11       	cpse	r24, r1
 13c:	12 c0       	rjmp	.+36     	; 0x162 <rf_transimit+0x4e>
		
		PORTF |= 0x02;
 13e:	e2 e6       	ldi	r30, 0x62	; 98
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f e7       	ldi	r18, 0x7F	; 127
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <rf_transimit+0x3a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <rf_transimit+0x44>
 158:	00 00       	nop
		_delay_ms(25);
		PORTF |= ~(0x02);
 15a:	80 81       	ld	r24, Z
 15c:	8d 6f       	ori	r24, 0xFD	; 253
 15e:	80 83       	st	Z, r24
 160:	13 c0       	rjmp	.+38     	; 0x188 <rf_transimit+0x74>
		
	}
	else if(temp == NRF24_MESSAGE_LOST){
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	89 f4       	brne	.+34     	; 0x188 <rf_transimit+0x74>
		
		PORTF |= 0x08;
 166:	e2 e6       	ldi	r30, 0x62	; 98
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	80 83       	st	Z, r24
 170:	2f e7       	ldi	r18, 0x7F	; 127
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <rf_transimit+0x62>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <rf_transimit+0x6c>
 180:	00 00       	nop
		_delay_ms(25);
		PORTF |= ~(0x08);
 182:	80 81       	ld	r24, Z
 184:	87 6f       	ori	r24, 0xF7	; 247
 186:	80 83       	st	Z, r24
		
	}
	nrf24_powerUpRx();
 188:	8e d1       	rcall	.+796    	; 0x4a6 <nrf24_powerUpRx>
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <rf_transimit+0x7a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <rf_transimit+0x80>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <rf_receive>:
// Version:	 1.1
//////////////////////////////////////////

int rf_receive(void){
	
	if(nrf24_dataReady()){
 198:	0d d2       	rcall	.+1050   	; 0x5b4 <nrf24_dataReady>
 19a:	88 23       	and	r24, r24
 19c:	51 f0       	breq	.+20     	; 0x1b2 <rf_receive+0x1a>
		nrf24_getData(data_array);
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	6d d1       	rcall	.+730    	; 0x47e <nrf24_getData>
		
		if(data_array[0] == senden){
 1a4:	80 91 0d 01 	lds	r24, 0x010D
 1a8:	87 37       	cpi	r24, 0x77	; 119
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <rf_receive+0x20>
			
			return 1;
			
		}
		if(data_array[0] == empfangen){
 1ac:	88 23       	and	r24, r24
 1ae:	39 f0       	breq	.+14     	; 0x1be <rf_receive+0x26>
 1b0:	08 95       	ret
			return 2;
			
		}
		
	}
	else{ return 3; }
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret
	if(nrf24_dataReady()){
		nrf24_getData(data_array);
		
		if(data_array[0] == senden){
			
			return 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 95       	ret
			
		}
		if(data_array[0] == empfangen){
			
			return 2;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	}
	else{ return 3; }
	
}
 1c2:	08 95       	ret

000001c4 <main>:

/* ------------------------------------------------------------------------- */

int main(){
	
	DDRF = 0xFF;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0x01;
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	90 93 62 00 	sts	0x0062, r25
	DDRC = 0xFF;
 1d0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 1d2:	15 ba       	out	0x15, r1	; 21
	DDRA = 0x00;
 1d4:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 1d6:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xFF;
 1d8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 1da:	18 ba       	out	0x18, r1	; 24
	
	TCCR0 |= (1<<CS00) | (1<<CS02);												// Taktteiler um den Faktor 1024
 1dc:	83 b7       	in	r24, 0x33	; 51
 1de:	85 60       	ori	r24, 0x05	; 5
 1e0:	83 bf       	out	0x33, r24	; 51
	EIMSK = (1<<INT2) | (1<<INT3);												// Interrupt auf INT2 und 3 aktivieren
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	89 bf       	out	0x39, r24	; 57
	EICRA = (1<<ISC21) | (0<<ISC20) | (1<<ISC31) | (0<<ISC30);					// Auf negative flanke triggern beim interrupt
 1e6:	80 ea       	ldi	r24, 0xA0	; 160
 1e8:	80 93 6a 00 	sts	0x006A, r24
	TIMSK |= (1<<TOIE0);														// Timer interrupt aktivieren
 1ec:	87 b7       	in	r24, 0x37	; 55
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	87 bf       	out	0x37, r24	; 55
	sei();																		// Globale Interrupts beim Atmega128a aktivieren
 1f2:	78 94       	sei
	
	nrf24_init();																// Funkmodul Initialisieren
 1f4:	b1 d0       	rcall	.+354    	; 0x358 <nrf24_init>
	nrf24_config(2,4);															// Den Chanel vom Funkmodul wählen und Anzahl der Byte zum übertragen angeben
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	66 d1       	rcall	.+716    	; 0x4c8 <nrf24_config>
	nrf24_tx_address(tx_address);												// Sendeadresse festlegen ( Muss mit empfängeradresse(rx) des anden geräts übereinstimmen)
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0a d2       	rcall	.+1044   	; 0x616 <nrf24_tx_address>
	nrf24_rx_address(rx_address);												// Empfangsadresse festlegen ( Muss mit sendeadresse(tx) des anden geräts übereinstimmen)
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	f9 d1       	rcall	.+1010   	; 0x5fa <nrf24_rx_address>
			
			case 1: rf_transimit(); break;										// Wenn 1 dann sende Daten an die Fernedienung
			case 2:																// Wenn 2
				//	twi_transmit(MM, motor, data_array[2]);						// Motorgeschwindigketi schicken
				//	twi_transmit(MM, servo, data_array[3]);						// Lenkung schicken
				PORTC = data_array[5];											// Beleuchtung den Daten anpassen
 208:	02 e1       	ldi	r16, 0x12	; 18
 20a:	11 e0       	ldi	r17, 0x01	; 1
				
				if ( data_array[1] == 0xAA)  {									// Wenn 2Byte AA ist
 20c:	ce e0       	ldi	r28, 0x0E	; 14
 20e:	d1 e0       	ldi	r29, 0x01	; 1
							
				PORTF |= 0x02;
 210:	0f 2e       	mov	r0, r31
 212:	f2 e6       	ldi	r31, 0x62	; 98
 214:	ef 2e       	mov	r14, r31
 216:	f1 2c       	mov	r15, r1
 218:	f0 2d       	mov	r31, r0

	while(1) {
		
		//twi_transmit(MM, 0xFF, 0);

		switch(rf_receive()) {													// Schauen was rf_receive fuer eine aktion weitergibt
 21a:	be df       	rcall	.-132    	; 0x198 <rf_receive>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	91 05       	cpc	r25, r1
 220:	19 f0       	breq	.+6      	; 0x228 <main+0x64>
 222:	02 97       	sbiw	r24, 0x02	; 2
 224:	19 f0       	breq	.+6      	; 0x22c <main+0x68>
 226:	f9 cf       	rjmp	.-14     	; 0x21a <main+0x56>
			
			case 1: rf_transimit(); break;										// Wenn 1 dann sende Daten an die Fernedienung
 228:	75 df       	rcall	.-278    	; 0x114 <rf_transimit>
 22a:	f7 cf       	rjmp	.-18     	; 0x21a <main+0x56>
			case 2:																// Wenn 2
				//	twi_transmit(MM, motor, data_array[2]);						// Motorgeschwindigketi schicken
				//	twi_transmit(MM, servo, data_array[3]);						// Lenkung schicken
				PORTC = data_array[5];											// Beleuchtung den Daten anpassen
 22c:	f8 01       	movw	r30, r16
 22e:	80 81       	ld	r24, Z
 230:	85 bb       	out	0x15, r24	; 21
				
				if ( data_array[1] == 0xAA)  {									// Wenn 2Byte AA ist
 232:	88 81       	ld	r24, Y
 234:	8a 3a       	cpi	r24, 0xAA	; 170
 236:	89 f7       	brne	.-30     	; 0x21a <main+0x56>
							
				PORTF |= 0x02;
 238:	f7 01       	movw	r30, r14
 23a:	80 81       	ld	r24, Z
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	80 83       	st	Z, r24
 240:	ff ef       	ldi	r31, 0xFF	; 255
 242:	24 e3       	ldi	r18, 0x34	; 52
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	f1 50       	subi	r31, 0x01	; 1
 248:	20 40       	sbci	r18, 0x00	; 0
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x82>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x8c>
 250:	00 00       	nop
				_delay_ms(250);													// LED 2 blinken lassen
				PORTF &= ~(0x02);
 252:	f7 01       	movw	r30, r14
 254:	80 81       	ld	r24, Z
 256:	8d 7f       	andi	r24, 0xFD	; 253
 258:	80 83       	st	Z, r24
 25a:	df cf       	rjmp	.-66     	; 0x21a <main+0x56>

0000025c <backwardsecure>:
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 25c:	c8 99       	sbic	0x19, 0	; 25
 25e:	07 c0       	rjmp	.+14     	; 0x26e <backwardsecure+0x12>
	
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
 260:	e2 e6       	ldi	r30, 0x62	; 98
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 60       	ori	r24, 0x08	; 8
 268:	80 83       	st	Z, r24
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 26a:	c8 9b       	sbis	0x19, 0	; 25
 26c:	fb cf       	rjmp	.-10     	; 0x264 <backwardsecure+0x8>
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	89 e6       	ldi	r24, 0x69	; 105
 272:	98 e1       	ldi	r25, 0x18	; 24
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <backwardsecure+0x18>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <backwardsecure+0x22>
 27e:	00 00       	nop
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
	
	}
	_delay_ms(500);
	PORTF &= ~(0x08);
 280:	e2 e6       	ldi	r30, 0x62	; 98
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <__vector_4>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT3_vect){
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	0b b6       	in	r0, 0x3b	; 59
 298:	0f 92       	push	r0
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	
	backwardsecure();
 2b2:	d4 df       	rcall	.-88     	; 0x25c <backwardsecure>
	
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <forwardsecure>:
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 2da:	c9 99       	sbic	0x19, 1	; 25
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <forwardsecure+0x12>
			
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
 2de:	e2 e6       	ldi	r30, 0x62	; 98
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	80 83       	st	Z, r24
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 2e8:	c9 9b       	sbis	0x19, 1	; 25
 2ea:	fb cf       	rjmp	.-10     	; 0x2e2 <forwardsecure+0x8>
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	89 e6       	ldi	r24, 0x69	; 105
 2f0:	98 e1       	ldi	r25, 0x18	; 24
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <forwardsecure+0x18>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <forwardsecure+0x22>
 2fc:	00 00       	nop
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
			
		}
		_delay_ms(500);
		PORTF &= ~(0x04);
 2fe:	e2 e6       	ldi	r30, 0x62	; 98
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <__vector_3>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT2_vect){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	0b b6       	in	r0, 0x3b	; 59
 316:	0f 92       	push	r0
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	
	forwardsecure();
 330:	d4 df       	rcall	.-88     	; 0x2da <forwardsecure>
	
}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0b be       	out	0x3b, r0	; 59
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 358:	6c d1       	rcall	.+728    	; 0x632 <nrf24_setupPins>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	70 d1       	rcall	.+736    	; 0x63e <nrf24_ce_digitalWrite>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	74 c1       	rjmp	.+744    	; 0x64a <nrf24_csn_digitalWrite>
 362:	08 95       	ret

00000364 <spi_transfer>:
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	08 2f       	mov	r16, r24
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	71 d1       	rcall	.+738    	; 0x656 <nrf24_sck_digitalWrite>
 374:	c7 e0       	ldi	r28, 0x07	; 7
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	f1 2c       	mov	r15, r1
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	98 01       	movw	r18, r16
 37e:	0c 2e       	mov	r0, r28
 380:	02 c0       	rjmp	.+4      	; 0x386 <spi_transfer+0x22>
 382:	35 95       	asr	r19
 384:	27 95       	ror	r18
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <spi_transfer+0x1e>
 38a:	20 ff       	sbrs	r18, 0
 38c:	03 c0       	rjmp	.+6      	; 0x394 <spi_transfer+0x30>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	68 d1       	rcall	.+720    	; 0x662 <nrf24_mosi_digitalWrite>
 392:	02 c0       	rjmp	.+4      	; 0x398 <spi_transfer+0x34>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	65 d1       	rcall	.+714    	; 0x662 <nrf24_mosi_digitalWrite>
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	5d d1       	rcall	.+698    	; 0x656 <nrf24_sck_digitalWrite>
 39c:	ff 0c       	add	r15, r15
 39e:	67 d1       	rcall	.+718    	; 0x66e <nrf24_miso_digitalRead>
 3a0:	88 23       	and	r24, r24
 3a2:	19 f0       	breq	.+6      	; 0x3aa <spi_transfer+0x46>
 3a4:	8f 2d       	mov	r24, r15
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	f8 2e       	mov	r15, r24
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	54 d1       	rcall	.+680    	; 0x656 <nrf24_sck_digitalWrite>
 3ae:	21 97       	sbiw	r28, 0x01	; 1
 3b0:	28 f7       	brcc	.-54     	; 0x37c <spi_transfer+0x18>
 3b2:	8f 2d       	mov	r24, r15
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	08 95       	ret

000003c0 <nrf24_getStatus>:
 3c0:	cf 93       	push	r28
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	42 d1       	rcall	.+644    	; 0x64a <nrf24_csn_digitalWrite>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	cd df       	rcall	.-102    	; 0x364 <spi_transfer>
 3ca:	c8 2f       	mov	r28, r24
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	3d d1       	rcall	.+634    	; 0x64a <nrf24_csn_digitalWrite>
 3d0:	8c 2f       	mov	r24, r28
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <nrf24_isSending>:
 3d6:	f4 df       	rcall	.-24     	; 0x3c0 <nrf24_getStatus>
 3d8:	98 2f       	mov	r25, r24
 3da:	90 73       	andi	r25, 0x30	; 48
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	09 f0       	breq	.+2      	; 0x3e2 <nrf24_isSending+0xc>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret

000003e4 <nrf24_lastMessageStatus>:
 3e4:	ed df       	rcall	.-38     	; 0x3c0 <nrf24_getStatus>
 3e6:	85 fd       	sbrc	r24, 5
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <nrf24_lastMessageStatus+0xe>
 3ea:	84 ff       	sbrs	r24, 4
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <nrf24_lastMessageStatus+0x12>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <nrf24_transferSync>:
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	e4 2e       	mov	r14, r20
 408:	44 23       	and	r20, r20
 40a:	69 f0       	breq	.+26     	; 0x426 <nrf24_transferSync+0x2c>
 40c:	08 2f       	mov	r16, r24
 40e:	19 2f       	mov	r17, r25
 410:	c6 2f       	mov	r28, r22
 412:	d7 2f       	mov	r29, r23
 414:	f1 2c       	mov	r15, r1
 416:	f8 01       	movw	r30, r16
 418:	81 91       	ld	r24, Z+
 41a:	8f 01       	movw	r16, r30
 41c:	a3 df       	rcall	.-186    	; 0x364 <spi_transfer>
 41e:	89 93       	st	Y+, r24
 420:	f3 94       	inc	r15
 422:	fe 10       	cpse	r15, r14
 424:	f8 cf       	rjmp	.-16     	; 0x416 <nrf24_transferSync+0x1c>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	08 95       	ret

00000434 <nrf24_transmitSync>:
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	06 2f       	mov	r16, r22
 43e:	66 23       	and	r22, r22
 440:	41 f0       	breq	.+16     	; 0x452 <nrf24_transmitSync+0x1e>
 442:	c8 2f       	mov	r28, r24
 444:	d9 2f       	mov	r29, r25
 446:	10 e0       	ldi	r17, 0x00	; 0
 448:	89 91       	ld	r24, Y+
 44a:	8c df       	rcall	.-232    	; 0x364 <spi_transfer>
 44c:	1f 5f       	subi	r17, 0xFF	; 255
 44e:	10 13       	cpse	r17, r16
 450:	fb cf       	rjmp	.-10     	; 0x448 <nrf24_transmitSync+0x14>
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	08 95       	ret

0000045c <nrf24_configRegister>:
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	d8 2f       	mov	r29, r24
 462:	c6 2f       	mov	r28, r22
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	f1 d0       	rcall	.+482    	; 0x64a <nrf24_csn_digitalWrite>
 468:	8d 2f       	mov	r24, r29
 46a:	8f 71       	andi	r24, 0x1F	; 31
 46c:	80 62       	ori	r24, 0x20	; 32
 46e:	7a df       	rcall	.-268    	; 0x364 <spi_transfer>
 470:	8c 2f       	mov	r24, r28
 472:	78 df       	rcall	.-272    	; 0x364 <spi_transfer>
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	e9 d0       	rcall	.+466    	; 0x64a <nrf24_csn_digitalWrite>
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <nrf24_getData>:
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	e1 d0       	rcall	.+450    	; 0x64a <nrf24_csn_digitalWrite>
 488:	81 e6       	ldi	r24, 0x61	; 97
 48a:	6c df       	rcall	.-296    	; 0x364 <spi_transfer>
 48c:	40 91 13 01 	lds	r20, 0x0113
 490:	be 01       	movw	r22, r28
 492:	ce 01       	movw	r24, r28
 494:	b2 df       	rcall	.-156    	; 0x3fa <nrf24_transferSync>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	d8 d0       	rcall	.+432    	; 0x64a <nrf24_csn_digitalWrite>
 49a:	60 e4       	ldi	r22, 0x40	; 64
 49c:	87 e0       	ldi	r24, 0x07	; 7
 49e:	de df       	rcall	.-68     	; 0x45c <nrf24_configRegister>
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <nrf24_powerUpRx>:
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	d0 d0       	rcall	.+416    	; 0x64a <nrf24_csn_digitalWrite>
 4aa:	82 ee       	ldi	r24, 0xE2	; 226
 4ac:	5b df       	rcall	.-330    	; 0x364 <spi_transfer>
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	cc d0       	rcall	.+408    	; 0x64a <nrf24_csn_digitalWrite>
 4b2:	60 e7       	ldi	r22, 0x70	; 112
 4b4:	87 e0       	ldi	r24, 0x07	; 7
 4b6:	d2 df       	rcall	.-92     	; 0x45c <nrf24_configRegister>
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	c1 d0       	rcall	.+386    	; 0x63e <nrf24_ce_digitalWrite>
 4bc:	6b e0       	ldi	r22, 0x0B	; 11
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	cd df       	rcall	.-102    	; 0x45c <nrf24_configRegister>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	bc c0       	rjmp	.+376    	; 0x63e <nrf24_ce_digitalWrite>
 4c6:	08 95       	ret

000004c8 <nrf24_config>:
 4c8:	60 93 13 01 	sts	0x0113, r22
 4cc:	68 2f       	mov	r22, r24
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	c5 df       	rcall	.-118    	; 0x45c <nrf24_configRegister>
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	81 e1       	ldi	r24, 0x11	; 17
 4d6:	c2 df       	rcall	.-124    	; 0x45c <nrf24_configRegister>
 4d8:	60 91 13 01 	lds	r22, 0x0113
 4dc:	82 e1       	ldi	r24, 0x12	; 18
 4de:	be df       	rcall	.-132    	; 0x45c <nrf24_configRegister>
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	83 e1       	ldi	r24, 0x13	; 19
 4e4:	bb df       	rcall	.-138    	; 0x45c <nrf24_configRegister>
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	84 e1       	ldi	r24, 0x14	; 20
 4ea:	b8 df       	rcall	.-144    	; 0x45c <nrf24_configRegister>
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	85 e1       	ldi	r24, 0x15	; 21
 4f0:	b5 df       	rcall	.-150    	; 0x45c <nrf24_configRegister>
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	86 e1       	ldi	r24, 0x16	; 22
 4f6:	b2 df       	rcall	.-156    	; 0x45c <nrf24_configRegister>
 4f8:	66 e0       	ldi	r22, 0x06	; 6
 4fa:	86 e0       	ldi	r24, 0x06	; 6
 4fc:	af df       	rcall	.-162    	; 0x45c <nrf24_configRegister>
 4fe:	68 e0       	ldi	r22, 0x08	; 8
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	ac df       	rcall	.-168    	; 0x45c <nrf24_configRegister>
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	a9 df       	rcall	.-174    	; 0x45c <nrf24_configRegister>
 50a:	63 e0       	ldi	r22, 0x03	; 3
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	a6 df       	rcall	.-180    	; 0x45c <nrf24_configRegister>
 510:	6f e4       	ldi	r22, 0x4F	; 79
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	a3 df       	rcall	.-186    	; 0x45c <nrf24_configRegister>
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	8c e1       	ldi	r24, 0x1C	; 28
 51a:	a0 df       	rcall	.-192    	; 0x45c <nrf24_configRegister>
 51c:	c4 cf       	rjmp	.-120    	; 0x4a6 <nrf24_powerUpRx>
 51e:	08 95       	ret

00000520 <nrf24_powerUpTx>:
 520:	60 e7       	ldi	r22, 0x70	; 112
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	9b df       	rcall	.-202    	; 0x45c <nrf24_configRegister>
 526:	6a e0       	ldi	r22, 0x0A	; 10
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	98 cf       	rjmp	.-208    	; 0x45c <nrf24_configRegister>
 52c:	08 95       	ret

0000052e <nrf24_send>:
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ec 01       	movw	r28, r24
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	83 d0       	rcall	.+262    	; 0x63e <nrf24_ce_digitalWrite>
 538:	f3 df       	rcall	.-26     	; 0x520 <nrf24_powerUpTx>
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	86 d0       	rcall	.+268    	; 0x64a <nrf24_csn_digitalWrite>
 53e:	81 ee       	ldi	r24, 0xE1	; 225
 540:	11 df       	rcall	.-478    	; 0x364 <spi_transfer>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	82 d0       	rcall	.+260    	; 0x64a <nrf24_csn_digitalWrite>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	80 d0       	rcall	.+256    	; 0x64a <nrf24_csn_digitalWrite>
 54a:	80 ea       	ldi	r24, 0xA0	; 160
 54c:	0b df       	rcall	.-490    	; 0x364 <spi_transfer>
 54e:	60 91 13 01 	lds	r22, 0x0113
 552:	ce 01       	movw	r24, r28
 554:	6f df       	rcall	.-290    	; 0x434 <nrf24_transmitSync>
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	78 d0       	rcall	.+240    	; 0x64a <nrf24_csn_digitalWrite>
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	70 d0       	rcall	.+224    	; 0x63e <nrf24_ce_digitalWrite>
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <nrf24_readRegister>:
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	08 2f       	mov	r16, r24
 56e:	eb 01       	movw	r28, r22
 570:	14 2f       	mov	r17, r20
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	6a d0       	rcall	.+212    	; 0x64a <nrf24_csn_digitalWrite>
 576:	80 2f       	mov	r24, r16
 578:	8f 71       	andi	r24, 0x1F	; 31
 57a:	f4 de       	rcall	.-536    	; 0x364 <spi_transfer>
 57c:	41 2f       	mov	r20, r17
 57e:	be 01       	movw	r22, r28
 580:	ce 01       	movw	r24, r28
 582:	3b df       	rcall	.-394    	; 0x3fa <nrf24_transferSync>
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	61 d0       	rcall	.+194    	; 0x64a <nrf24_csn_digitalWrite>
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <nrf24_rxFifoEmpty>:
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	1f 92       	push	r1
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	be 01       	movw	r22, r28
 5a0:	6f 5f       	subi	r22, 0xFF	; 255
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	87 e1       	ldi	r24, 0x17	; 23
 5a6:	de df       	rcall	.-68     	; 0x564 <nrf24_readRegister>
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	81 70       	andi	r24, 0x01	; 1
 5ac:	0f 90       	pop	r0
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <nrf24_dataReady>:
 5b4:	05 df       	rcall	.-502    	; 0x3c0 <nrf24_getStatus>
 5b6:	86 fd       	sbrc	r24, 6
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <nrf24_dataReady+0x12>
 5ba:	eb df       	rcall	.-42     	; 0x592 <nrf24_rxFifoEmpty>
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	88 23       	and	r24, r24
 5c0:	19 f0       	breq	.+6      	; 0x5c8 <nrf24_dataReady+0x14>
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <nrf24_dataReady+0x14>
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	89 2f       	mov	r24, r25
 5ca:	08 95       	ret

000005cc <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	08 2f       	mov	r16, r24
 5d6:	eb 01       	movw	r28, r22
 5d8:	14 2f       	mov	r17, r20
    nrf24_csn_digitalWrite(LOW);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	36 d0       	rcall	.+108    	; 0x64a <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 5de:	80 2f       	mov	r24, r16
 5e0:	8f 71       	andi	r24, 0x1F	; 31
 5e2:	80 62       	ori	r24, 0x20	; 32
 5e4:	bf de       	rcall	.-642    	; 0x364 <spi_transfer>
    nrf24_transmitSync(value,len);
 5e6:	61 2f       	mov	r22, r17
 5e8:	ce 01       	movw	r24, r28
 5ea:	24 df       	rcall	.-440    	; 0x434 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	2d d0       	rcall	.+90     	; 0x64a <nrf24_csn_digitalWrite>
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret

000005fa <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	1d d0       	rcall	.+58     	; 0x63e <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 604:	45 e0       	ldi	r20, 0x05	; 5
 606:	be 01       	movw	r22, r28
 608:	8b e0       	ldi	r24, 0x0B	; 11
 60a:	e0 df       	rcall	.-64     	; 0x5cc <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	17 d0       	rcall	.+46     	; 0x63e <nrf24_ce_digitalWrite>
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 61c:	45 e0       	ldi	r20, 0x05	; 5
 61e:	bc 01       	movw	r22, r24
 620:	8a e0       	ldi	r24, 0x0A	; 10
 622:	d4 df       	rcall	.-88     	; 0x5cc <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 624:	45 e0       	ldi	r20, 0x05	; 5
 626:	be 01       	movw	r22, r28
 628:	80 e1       	ldi	r24, 0x10	; 16
 62a:	d0 df       	rcall	.-96     	; 0x5cc <nrf24_writeRegister>
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRE,6); // CE output
 632:	16 9a       	sbi	0x02, 6	; 2
    set_bit(DDRB,0); // CSN output
 634:	b8 9a       	sbi	0x17, 0	; 23
    set_bit(DDRB,1); // SCK output
 636:	b9 9a       	sbi	0x17, 1	; 23
    set_bit(DDRB,2); // MOSI output
 638:	ba 9a       	sbi	0x17, 2	; 23
    clr_bit(DDRB,3); // MISO input
 63a:	bb 98       	cbi	0x17, 3	; 23
 63c:	08 95       	ret

0000063e <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 63e:	88 23       	and	r24, r24
 640:	11 f0       	breq	.+4      	; 0x646 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTE,6);
 642:	1e 9a       	sbi	0x03, 6	; 3
 644:	08 95       	ret
    }
    else
    {
        clr_bit(PORTE,6);
 646:	1e 98       	cbi	0x03, 6	; 3
 648:	08 95       	ret

0000064a <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 64a:	88 23       	and	r24, r24
 64c:	11 f0       	breq	.+4      	; 0x652 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,0);
 64e:	c0 9a       	sbi	0x18, 0	; 24
 650:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,0);
 652:	c0 98       	cbi	0x18, 0	; 24
 654:	08 95       	ret

00000656 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 656:	88 23       	and	r24, r24
 658:	11 f0       	breq	.+4      	; 0x65e <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
 65a:	c1 9a       	sbi	0x18, 1	; 24
 65c:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
 65e:	c1 98       	cbi	0x18, 1	; 24
 660:	08 95       	ret

00000662 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 662:	88 23       	and	r24, r24
 664:	11 f0       	breq	.+4      	; 0x66a <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
 666:	c2 9a       	sbi	0x18, 2	; 24
 668:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
 66a:	c2 98       	cbi	0x18, 2	; 24
 66c:	08 95       	ret

0000066e <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,3);
 66e:	86 b3       	in	r24, 0x16	; 22
}
 670:	88 70       	andi	r24, 0x08	; 8
 672:	08 95       	ret

00000674 <_exit>:
 674:	f8 94       	cli

00000676 <__stop_program>:
 676:	ff cf       	rjmp	.-2      	; 0x676 <__stop_program>


Funkempf+ñnger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000054a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  000005e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012a8  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f3  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009eb  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a8  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051a  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a30  00000000  00000000  000031da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00003c0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e4       	ldi	r30, 0x4A	; 74
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	97 d0       	rcall	.+302    	; 0x1f2 <main>
  c4:	40 c2       	rjmp	.+1152   	; 0x546 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
	int accu = 0;													// Define von Akku Variabel
	
	// Daten empfangen EF
	
	return(accu);													// Wert zurückgeben
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 0b 01 	sts	0x010B, r25
  de:	80 93 0a 01 	sts	0x010A, r24
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_4>:
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 0d 01 	sts	0x010D, r25
 106:	80 93 0c 01 	sts	0x010C, r24
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <rf_transimit>:

void rf_transimit(){
	
	data_array[0] = 0x77;
 118:	87 e7       	ldi	r24, 0x77	; 119
 11a:	80 93 0f 01 	sts	0x010F, r24
	data_array[1] = twi_receive(EM, akku);
 11e:	10 92 10 01 	sts	0x0110, r1
	data_array[2] = PORTC;
 122:	85 b3       	in	r24, 0x15	; 21
 124:	80 93 11 01 	sts	0x0111, r24
	data_array[3] = 0x00;
 128:	10 92 12 01 	sts	0x0112, r1
	
	
	nrf24_send(data_array);											// Datenarray versenden
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	67 d1       	rcall	.+718    	; 0x400 <nrf24_send>
	while(nrf24_isSending());										// Warten bis senden beendet ist
 132:	ba d0       	rcall	.+372    	; 0x2a8 <nrf24_isSending>
 134:	81 11       	cpse	r24, r1
 136:	fd cf       	rjmp	.-6      	; 0x132 <rf_transimit+0x1a>
	temp = nrf24_lastMessageStatus();								// Schaut ob alle Daten angekommen sind
 138:	be d0       	rcall	.+380    	; 0x2b6 <nrf24_lastMessageStatus>
 13a:	80 93 0e 01 	sts	0x010E, r24

	if(temp == NRF24_TRANSMISSON_OK){
 13e:	81 11       	cpse	r24, r1
 140:	12 c0       	rjmp	.+36     	; 0x166 <rf_transimit+0x4e>
		
		PORTF |= 0x02;
 142:	e2 e6       	ldi	r30, 0x62	; 98
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f e7       	ldi	r18, 0x7F	; 127
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <rf_transimit+0x3a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <rf_transimit+0x44>
 15c:	00 00       	nop
		_delay_ms(25);
		PORTF |= ~(0x02);
 15e:	80 81       	ld	r24, Z
 160:	8d 6f       	ori	r24, 0xFD	; 253
 162:	80 83       	st	Z, r24
 164:	13 c0       	rjmp	.+38     	; 0x18c <rf_transimit+0x74>
		
	}
	else if(temp == NRF24_MESSAGE_LOST){
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	89 f4       	brne	.+34     	; 0x18c <rf_transimit+0x74>
		
		PORTF |= 0x08;
 16a:	e2 e6       	ldi	r30, 0x62	; 98
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
 174:	2f e7       	ldi	r18, 0x7F	; 127
 176:	88 e3       	ldi	r24, 0x38	; 56
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <rf_transimit+0x62>
 182:	00 c0       	rjmp	.+0      	; 0x184 <rf_transimit+0x6c>
 184:	00 00       	nop
		_delay_ms(25);
		PORTF |= ~(0x08);
 186:	80 81       	ld	r24, Z
 188:	87 6f       	ori	r24, 0xF7	; 247
 18a:	80 83       	st	Z, r24
		
	}
	nrf24_powerUpRx();
 18c:	f5 d0       	rcall	.+490    	; 0x378 <nrf24_powerUpRx>
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	9c e9       	ldi	r25, 0x9C	; 156
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <rf_transimit+0x7a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <rf_transimit+0x80>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <rf_receive>:
}


int rf_receive(void){
	
	if(nrf24_dataReady()){
 19c:	74 d1       	rcall	.+744    	; 0x486 <nrf24_dataReady>
 19e:	88 23       	and	r24, r24
 1a0:	f9 f0       	breq	.+62     	; 0x1e0 <rf_receive+0x44>
		nrf24_getData(data_array);
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	d4 d0       	rcall	.+424    	; 0x350 <nrf24_getData>
		if ( data_array[1] == 0xAA)  {
 1a8:	80 91 10 01 	lds	r24, 0x0110
 1ac:	8a 3a       	cpi	r24, 0xAA	; 170
 1ae:	89 f4       	brne	.+34     	; 0x1d2 <rf_receive+0x36>
			
			PORTF |= 0x04;
 1b0:	e2 e6       	ldi	r30, 0x62	; 98
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	80 83       	st	Z, r24
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	84 e3       	ldi	r24, 0x34	; 52
 1be:	9c e0       	ldi	r25, 0x0C	; 12
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <rf_receive+0x24>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <rf_receive+0x2e>
 1ca:	00 00       	nop
			_delay_ms(250);
			PORTF &= ~(0x04);
 1cc:	80 81       	ld	r24, Z
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	80 83       	st	Z, r24
			
		}
		
		if(data_array[0] == senden){
 1d2:	80 91 0f 01 	lds	r24, 0x010F
 1d6:	87 37       	cpi	r24, 0x77	; 119
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <rf_receive+0x4a>
			
			return 1;
			
		}
		if(data_array[0] == empfangen){
 1da:	88 39       	cpi	r24, 0x98	; 152
 1dc:	39 f0       	breq	.+14     	; 0x1ec <rf_receive+0x50>
 1de:	08 95       	ret
			return 2;
			
		}
		
	}
	else{ return 3; }
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	08 95       	ret
			
		}
		
		if(data_array[0] == senden){
			
			return 1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	08 95       	ret
			
		}
		if(data_array[0] == empfangen){
			
			return 2;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	}
	else{ return 3; }
	
 1f0:	08 95       	ret

000001f2 <main>:

/* ------------------------------------------------------------------------- */

int main(){
	
	DDRF = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0x01;
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	90 93 62 00 	sts	0x0062, r25
	DDRC = 0xFF;
 1fe:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 200:	15 ba       	out	0x15, r1	; 21
	
	EIMSK = (1<<INT2) | (1<<INT3);												// Interrupt auf INT2 und 3 aktivieren
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	89 bf       	out	0x39, r24	; 57
	EICRA = (1<<ISC21) | (0<<ISC20) | (1<<ISC31) | (0<<ISC30);	
 206:	80 ea       	ldi	r24, 0xA0	; 160
 208:	80 93 6a 00 	sts	0x006A, r24
	
	nrf24_init();																// Funkmodul Initialisieren
 20c:	0e d0       	rcall	.+28     	; 0x22a <nrf24_init>
	nrf24_config(2,4);															// Den Chanel vom Funkmodul wählen und Anzahl der Byte zum übertragen angeben
 20e:	64 e0       	ldi	r22, 0x04	; 4
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	c3 d0       	rcall	.+390    	; 0x39a <nrf24_config>
	nrf24_tx_address(tx_address);												// Sendeadresse festlegen ( Muss mit empfängeradresse(rx) des anden geräts übereinstimmen)
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	67 d1       	rcall	.+718    	; 0x4e8 <nrf24_tx_address>
	nrf24_rx_address(rx_address);												// Empfangsadresse festlegen ( Muss mit sendeadresse(tx) des anden geräts übereinstimmen)
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	56 d1       	rcall	.+684    	; 0x4cc <nrf24_rx_address>

	while(1) {

		switch(rf_receive()) {
 220:	bd df       	rcall	.-134    	; 0x19c <rf_receive>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	e9 f7       	brne	.-6      	; 0x220 <main+0x2e>
			
			case 1: rf_transimit(); break;
 226:	78 df       	rcall	.-272    	; 0x118 <rf_transimit>
 228:	fb cf       	rjmp	.-10     	; 0x220 <main+0x2e>

0000022a <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 22a:	6c d1       	rcall	.+728    	; 0x504 <nrf24_setupPins>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	70 d1       	rcall	.+736    	; 0x510 <nrf24_ce_digitalWrite>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	74 c1       	rjmp	.+744    	; 0x51c <nrf24_csn_digitalWrite>
 234:	08 95       	ret

00000236 <spi_transfer>:
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	08 2f       	mov	r16, r24
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	71 d1       	rcall	.+738    	; 0x528 <nrf24_sck_digitalWrite>
 246:	c7 e0       	ldi	r28, 0x07	; 7
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	f1 2c       	mov	r15, r1
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	98 01       	movw	r18, r16
 250:	0c 2e       	mov	r0, r28
 252:	02 c0       	rjmp	.+4      	; 0x258 <spi_transfer+0x22>
 254:	35 95       	asr	r19
 256:	27 95       	ror	r18
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <spi_transfer+0x1e>
 25c:	20 ff       	sbrs	r18, 0
 25e:	03 c0       	rjmp	.+6      	; 0x266 <spi_transfer+0x30>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	68 d1       	rcall	.+720    	; 0x534 <nrf24_mosi_digitalWrite>
 264:	02 c0       	rjmp	.+4      	; 0x26a <spi_transfer+0x34>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	65 d1       	rcall	.+714    	; 0x534 <nrf24_mosi_digitalWrite>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	5d d1       	rcall	.+698    	; 0x528 <nrf24_sck_digitalWrite>
 26e:	ff 0c       	add	r15, r15
 270:	67 d1       	rcall	.+718    	; 0x540 <nrf24_miso_digitalRead>
 272:	88 23       	and	r24, r24
 274:	19 f0       	breq	.+6      	; 0x27c <spi_transfer+0x46>
 276:	8f 2d       	mov	r24, r15
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	f8 2e       	mov	r15, r24
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	54 d1       	rcall	.+680    	; 0x528 <nrf24_sck_digitalWrite>
 280:	21 97       	sbiw	r28, 0x01	; 1
 282:	28 f7       	brcc	.-54     	; 0x24e <spi_transfer+0x18>
 284:	8f 2d       	mov	r24, r15
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	08 95       	ret

00000292 <nrf24_getStatus>:
 292:	cf 93       	push	r28
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	42 d1       	rcall	.+644    	; 0x51c <nrf24_csn_digitalWrite>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	cd df       	rcall	.-102    	; 0x236 <spi_transfer>
 29c:	c8 2f       	mov	r28, r24
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	3d d1       	rcall	.+634    	; 0x51c <nrf24_csn_digitalWrite>
 2a2:	8c 2f       	mov	r24, r28
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <nrf24_isSending>:
 2a8:	f4 df       	rcall	.-24     	; 0x292 <nrf24_getStatus>
 2aa:	98 2f       	mov	r25, r24
 2ac:	90 73       	andi	r25, 0x30	; 48
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <nrf24_isSending+0xc>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret

000002b6 <nrf24_lastMessageStatus>:
 2b6:	ed df       	rcall	.-38     	; 0x292 <nrf24_getStatus>
 2b8:	85 fd       	sbrc	r24, 5
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <nrf24_lastMessageStatus+0xe>
 2bc:	84 ff       	sbrs	r24, 4
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <nrf24_lastMessageStatus+0x12>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	08 95       	ret

000002cc <nrf24_transferSync>:
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	e4 2e       	mov	r14, r20
 2da:	44 23       	and	r20, r20
 2dc:	69 f0       	breq	.+26     	; 0x2f8 <nrf24_transferSync+0x2c>
 2de:	08 2f       	mov	r16, r24
 2e0:	19 2f       	mov	r17, r25
 2e2:	c6 2f       	mov	r28, r22
 2e4:	d7 2f       	mov	r29, r23
 2e6:	f1 2c       	mov	r15, r1
 2e8:	f8 01       	movw	r30, r16
 2ea:	81 91       	ld	r24, Z+
 2ec:	8f 01       	movw	r16, r30
 2ee:	a3 df       	rcall	.-186    	; 0x236 <spi_transfer>
 2f0:	89 93       	st	Y+, r24
 2f2:	f3 94       	inc	r15
 2f4:	fe 10       	cpse	r15, r14
 2f6:	f8 cf       	rjmp	.-16     	; 0x2e8 <nrf24_transferSync+0x1c>
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	08 95       	ret

00000306 <nrf24_transmitSync>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	06 2f       	mov	r16, r22
 310:	66 23       	and	r22, r22
 312:	41 f0       	breq	.+16     	; 0x324 <nrf24_transmitSync+0x1e>
 314:	c8 2f       	mov	r28, r24
 316:	d9 2f       	mov	r29, r25
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	89 91       	ld	r24, Y+
 31c:	8c df       	rcall	.-232    	; 0x236 <spi_transfer>
 31e:	1f 5f       	subi	r17, 0xFF	; 255
 320:	10 13       	cpse	r17, r16
 322:	fb cf       	rjmp	.-10     	; 0x31a <nrf24_transmitSync+0x14>
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <nrf24_configRegister>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	d8 2f       	mov	r29, r24
 334:	c6 2f       	mov	r28, r22
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	f1 d0       	rcall	.+482    	; 0x51c <nrf24_csn_digitalWrite>
 33a:	8d 2f       	mov	r24, r29
 33c:	8f 71       	andi	r24, 0x1F	; 31
 33e:	80 62       	ori	r24, 0x20	; 32
 340:	7a df       	rcall	.-268    	; 0x236 <spi_transfer>
 342:	8c 2f       	mov	r24, r28
 344:	78 df       	rcall	.-272    	; 0x236 <spi_transfer>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	e9 d0       	rcall	.+466    	; 0x51c <nrf24_csn_digitalWrite>
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <nrf24_getData>:
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	e1 d0       	rcall	.+450    	; 0x51c <nrf24_csn_digitalWrite>
 35a:	81 e6       	ldi	r24, 0x61	; 97
 35c:	6c df       	rcall	.-296    	; 0x236 <spi_transfer>
 35e:	40 91 13 01 	lds	r20, 0x0113
 362:	be 01       	movw	r22, r28
 364:	ce 01       	movw	r24, r28
 366:	b2 df       	rcall	.-156    	; 0x2cc <nrf24_transferSync>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	d8 d0       	rcall	.+432    	; 0x51c <nrf24_csn_digitalWrite>
 36c:	60 e4       	ldi	r22, 0x40	; 64
 36e:	87 e0       	ldi	r24, 0x07	; 7
 370:	de df       	rcall	.-68     	; 0x32e <nrf24_configRegister>
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <nrf24_powerUpRx>:
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	d0 d0       	rcall	.+416    	; 0x51c <nrf24_csn_digitalWrite>
 37c:	82 ee       	ldi	r24, 0xE2	; 226
 37e:	5b df       	rcall	.-330    	; 0x236 <spi_transfer>
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	cc d0       	rcall	.+408    	; 0x51c <nrf24_csn_digitalWrite>
 384:	60 e7       	ldi	r22, 0x70	; 112
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	d2 df       	rcall	.-92     	; 0x32e <nrf24_configRegister>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	c1 d0       	rcall	.+386    	; 0x510 <nrf24_ce_digitalWrite>
 38e:	6b e0       	ldi	r22, 0x0B	; 11
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	cd df       	rcall	.-102    	; 0x32e <nrf24_configRegister>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	bc c0       	rjmp	.+376    	; 0x510 <nrf24_ce_digitalWrite>
 398:	08 95       	ret

0000039a <nrf24_config>:
 39a:	60 93 13 01 	sts	0x0113, r22
 39e:	68 2f       	mov	r22, r24
 3a0:	85 e0       	ldi	r24, 0x05	; 5
 3a2:	c5 df       	rcall	.-118    	; 0x32e <nrf24_configRegister>
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	81 e1       	ldi	r24, 0x11	; 17
 3a8:	c2 df       	rcall	.-124    	; 0x32e <nrf24_configRegister>
 3aa:	60 91 13 01 	lds	r22, 0x0113
 3ae:	82 e1       	ldi	r24, 0x12	; 18
 3b0:	be df       	rcall	.-132    	; 0x32e <nrf24_configRegister>
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	83 e1       	ldi	r24, 0x13	; 19
 3b6:	bb df       	rcall	.-138    	; 0x32e <nrf24_configRegister>
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	84 e1       	ldi	r24, 0x14	; 20
 3bc:	b8 df       	rcall	.-144    	; 0x32e <nrf24_configRegister>
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	85 e1       	ldi	r24, 0x15	; 21
 3c2:	b5 df       	rcall	.-150    	; 0x32e <nrf24_configRegister>
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	86 e1       	ldi	r24, 0x16	; 22
 3c8:	b2 df       	rcall	.-156    	; 0x32e <nrf24_configRegister>
 3ca:	66 e0       	ldi	r22, 0x06	; 6
 3cc:	86 e0       	ldi	r24, 0x06	; 6
 3ce:	af df       	rcall	.-162    	; 0x32e <nrf24_configRegister>
 3d0:	68 e0       	ldi	r22, 0x08	; 8
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	ac df       	rcall	.-168    	; 0x32e <nrf24_configRegister>
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	a9 df       	rcall	.-174    	; 0x32e <nrf24_configRegister>
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	a6 df       	rcall	.-180    	; 0x32e <nrf24_configRegister>
 3e2:	6f e4       	ldi	r22, 0x4F	; 79
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	a3 df       	rcall	.-186    	; 0x32e <nrf24_configRegister>
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	8c e1       	ldi	r24, 0x1C	; 28
 3ec:	a0 df       	rcall	.-192    	; 0x32e <nrf24_configRegister>
 3ee:	c4 cf       	rjmp	.-120    	; 0x378 <nrf24_powerUpRx>
 3f0:	08 95       	ret

000003f2 <nrf24_powerUpTx>:
 3f2:	60 e7       	ldi	r22, 0x70	; 112
 3f4:	87 e0       	ldi	r24, 0x07	; 7
 3f6:	9b df       	rcall	.-202    	; 0x32e <nrf24_configRegister>
 3f8:	6a e0       	ldi	r22, 0x0A	; 10
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	98 cf       	rjmp	.-208    	; 0x32e <nrf24_configRegister>
 3fe:	08 95       	ret

00000400 <nrf24_send>:
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	ec 01       	movw	r28, r24
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	83 d0       	rcall	.+262    	; 0x510 <nrf24_ce_digitalWrite>
 40a:	f3 df       	rcall	.-26     	; 0x3f2 <nrf24_powerUpTx>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	86 d0       	rcall	.+268    	; 0x51c <nrf24_csn_digitalWrite>
 410:	81 ee       	ldi	r24, 0xE1	; 225
 412:	11 df       	rcall	.-478    	; 0x236 <spi_transfer>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	82 d0       	rcall	.+260    	; 0x51c <nrf24_csn_digitalWrite>
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	80 d0       	rcall	.+256    	; 0x51c <nrf24_csn_digitalWrite>
 41c:	80 ea       	ldi	r24, 0xA0	; 160
 41e:	0b df       	rcall	.-490    	; 0x236 <spi_transfer>
 420:	60 91 13 01 	lds	r22, 0x0113
 424:	ce 01       	movw	r24, r28
 426:	6f df       	rcall	.-290    	; 0x306 <nrf24_transmitSync>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	78 d0       	rcall	.+240    	; 0x51c <nrf24_csn_digitalWrite>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	70 d0       	rcall	.+224    	; 0x510 <nrf24_ce_digitalWrite>
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <nrf24_readRegister>:
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	08 2f       	mov	r16, r24
 440:	eb 01       	movw	r28, r22
 442:	14 2f       	mov	r17, r20
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	6a d0       	rcall	.+212    	; 0x51c <nrf24_csn_digitalWrite>
 448:	80 2f       	mov	r24, r16
 44a:	8f 71       	andi	r24, 0x1F	; 31
 44c:	f4 de       	rcall	.-536    	; 0x236 <spi_transfer>
 44e:	41 2f       	mov	r20, r17
 450:	be 01       	movw	r22, r28
 452:	ce 01       	movw	r24, r28
 454:	3b df       	rcall	.-394    	; 0x2cc <nrf24_transferSync>
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	61 d0       	rcall	.+194    	; 0x51c <nrf24_csn_digitalWrite>
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <nrf24_rxFifoEmpty>:
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	be 01       	movw	r22, r28
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	87 e1       	ldi	r24, 0x17	; 23
 478:	de df       	rcall	.-68     	; 0x436 <nrf24_readRegister>
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	81 70       	andi	r24, 0x01	; 1
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <nrf24_dataReady>:
 486:	05 df       	rcall	.-502    	; 0x292 <nrf24_getStatus>
 488:	86 fd       	sbrc	r24, 6
 48a:	06 c0       	rjmp	.+12     	; 0x498 <nrf24_dataReady+0x12>
 48c:	eb df       	rcall	.-42     	; 0x464 <nrf24_rxFifoEmpty>
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	88 23       	and	r24, r24
 492:	19 f0       	breq	.+6      	; 0x49a <nrf24_dataReady+0x14>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	01 c0       	rjmp	.+2      	; 0x49a <nrf24_dataReady+0x14>
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	89 2f       	mov	r24, r25
 49c:	08 95       	ret

0000049e <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	08 2f       	mov	r16, r24
 4a8:	eb 01       	movw	r28, r22
 4aa:	14 2f       	mov	r17, r20
    nrf24_csn_digitalWrite(LOW);
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	36 d0       	rcall	.+108    	; 0x51c <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 4b0:	80 2f       	mov	r24, r16
 4b2:	8f 71       	andi	r24, 0x1F	; 31
 4b4:	80 62       	ori	r24, 0x20	; 32
 4b6:	bf de       	rcall	.-642    	; 0x236 <spi_transfer>
    nrf24_transmitSync(value,len);
 4b8:	61 2f       	mov	r22, r17
 4ba:	ce 01       	movw	r24, r28
 4bc:	24 df       	rcall	.-440    	; 0x306 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	2d d0       	rcall	.+90     	; 0x51c <nrf24_csn_digitalWrite>
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	08 95       	ret

000004cc <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	1d d0       	rcall	.+58     	; 0x510 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 4d6:	45 e0       	ldi	r20, 0x05	; 5
 4d8:	be 01       	movw	r22, r28
 4da:	8b e0       	ldi	r24, 0x0B	; 11
 4dc:	e0 df       	rcall	.-64     	; 0x49e <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	17 d0       	rcall	.+46     	; 0x510 <nrf24_ce_digitalWrite>
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 4ee:	45 e0       	ldi	r20, 0x05	; 5
 4f0:	bc 01       	movw	r22, r24
 4f2:	8a e0       	ldi	r24, 0x0A	; 10
 4f4:	d4 df       	rcall	.-88     	; 0x49e <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 4f6:	45 e0       	ldi	r20, 0x05	; 5
 4f8:	be 01       	movw	r22, r28
 4fa:	80 e1       	ldi	r24, 0x10	; 16
 4fc:	d0 df       	rcall	.-96     	; 0x49e <nrf24_writeRegister>
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRE,6); // CE output
 504:	16 9a       	sbi	0x02, 6	; 2
    set_bit(DDRB,0); // CSN output
 506:	b8 9a       	sbi	0x17, 0	; 23
    set_bit(DDRB,1); // SCK output
 508:	b9 9a       	sbi	0x17, 1	; 23
    set_bit(DDRB,2); // MOSI output
 50a:	ba 9a       	sbi	0x17, 2	; 23
    clr_bit(DDRB,3); // MISO input
 50c:	bb 98       	cbi	0x17, 3	; 23
 50e:	08 95       	ret

00000510 <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 510:	88 23       	and	r24, r24
 512:	11 f0       	breq	.+4      	; 0x518 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTE,6);
 514:	1e 9a       	sbi	0x03, 6	; 3
 516:	08 95       	ret
    }
    else
    {
        clr_bit(PORTE,6);
 518:	1e 98       	cbi	0x03, 6	; 3
 51a:	08 95       	ret

0000051c <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 51c:	88 23       	and	r24, r24
 51e:	11 f0       	breq	.+4      	; 0x524 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,0);
 520:	c0 9a       	sbi	0x18, 0	; 24
 522:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,0);
 524:	c0 98       	cbi	0x18, 0	; 24
 526:	08 95       	ret

00000528 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 528:	88 23       	and	r24, r24
 52a:	11 f0       	breq	.+4      	; 0x530 <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
 52c:	c1 9a       	sbi	0x18, 1	; 24
 52e:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
 530:	c1 98       	cbi	0x18, 1	; 24
 532:	08 95       	ret

00000534 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 534:	88 23       	and	r24, r24
 536:	11 f0       	breq	.+4      	; 0x53c <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
 538:	c2 9a       	sbi	0x18, 2	; 24
 53a:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
 53c:	c2 98       	cbi	0x18, 2	; 24
 53e:	08 95       	ret

00000540 <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,3);
 540:	86 b3       	in	r24, 0x16	; 22
}
 542:	88 70       	andi	r24, 0x08	; 8
 544:	08 95       	ret

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>

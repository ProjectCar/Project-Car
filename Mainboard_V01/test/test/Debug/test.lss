
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800100  00800100  00000360  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006b9  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000226  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039a  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000324  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b0  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	e2 c0       	rjmp	.+452    	; 0x1e6 <__vector_8>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 30       	cpi	r26, 0x0F	; 15
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	f9 d0       	rcall	.+498    	; 0x29c <main>
  aa:	1e c1       	rjmp	.+572    	; 0x2e8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z8spi_initv>:
	int accu = 0;													// define
	
																	// daten empfangen EF
	
	return(accu);													// Wert zurückgeben
}
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	81 e5       	ldi	r24, 0x51	; 81
  b4:	8d b9       	out	0x0d, r24	; 13
  b6:	c0 9a       	sbi	0x18, 0	; 24
  b8:	83 ec       	ldi	r24, 0xC3	; 195
  ba:	99 e0       	ldi	r25, 0x09	; 9
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <_Z8spi_initv+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z8spi_initv+0x14>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <_Z13SPI_tranceivei>:
// Version:	 1.1
//////////////////////////////////////////

int SPI_tranceive(int transmit){									// Sendet Daten per Spi

	SPDR = transmit;												// Starte übertragung
  c6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										// Warten bis übertragung beendet ist
  c8:	77 9b       	sbis	0x0e, 7	; 14
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <_Z13SPI_tranceivei+0x2>
	return SPDR;													// Empfangene Daten zurückgeben
  cc:	8f b1       	in	r24, 0x0f	; 15
	
}
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <_Z12receive_modev>:
// Version:	 1.1
//////////////////////////////////////////

void receive_mode(void){

	SPI_tranceive(w_register(0b00000000));
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	f7 df       	rcall	.-18     	; 0xc6 <_Z13SPI_tranceivei>
	SPI_tranceive(0b0110011);										// Letztes Bit bestimmt RX 1 / 0 TX Mode
  d8:	83 e3       	ldi	r24, 0x33	; 51
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	f4 df       	rcall	.-24     	; 0xc6 <_Z13SPI_tranceivei>
	PORTE = PORTE | 0x40;											// CE high schalten
  de:	1e 9a       	sbi	0x03, 6	; 3
  e0:	08 95       	ret

000000e2 <_Z10radio_initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	95 e7       	ldi	r25, 0x75	; 117
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <_Z10radio_initv+0x4>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_Z10radio_initv+0xa>
  ec:	00 00       	nop
//////////////////////////////////////////

void radio_init(void)	{

	_delay_ms(120);													// POR Delay
	SPI_tranceive(w_register(0b00000000));
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	e9 df       	rcall	.-46     	; 0xc6 <_Z13SPI_tranceivei>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	90 e1       	ldi	r25, 0x10	; 16
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <_Z10radio_initv+0x14>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_Z10radio_initv+0x1a>
	_delay_us(50);
	SPI_tranceive(0b0110010);										// Letztes Bit bestimmt RX 1 / 0 TX Mode
  fc:	82 e3       	ldi	r24, 0x32	; 50
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e2 df       	rcall	.-60     	; 0xc6 <_Z13SPI_tranceivei>
 102:	86 e7       	ldi	r24, 0x76	; 118
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z10radio_initv+0x24>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z10radio_initv+0x2a>
 10c:	00 00       	nop
	_delay_us(1500);
	
	receive_mode();
 10e:	e1 cf       	rjmp	.-62     	; 0xd2 <_Z12receive_modev>
 110:	08 95       	ret

00000112 <_Z12receive_datav>:
// Version:	 1.1
//////////////////////////////////////////

uint32_t receive_data(void){
	
	SPI_tranceive(0b01100001);										// In den lesemodus wechseln Muss vl. mit receive_mode(void); ersetzt werden
 112:	81 e6       	ldi	r24, 0x61	; 97
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	d7 df       	rcall	.-82     	; 0xc6 <_Z13SPI_tranceivei>
	
	SPI_tranceive(0xFF);											// Erstes Byte auslesen
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	d4 df       	rcall	.-88     	; 0xc6 <_Z13SPI_tranceivei>
	r_data1 = SPDR;
 11e:	8f b1       	in	r24, 0x0f	; 15
 120:	80 93 0e 01 	sts	0x010E, r24
	
	if (r_data1 == 0x77){ transmit = 1; }							// Wenn gewisse daten kommen in den Sendemodus wechseln.
 124:	80 91 0e 01 	lds	r24, 0x010E
 128:	87 37       	cpi	r24, 0x77	; 119
 12a:	31 f4       	brne	.+12     	; 0x138 <_Z12receive_datav+0x26>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 01 01 	sts	0x0101, r25
 134:	80 93 00 01 	sts	0x0100, r24
	
	SPI_tranceive(0xFF);											// Zweites Byte auslesen
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	c4 df       	rcall	.-120    	; 0xc6 <_Z13SPI_tranceivei>
	r_data2 = SPDR;
 13e:	8f b1       	in	r24, 0x0f	; 15
 140:	80 93 0d 01 	sts	0x010D, r24
	
	SPI_tranceive(0xFF);											// Drites Byte auslesen
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	be df       	rcall	.-132    	; 0xc6 <_Z13SPI_tranceivei>
	r_data3 = SPDR;
 14a:	8f b1       	in	r24, 0x0f	; 15
 14c:	80 93 0c 01 	sts	0x010C, r24
	
	SPI_tranceive(0xFF);											// Viertes Byte auslesen
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	b8 df       	rcall	.-144    	; 0xc6 <_Z13SPI_tranceivei>
	r_data4 = SPDR;
 156:	8f b1       	in	r24, 0x0f	; 15
 158:	80 93 0b 01 	sts	0x010B, r24
		
	SPI_tranceive(0xFF);											// Fünftes Byte auslesen
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	b2 df       	rcall	.-156    	; 0xc6 <_Z13SPI_tranceivei>
	r_data5 = SPDR;
 162:	8f b1       	in	r24, 0x0f	; 15
 164:	80 93 0a 01 	sts	0x010A, r24
	
	uint32_t result = ((((((((r_data5<<8)+r_data4)<<8)+r_data3)<<8)+r_data2)<<8)+r_data1);	// Die ganzen Daten in einen Datentyp zum übergeben wandeln
 168:	80 91 0a 01 	lds	r24, 0x010A
 16c:	80 91 0b 01 	lds	r24, 0x010B
 170:	80 91 0c 01 	lds	r24, 0x010C
 174:	60 91 0d 01 	lds	r22, 0x010D
 178:	80 91 0e 01 	lds	r24, 0x010E
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	76 2f       	mov	r23, r22
 180:	66 27       	eor	r22, r22
 182:	68 0f       	add	r22, r24
 184:	71 1d       	adc	r23, r1
 186:	88 27       	eor	r24, r24
 188:	77 fd       	sbrc	r23, 7
 18a:	80 95       	com	r24
 18c:	98 2f       	mov	r25, r24

	}
	
	return(result);
	
}
 18e:	08 95       	ret

00000190 <_Z6decodev>:
	
}

void decode(void){
	
	motordata = receive_data();										// daten lesen
 190:	c0 df       	rcall	.-128    	; 0x112 <_Z12receive_datav>
 192:	60 93 06 01 	sts	0x0106, r22
 196:	70 93 07 01 	sts	0x0107, r23
 19a:	80 93 08 01 	sts	0x0108, r24
 19e:	90 93 09 01 	sts	0x0109, r25
	m_data1 = (motordata >> 8) & 0x00FF;							// entschlüsseln von daten
 1a2:	80 91 06 01 	lds	r24, 0x0106
 1a6:	90 91 07 01 	lds	r25, 0x0107
 1aa:	a0 91 08 01 	lds	r26, 0x0108
 1ae:	b0 91 09 01 	lds	r27, 0x0109
 1b2:	89 2f       	mov	r24, r25
 1b4:	9a 2f       	mov	r25, r26
 1b6:	ab 2f       	mov	r26, r27
 1b8:	bb 27       	eor	r27, r27
 1ba:	99 27       	eor	r25, r25
 1bc:	90 93 05 01 	sts	0x0105, r25
 1c0:	80 93 04 01 	sts	0x0104, r24
	m_data2 = motordata >> 24;										// entschlüsseln von daten
 1c4:	80 91 06 01 	lds	r24, 0x0106
 1c8:	90 91 07 01 	lds	r25, 0x0107
 1cc:	a0 91 08 01 	lds	r26, 0x0108
 1d0:	b0 91 09 01 	lds	r27, 0x0109
 1d4:	8b 2f       	mov	r24, r27
 1d6:	99 27       	eor	r25, r25
 1d8:	aa 27       	eor	r26, r26
 1da:	bb 27       	eor	r27, r27
 1dc:	90 93 03 01 	sts	0x0103, r25
 1e0:	80 93 02 01 	sts	0x0102, r24
 1e4:	08 95       	ret

000001e6 <__vector_8>:
#include <util/delay.h>
#include <stdint.h>
#include <avr/interrupt.h>
#include "predefines.h"

ISR(INT7_vect){														// Wenn Daten vom Funkmodul empfangen worden sind
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31

	PORTF = PORTF | 0x01;											// Interrupt LED einschalten
 20c:	e2 e6       	ldi	r30, 0x62	; 98
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
	decode();														// Daten von Funkmodul lesen und verarbeiten
 216:	bc df       	rcall	.-136    	; 0x190 <_Z6decodev>
	
	if ( transmit == 0)	{
 218:	80 91 00 01 	lds	r24, 0x0100
 21c:	90 91 01 01 	lds	r25, 0x0101
 220:	89 2b       	or	r24, r25
 222:	41 f4       	brne	.+16     	; 0x234 <__vector_8+0x4e>
		
		twi_transmit(MM, 0x01,m_data1);								// Daten für Servo senden
 224:	80 91 04 01 	lds	r24, 0x0104
 228:	90 91 05 01 	lds	r25, 0x0105
		twi_transmit(MM, 0x02,m_data2);								// Daten für Motor senden
 22c:	80 91 02 01 	lds	r24, 0x0102
 230:	90 91 03 01 	lds	r25, 0x0103

	}
	
	PORTF = PORTF & 0xFE;											// Interrupt LED ausschalten
 234:	e2 e6       	ldi	r30, 0x62	; 98
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	8e 7f       	andi	r24, 0xFE	; 254
 23c:	80 83       	st	Z, r24
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_Z13transmit_modeci>:
// Name:	 Eric Suter, Severin Landolt
// Datum:	 8.11.2015
// Version:	 1.1
//////////////////////////////////////////

void transmit_mode(char mode, int data){
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	18 2f       	mov	r17, r24
 26c:	eb 01       	movw	r28, r22

	SPI_tranceive(0b10100000);										// FIFO Beschreiben
 26e:	80 ea       	ldi	r24, 0xA0	; 160
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	29 df       	rcall	.-430    	; 0xc6 <_Z13SPI_tranceivei>

	SPI_tranceive(mode);											// Daten zum Senden geben
 274:	81 2f       	mov	r24, r17
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	26 df       	rcall	.-436    	; 0xc6 <_Z13SPI_tranceivei>
	SPI_tranceive(data | 0x00FF);
 27a:	ce 01       	movw	r24, r28
 27c:	8f 6f       	ori	r24, 0xFF	; 255
 27e:	23 df       	rcall	.-442    	; 0xc6 <_Z13SPI_tranceivei>
	SPI_tranceive((data | 0xFF00) >> 8);
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	20 df       	rcall	.-448    	; 0xc6 <_Z13SPI_tranceivei>

		SPI_tranceive(0xFF);

	}

	SPI_tranceive(w_register(0b00000000));
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	1d df       	rcall	.-454    	; 0xc6 <_Z13SPI_tranceivei>
	SPI_tranceive(0b0110010);										// Letztes Bit bestimmt RX 1 / 0 TX Mode
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	1a df       	rcall	.-460    	; 0xc6 <_Z13SPI_tranceivei>
	PORTE = PORTE | 0x40;											// CE high schalten
 292:	1e 9a       	sbi	0x03, 6	; 3

}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	08 95       	ret

0000029c <main>:
	PORTF = PORTF & 0xFE;											// Interrupt LED ausschalten
}

int main (void){

	DDRF = 0xFF;													// INIT	von Ports
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0x02;
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	90 93 62 00 	sts	0x0062, r25
	DDRE = 0x7F;
 2a8:	9f e7       	ldi	r25, 0x7F	; 127
 2aa:	92 b9       	out	0x02, r25	; 2
	PORTE = PORTE | 0x80;
 2ac:	1f 9a       	sbi	0x03, 7	; 3
	DDRC = 0xFF;
 2ae:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 2b0:	15 ba       	out	0x15, r1	; 21
	
	EIMSK = 1<<INT7;												// Interrupt auf INT7 aktivieren
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	89 bf       	out	0x39, r24	; 57
	EICRB = 1<<ISC71 | 1<<ISC70;									// Auslösen auf der Positiven Flanke
 2b6:	80 ec       	ldi	r24, 0xC0	; 192
 2b8:	8a bf       	out	0x3a, r24	; 58
	sei();															// Interrupts global aktivieren
 2ba:	78 94       	sei
	
	spi_init();
 2bc:	f8 de       	rcall	.-528    	; 0xae <_Z8spi_initv>
	radio_init();													// Funkmodul und TWI initialisieren
 2be:	11 df       	rcall	.-478    	; 0xe2 <_Z10radio_initv>
	twi_init();
	
	while(1){
		
		if(transmit == 1){											// Wenn daten von fernbedienung verlangt werden
 2c0:	80 91 00 01 	lds	r24, 0x0100
 2c4:	90 91 01 01 	lds	r25, 0x0101
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	d1 f7       	brne	.-12     	; 0x2c0 <main+0x24>
			
			int ldata = twi_receive(EM, 0x00);						// Akkustand lesen
			transmit_mode(0xFF, ldata);								// Akkustand übertragen
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	c8 df       	rcall	.-112    	; 0x264 <_Z13transmit_modeci>
			transmit_mode(0x0F, PORTC);								// Beleuchtungsstand übertragen
 2d4:	65 b3       	in	r22, 0x15	; 21
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	8f e0       	ldi	r24, 0x0F	; 15
 2da:	c4 df       	rcall	.-120    	; 0x264 <_Z13transmit_modeci>
			
			transmit = 0;											// in den Empfangsmodus wechseln
 2dc:	10 92 01 01 	sts	0x0101, r1
 2e0:	10 92 00 01 	sts	0x0100, r1
			
			receive_mode();
 2e4:	f6 de       	rcall	.-532    	; 0xd2 <_Z12receive_modev>
 2e6:	ec cf       	rjmp	.-40     	; 0x2c0 <main+0x24>

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>

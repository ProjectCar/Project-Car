
Funkempfaenger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012dc  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051e  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a5d  00000000  00000000  00001ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b42  00000000  00000000  00003253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00003d95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	29 c1       	rjmp	.+594    	; 0x260 <__vector_3>
   e:	00 00       	nop
  10:	e8 c0       	rjmp	.+464    	; 0x1e2 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	48 d0       	rcall	.+144    	; 0x154 <main>
  c4:	de c1       	rjmp	.+956    	; 0x482 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
		}
		
	}
	else{ return 3; }
	
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	80 91 0a 01 	lds	r24, 0x010A
  dc:	90 91 0b 01 	lds	r25, 0x010B
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 0b 01 	sts	0x010B, r25
  e6:	80 93 0a 01 	sts	0x010A, r24
  ea:	80 91 0a 01 	lds	r24, 0x010A
  ee:	90 91 0b 01 	lds	r25, 0x010B
  f2:	8c 32       	cpi	r24, 0x2C	; 44
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	31 f4       	brne	.+12     	; 0x104 <__vector_16+0x3c>
  f8:	c4 98       	cbi	0x18, 4	; 24
  fa:	c5 98       	cbi	0x18, 5	; 24
  fc:	10 92 0b 01 	sts	0x010B, r1
 100:	10 92 0a 01 	sts	0x010A, r1
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <twi_transmit>:
 114:	94 e6       	ldi	r25, 0x64	; 100
 116:	90 93 74 00 	sts	0x0074, r25
 11a:	e4 e7       	ldi	r30, 0x74	; 116
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	99 23       	and	r25, r25
 122:	ec f7       	brge	.-6      	; 0x11e <twi_transmit+0xa>
 124:	80 93 73 00 	sts	0x0073, r24
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	80 93 74 00 	sts	0x0074, r24
 12e:	e4 e7       	ldi	r30, 0x74	; 116
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 23       	and	r24, r24
 136:	ec f7       	brge	.-6      	; 0x132 <twi_transmit+0x1e>
 138:	60 93 73 00 	sts	0x0073, r22
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	80 93 74 00 	sts	0x0074, r24
 142:	e4 e7       	ldi	r30, 0x74	; 116
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <twi_transmit+0x32>
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	80 93 74 00 	sts	0x0074, r24
 152:	08 95       	ret

00000154 <main>:
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	80 93 61 00 	sts	0x0061, r24
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	90 93 62 00 	sts	0x0062, r25
 160:	84 bb       	out	0x14, r24	; 20
 162:	15 ba       	out	0x15, r1	; 21
 164:	1a ba       	out	0x1a, r1	; 26
 166:	1b ba       	out	0x1b, r1	; 27
 168:	87 bb       	out	0x17, r24	; 23
 16a:	18 ba       	out	0x18, r1	; 24
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	85 60       	ori	r24, 0x05	; 5
 170:	83 bf       	out	0x33, r24	; 51
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	89 bf       	out	0x39, r24	; 57
 176:	80 ea       	ldi	r24, 0xA0	; 160
 178:	80 93 6a 00 	sts	0x006A, r24
 17c:	87 b7       	in	r24, 0x37	; 55
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	87 bf       	out	0x37, r24	; 55
 182:	78 94       	sei
 184:	94 d0       	rcall	.+296    	; 0x2ae <nrf24_init>
 186:	66 e0       	ldi	r22, 0x06	; 6
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	fb d0       	rcall	.+502    	; 0x382 <nrf24_config>
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	49 d1       	rcall	.+658    	; 0x424 <nrf24_tx_address>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	38 d1       	rcall	.+624    	; 0x408 <nrf24_rx_address>
 198:	e0 e7       	ldi	r30, 0x70	; 112
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	80 83       	st	Z, r24
 1a2:	cf e0       	ldi	r28, 0x0F	; 15
 1a4:	d1 e0       	ldi	r29, 0x01	; 1
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	68 81       	ld	r22, Y
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	b2 df       	rcall	.-156    	; 0x114 <twi_transmit>
 1b0:	fa cf       	rjmp	.-12     	; 0x1a6 <main+0x52>

000001b2 <backwardsecure>:
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 1b2:	c8 99       	sbic	0x19, 0	; 25
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <backwardsecure+0x12>
	
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
 1b6:	e2 e6       	ldi	r30, 0x62	; 98
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	80 83       	st	Z, r24
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 1c0:	c8 9b       	sbis	0x19, 0	; 25
 1c2:	fb cf       	rjmp	.-10     	; 0x1ba <backwardsecure+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	89 e6       	ldi	r24, 0x69	; 105
 1c8:	98 e1       	ldi	r25, 0x18	; 24
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <backwardsecure+0x18>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <backwardsecure+0x22>
 1d4:	00 00       	nop
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
	
	}
	_delay_ms(500);
	PORTF &= ~(0x08);
 1d6:	e2 e6       	ldi	r30, 0x62	; 98
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <__vector_4>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT3_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	0b b6       	in	r0, 0x3b	; 59
 1ee:	0f 92       	push	r0
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	
	backwardsecure();
 208:	d4 df       	rcall	.-88     	; 0x1b2 <backwardsecure>
	
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <forwardsecure>:
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 230:	c9 99       	sbic	0x19, 1	; 25
 232:	07 c0       	rjmp	.+14     	; 0x242 <forwardsecure+0x12>
			
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
 234:	e2 e6       	ldi	r30, 0x62	; 98
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	84 60       	ori	r24, 0x04	; 4
 23c:	80 83       	st	Z, r24
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 23e:	c9 9b       	sbis	0x19, 1	; 25
 240:	fb cf       	rjmp	.-10     	; 0x238 <forwardsecure+0x8>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	89 e6       	ldi	r24, 0x69	; 105
 246:	98 e1       	ldi	r25, 0x18	; 24
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <forwardsecure+0x18>
 250:	00 c0       	rjmp	.+0      	; 0x252 <forwardsecure+0x22>
 252:	00 00       	nop
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
			
		}
		_delay_ms(500);
		PORTF &= ~(0x04);
 254:	e2 e6       	ldi	r30, 0x62	; 98
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <__vector_3>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT2_vect){
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
	
	forwardsecure();
 286:	d4 df       	rcall	.-88     	; 0x230 <forwardsecure>
	
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0b be       	out	0x3b, r0	; 59
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 2ae:	c8 d0       	rcall	.+400    	; 0x440 <nrf24_setupPins>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	cc d0       	rcall	.+408    	; 0x44c <nrf24_ce_digitalWrite>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	d0 c0       	rjmp	.+416    	; 0x458 <nrf24_csn_digitalWrite>
 2b8:	08 95       	ret

000002ba <spi_transfer>:
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	08 2f       	mov	r16, r24
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	cd d0       	rcall	.+410    	; 0x464 <nrf24_sck_digitalWrite>
 2ca:	c7 e0       	ldi	r28, 0x07	; 7
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	f1 2c       	mov	r15, r1
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	98 01       	movw	r18, r16
 2d4:	0c 2e       	mov	r0, r28
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <spi_transfer+0x22>
 2d8:	35 95       	asr	r19
 2da:	27 95       	ror	r18
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <spi_transfer+0x1e>
 2e0:	20 ff       	sbrs	r18, 0
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <spi_transfer+0x30>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	c4 d0       	rcall	.+392    	; 0x470 <nrf24_mosi_digitalWrite>
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <spi_transfer+0x34>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	c1 d0       	rcall	.+386    	; 0x470 <nrf24_mosi_digitalWrite>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	b9 d0       	rcall	.+370    	; 0x464 <nrf24_sck_digitalWrite>
 2f2:	ff 0c       	add	r15, r15
 2f4:	c3 d0       	rcall	.+390    	; 0x47c <nrf24_miso_digitalRead>
 2f6:	88 23       	and	r24, r24
 2f8:	19 f0       	breq	.+6      	; 0x300 <spi_transfer+0x46>
 2fa:	8f 2d       	mov	r24, r15
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	f8 2e       	mov	r15, r24
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	b0 d0       	rcall	.+352    	; 0x464 <nrf24_sck_digitalWrite>
 304:	21 97       	sbiw	r28, 0x01	; 1
 306:	28 f7       	brcc	.-54     	; 0x2d2 <spi_transfer+0x18>
 308:	8f 2d       	mov	r24, r15
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	08 95       	ret

00000316 <nrf24_transmitSync>:
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	06 2f       	mov	r16, r22
 320:	66 23       	and	r22, r22
 322:	41 f0       	breq	.+16     	; 0x334 <nrf24_transmitSync+0x1e>
 324:	c8 2f       	mov	r28, r24
 326:	d9 2f       	mov	r29, r25
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	89 91       	ld	r24, Y+
 32c:	c6 df       	rcall	.-116    	; 0x2ba <spi_transfer>
 32e:	1f 5f       	subi	r17, 0xFF	; 255
 330:	10 13       	cpse	r17, r16
 332:	fb cf       	rjmp	.-10     	; 0x32a <nrf24_transmitSync+0x14>
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <nrf24_configRegister>:
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	d8 2f       	mov	r29, r24
 344:	c6 2f       	mov	r28, r22
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	87 d0       	rcall	.+270    	; 0x458 <nrf24_csn_digitalWrite>
 34a:	8d 2f       	mov	r24, r29
 34c:	8f 71       	andi	r24, 0x1F	; 31
 34e:	80 62       	ori	r24, 0x20	; 32
 350:	b4 df       	rcall	.-152    	; 0x2ba <spi_transfer>
 352:	8c 2f       	mov	r24, r28
 354:	b2 df       	rcall	.-156    	; 0x2ba <spi_transfer>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	7f d0       	rcall	.+254    	; 0x458 <nrf24_csn_digitalWrite>
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <nrf24_powerUpRx>:
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	7a d0       	rcall	.+244    	; 0x458 <nrf24_csn_digitalWrite>
 364:	82 ee       	ldi	r24, 0xE2	; 226
 366:	a9 df       	rcall	.-174    	; 0x2ba <spi_transfer>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	76 d0       	rcall	.+236    	; 0x458 <nrf24_csn_digitalWrite>
 36c:	60 e7       	ldi	r22, 0x70	; 112
 36e:	87 e0       	ldi	r24, 0x07	; 7
 370:	e6 df       	rcall	.-52     	; 0x33e <nrf24_configRegister>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	6b d0       	rcall	.+214    	; 0x44c <nrf24_ce_digitalWrite>
 376:	6b e0       	ldi	r22, 0x0B	; 11
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	e1 df       	rcall	.-62     	; 0x33e <nrf24_configRegister>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	66 c0       	rjmp	.+204    	; 0x44c <nrf24_ce_digitalWrite>
 380:	08 95       	ret

00000382 <nrf24_config>:
 382:	60 93 13 01 	sts	0x0113, r22
 386:	68 2f       	mov	r22, r24
 388:	85 e0       	ldi	r24, 0x05	; 5
 38a:	d9 df       	rcall	.-78     	; 0x33e <nrf24_configRegister>
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	81 e1       	ldi	r24, 0x11	; 17
 390:	d6 df       	rcall	.-84     	; 0x33e <nrf24_configRegister>
 392:	60 91 13 01 	lds	r22, 0x0113
 396:	82 e1       	ldi	r24, 0x12	; 18
 398:	d2 df       	rcall	.-92     	; 0x33e <nrf24_configRegister>
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	83 e1       	ldi	r24, 0x13	; 19
 39e:	cf df       	rcall	.-98     	; 0x33e <nrf24_configRegister>
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	84 e1       	ldi	r24, 0x14	; 20
 3a4:	cc df       	rcall	.-104    	; 0x33e <nrf24_configRegister>
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	85 e1       	ldi	r24, 0x15	; 21
 3aa:	c9 df       	rcall	.-110    	; 0x33e <nrf24_configRegister>
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	86 e1       	ldi	r24, 0x16	; 22
 3b0:	c6 df       	rcall	.-116    	; 0x33e <nrf24_configRegister>
 3b2:	66 e0       	ldi	r22, 0x06	; 6
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	c3 df       	rcall	.-122    	; 0x33e <nrf24_configRegister>
 3b8:	68 e0       	ldi	r22, 0x08	; 8
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	c0 df       	rcall	.-128    	; 0x33e <nrf24_configRegister>
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	bd df       	rcall	.-134    	; 0x33e <nrf24_configRegister>
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	ba df       	rcall	.-140    	; 0x33e <nrf24_configRegister>
 3ca:	6f e4       	ldi	r22, 0x4F	; 79
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	b7 df       	rcall	.-146    	; 0x33e <nrf24_configRegister>
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	8c e1       	ldi	r24, 0x1C	; 28
 3d4:	b4 df       	rcall	.-152    	; 0x33e <nrf24_configRegister>
 3d6:	c4 cf       	rjmp	.-120    	; 0x360 <nrf24_powerUpRx>
 3d8:	08 95       	ret

000003da <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	08 2f       	mov	r16, r24
 3e4:	eb 01       	movw	r28, r22
 3e6:	14 2f       	mov	r17, r20
    nrf24_csn_digitalWrite(LOW);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	36 d0       	rcall	.+108    	; 0x458 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 3ec:	80 2f       	mov	r24, r16
 3ee:	8f 71       	andi	r24, 0x1F	; 31
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	63 df       	rcall	.-314    	; 0x2ba <spi_transfer>
    nrf24_transmitSync(value,len);
 3f4:	61 2f       	mov	r22, r17
 3f6:	ce 01       	movw	r24, r28
 3f8:	8e df       	rcall	.-228    	; 0x316 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	2d d0       	rcall	.+90     	; 0x458 <nrf24_csn_digitalWrite>
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	1d d0       	rcall	.+58     	; 0x44c <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 412:	45 e0       	ldi	r20, 0x05	; 5
 414:	be 01       	movw	r22, r28
 416:	8b e0       	ldi	r24, 0x0B	; 11
 418:	e0 df       	rcall	.-64     	; 0x3da <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	17 d0       	rcall	.+46     	; 0x44c <nrf24_ce_digitalWrite>
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 42a:	45 e0       	ldi	r20, 0x05	; 5
 42c:	bc 01       	movw	r22, r24
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	d4 df       	rcall	.-88     	; 0x3da <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 432:	45 e0       	ldi	r20, 0x05	; 5
 434:	be 01       	movw	r22, r28
 436:	80 e1       	ldi	r24, 0x10	; 16
 438:	d0 df       	rcall	.-96     	; 0x3da <nrf24_writeRegister>
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRE,6); // CE output
 440:	16 9a       	sbi	0x02, 6	; 2
    set_bit(DDRB,0); // CSN output
 442:	b8 9a       	sbi	0x17, 0	; 23
    set_bit(DDRB,1); // SCK output
 444:	b9 9a       	sbi	0x17, 1	; 23
    set_bit(DDRB,2); // MOSI output
 446:	ba 9a       	sbi	0x17, 2	; 23
    clr_bit(DDRB,3); // MISO input
 448:	bb 98       	cbi	0x17, 3	; 23
 44a:	08 95       	ret

0000044c <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 44c:	88 23       	and	r24, r24
 44e:	11 f0       	breq	.+4      	; 0x454 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTE,6);
 450:	1e 9a       	sbi	0x03, 6	; 3
 452:	08 95       	ret
    }
    else
    {
        clr_bit(PORTE,6);
 454:	1e 98       	cbi	0x03, 6	; 3
 456:	08 95       	ret

00000458 <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 458:	88 23       	and	r24, r24
 45a:	11 f0       	breq	.+4      	; 0x460 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,0);
 45c:	c0 9a       	sbi	0x18, 0	; 24
 45e:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,0);
 460:	c0 98       	cbi	0x18, 0	; 24
 462:	08 95       	ret

00000464 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 464:	88 23       	and	r24, r24
 466:	11 f0       	breq	.+4      	; 0x46c <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
 468:	c1 9a       	sbi	0x18, 1	; 24
 46a:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
 46c:	c1 98       	cbi	0x18, 1	; 24
 46e:	08 95       	ret

00000470 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 470:	88 23       	and	r24, r24
 472:	11 f0       	breq	.+4      	; 0x478 <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
 474:	c2 9a       	sbi	0x18, 2	; 24
 476:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
 478:	c2 98       	cbi	0x18, 2	; 24
 47a:	08 95       	ret

0000047c <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,3);
 47c:	86 b3       	in	r24, 0x16	; 22
}
 47e:	88 70       	andi	r24, 0x08	; 8
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>

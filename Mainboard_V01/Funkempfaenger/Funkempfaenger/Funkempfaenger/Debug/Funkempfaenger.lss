
Funkempfaenger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000cd0  00000d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000d6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b31  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b9  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cae  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  00002b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8e  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	a7 c0       	rjmp	.+334    	; 0x15c <__vector_3>
   e:	00 00       	nop
  10:	d6 c0       	rjmp	.+428    	; 0x1be <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ae d0       	rcall	.+348    	; 0x220 <main>
  c4:	03 c6       	rjmp	.+3078   	; 0xccc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
		}
		
	}
	else{ return 3; }
	
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	00 90 5f 00 	lds	r0, 0x005F
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	00 90 5b 00 	lds	r0, 0x005B
  d8:	0f 92       	push	r0
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	80 91 0a 01 	lds	r24, 0x010A
  f2:	90 91 0b 01 	lds	r25, 0x010B
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 0b 01 	sts	0x010B, r25
  fc:	80 93 0a 01 	sts	0x010A, r24
 100:	80 91 0a 01 	lds	r24, 0x010A
 104:	90 91 0b 01 	lds	r25, 0x010B
 108:	8c 32       	cpi	r24, 0x2C	; 44
 10a:	91 40       	sbci	r25, 0x01	; 1
 10c:	b1 f4       	brne	.+44     	; 0x13a <__vector_16+0x72>
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	28 e3       	ldi	r18, 0x38	; 56
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	2f 7e       	andi	r18, 0xEF	; 239
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
 120:	88 e3       	ldi	r24, 0x38	; 56
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	28 e3       	ldi	r18, 0x38	; 56
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	2f 7d       	andi	r18, 0xDF	; 223
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
 132:	10 92 0b 01 	sts	0x010B, r1
 136:	10 92 0a 01 	sts	0x010A, r1
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	00 92 5b 00 	sts	0x005B, r0
 150:	0f 90       	pop	r0
 152:	00 92 5f 00 	sts	0x005F, r0
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_3>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	00 90 5f 00 	lds	r0, 0x005F
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	00 90 5b 00 	lds	r0, 0x005B
 16c:	0f 92       	push	r0
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	15 d2       	rcall	.+1066   	; 0x5ba <forwardsecure>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	00 92 5b 00 	sts	0x005B, r0
 1b2:	0f 90       	pop	r0
 1b4:	00 92 5f 00 	sts	0x005F, r0
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_4>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	00 90 5f 00 	lds	r0, 0x005F
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	00 90 5b 00 	lds	r0, 0x005B
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	48 d1       	rcall	.+656    	; 0x482 <backwardsecure>
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	00 92 5b 00 	sts	0x005B, r0
 214:	0f 90       	pop	r0
 216:	00 92 5f 00 	sts	0x005F, r0
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <main>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	2e 97       	sbiw	r28, 0x0e	; 14
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	81 e6       	ldi	r24, 0x61	; 97
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
 23e:	82 e6       	ldi	r24, 0x62	; 98
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
 248:	84 e3       	ldi	r24, 0x34	; 52
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
 252:	85 e3       	ldi	r24, 0x35	; 53
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	10 82       	st	Z, r1
 25a:	8a e3       	ldi	r24, 0x3A	; 58
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	10 82       	st	Z, r1
 262:	8b e3       	ldi	r24, 0x3B	; 59
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	10 82       	st	Z, r1
 26a:	87 e3       	ldi	r24, 0x37	; 55
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
 274:	88 e3       	ldi	r24, 0x38	; 56
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	10 82       	st	Z, r1
 27c:	83 e5       	ldi	r24, 0x53	; 83
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	23 e5       	ldi	r18, 0x53	; 83
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	25 60       	ori	r18, 0x05	; 5
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	89 e5       	ldi	r24, 0x59	; 89
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	2c e0       	ldi	r18, 0x0C	; 12
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
 298:	8a e6       	ldi	r24, 0x6A	; 106
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	20 ea       	ldi	r18, 0xA0	; 160
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
 2a2:	87 e5       	ldi	r24, 0x57	; 87
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	27 e5       	ldi	r18, 0x57	; 87
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	20 81       	ld	r18, Z
 2ae:	21 60       	ori	r18, 0x01	; 1
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
 2b4:	78 94       	sei
 2b6:	1d d2       	rcall	.+1082   	; 0x6f2 <nrf24_init>
 2b8:	66 e0       	ldi	r22, 0x06	; 6
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	26 d2       	rcall	.+1100   	; 0x70a <nrf24_config>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	72 d2       	rcall	.+1252   	; 0x7a8 <nrf24_tx_address>
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	59 d2       	rcall	.+1202   	; 0x77c <nrf24_rx_address>
 2ca:	80 e7       	ldi	r24, 0x70	; 112
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	20 e7       	ldi	r18, 0x70	; 112
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	24 66       	ori	r18, 0x64	; 100
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
 2dc:	80 91 0f 01 	lds	r24, 0x010F
 2e0:	40 ef       	ldi	r20, 0xF0	; 240
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	68 2f       	mov	r22, r24
 2e6:	8b e0       	ldi	r24, 0x0B	; 11
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	6d d0       	rcall	.+218    	; 0x3c6 <twi_transmit>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	aa ef       	ldi	r26, 0xFA	; 250
 2f2:	b3 e4       	ldi	r27, 0x43	; 67
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	ab 83       	std	Y+3, r26	; 0x03
 2fa:	bc 83       	std	Y+4, r27	; 0x04
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	4a e7       	ldi	r20, 0x7A	; 122
 302:	55 e4       	ldi	r21, 0x45	; 69
 304:	69 81       	ldd	r22, Y+1	; 0x01
 306:	7a 81       	ldd	r23, Y+2	; 0x02
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	9c 81       	ldd	r25, Y+4	; 0x04
 30c:	54 d4       	rcall	.+2216   	; 0xbb6 <__mulsf3>
 30e:	dc 01       	movw	r26, r24
 310:	cb 01       	movw	r24, r22
 312:	8d 83       	std	Y+5, r24	; 0x05
 314:	9e 83       	std	Y+6, r25	; 0x06
 316:	af 83       	std	Y+7, r26	; 0x07
 318:	b8 87       	std	Y+8, r27	; 0x08
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e8       	ldi	r20, 0x80	; 128
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	6d 81       	ldd	r22, Y+5	; 0x05
 324:	7e 81       	ldd	r23, Y+6	; 0x06
 326:	8f 81       	ldd	r24, Y+7	; 0x07
 328:	98 85       	ldd	r25, Y+8	; 0x08
 32a:	c4 d3       	rcall	.+1928   	; 0xab4 <__cmpsf2>
 32c:	88 23       	and	r24, r24
 32e:	2c f4       	brge	.+10     	; 0x33a <main+0x11a>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	9a 87       	std	Y+10, r25	; 0x0a
 336:	89 87       	std	Y+9, r24	; 0x09
 338:	3b c0       	rjmp	.+118    	; 0x3b0 <main+0x190>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	3f ef       	ldi	r19, 0xFF	; 255
 33e:	4f e7       	ldi	r20, 0x7F	; 127
 340:	57 e4       	ldi	r21, 0x47	; 71
 342:	6d 81       	ldd	r22, Y+5	; 0x05
 344:	7e 81       	ldd	r23, Y+6	; 0x06
 346:	8f 81       	ldd	r24, Y+7	; 0x07
 348:	98 85       	ldd	r25, Y+8	; 0x08
 34a:	31 d4       	rcall	.+2146   	; 0xbae <__gesf2>
 34c:	18 16       	cp	r1, r24
 34e:	3c f5       	brge	.+78     	; 0x39e <main+0x17e>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e2       	ldi	r20, 0x20	; 32
 356:	51 e4       	ldi	r21, 0x41	; 65
 358:	69 81       	ldd	r22, Y+1	; 0x01
 35a:	7a 81       	ldd	r23, Y+2	; 0x02
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	9c 81       	ldd	r25, Y+4	; 0x04
 360:	2a d4       	rcall	.+2132   	; 0xbb6 <__mulsf3>
 362:	dc 01       	movw	r26, r24
 364:	cb 01       	movw	r24, r22
 366:	bc 01       	movw	r22, r24
 368:	cd 01       	movw	r24, r26
 36a:	a8 d3       	rcall	.+1872   	; 0xabc <__fixunssfsi>
 36c:	dc 01       	movw	r26, r24
 36e:	cb 01       	movw	r24, r22
 370:	9a 87       	std	Y+10, r25	; 0x0a
 372:	89 87       	std	Y+9, r24	; 0x09
 374:	0f c0       	rjmp	.+30     	; 0x394 <main+0x174>
 376:	80 e9       	ldi	r24, 0x90	; 144
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	9c 87       	std	Y+12, r25	; 0x0c
 37c:	8b 87       	std	Y+11, r24	; 0x0b
 37e:	8b 85       	ldd	r24, Y+11	; 0x0b
 380:	9c 85       	ldd	r25, Y+12	; 0x0c
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x162>
 386:	9c 87       	std	Y+12, r25	; 0x0c
 388:	8b 87       	std	Y+11, r24	; 0x0b
 38a:	89 85       	ldd	r24, Y+9	; 0x09
 38c:	9a 85       	ldd	r25, Y+10	; 0x0a
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	9a 87       	std	Y+10, r25	; 0x0a
 392:	89 87       	std	Y+9, r24	; 0x09
 394:	89 85       	ldd	r24, Y+9	; 0x09
 396:	9a 85       	ldd	r25, Y+10	; 0x0a
 398:	89 2b       	or	r24, r25
 39a:	69 f7       	brne	.-38     	; 0x376 <main+0x156>
 39c:	13 c0       	rjmp	.+38     	; 0x3c4 <main+0x1a4>
 39e:	6d 81       	ldd	r22, Y+5	; 0x05
 3a0:	7e 81       	ldd	r23, Y+6	; 0x06
 3a2:	8f 81       	ldd	r24, Y+7	; 0x07
 3a4:	98 85       	ldd	r25, Y+8	; 0x08
 3a6:	8a d3       	rcall	.+1812   	; 0xabc <__fixunssfsi>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	9a 87       	std	Y+10, r25	; 0x0a
 3ae:	89 87       	std	Y+9, r24	; 0x09
 3b0:	89 85       	ldd	r24, Y+9	; 0x09
 3b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3b4:	9e 87       	std	Y+14, r25	; 0x0e
 3b6:	8d 87       	std	Y+13, r24	; 0x0d
 3b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 3ba:	9e 85       	ldd	r25, Y+14	; 0x0e
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x19c>
 3c0:	9e 87       	std	Y+14, r25	; 0x0e
 3c2:	8d 87       	std	Y+13, r24	; 0x0d
 3c4:	8b cf       	rjmp	.-234    	; 0x2dc <main+0xbc>

000003c6 <twi_transmit>:
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <twi_transmit+0x6>
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <twi_transmit+0x8>
 3ce:	1f 92       	push	r1
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	9a 83       	std	Y+2, r25	; 0x02
 3d6:	89 83       	std	Y+1, r24	; 0x01
 3d8:	6b 83       	std	Y+3, r22	; 0x03
 3da:	5d 83       	std	Y+5, r21	; 0x05
 3dc:	4c 83       	std	Y+4, r20	; 0x04
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	9a 81       	ldd	r25, Y+2	; 0x02
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	9a 83       	std	Y+2, r25	; 0x02
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	84 e7       	ldi	r24, 0x74	; 116
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	24 e6       	ldi	r18, 0x64	; 100
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
 3f4:	00 00       	nop
 3f6:	84 e7       	ldi	r24, 0x74	; 116
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	88 23       	and	r24, r24
 400:	d4 f7       	brge	.-12     	; 0x3f6 <twi_transmit+0x30>
 402:	83 e7       	ldi	r24, 0x73	; 115
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
 40c:	84 e7       	ldi	r24, 0x74	; 116
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	24 e8       	ldi	r18, 0x84	; 132
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
 416:	00 00       	nop
 418:	84 e7       	ldi	r24, 0x74	; 116
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	fc 01       	movw	r30, r24
 41e:	80 81       	ld	r24, Z
 420:	88 23       	and	r24, r24
 422:	d4 f7       	brge	.-12     	; 0x418 <twi_transmit+0x52>
 424:	83 e7       	ldi	r24, 0x73	; 115
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	2c 81       	ldd	r18, Y+4	; 0x04
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
 42e:	84 e7       	ldi	r24, 0x74	; 116
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	24 e8       	ldi	r18, 0x84	; 132
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
 438:	00 00       	nop
 43a:	84 e7       	ldi	r24, 0x74	; 116
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	fc 01       	movw	r30, r24
 440:	80 81       	ld	r24, Z
 442:	88 23       	and	r24, r24
 444:	d4 f7       	brge	.-12     	; 0x43a <twi_transmit+0x74>
 446:	83 e7       	ldi	r24, 0x73	; 115
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	2b eb       	ldi	r18, 0xBB	; 187
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
 450:	84 e7       	ldi	r24, 0x74	; 116
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	24 e8       	ldi	r18, 0x84	; 132
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
 45a:	00 00       	nop
 45c:	84 e7       	ldi	r24, 0x74	; 116
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	80 81       	ld	r24, Z
 464:	88 23       	and	r24, r24
 466:	d4 f7       	brge	.-12     	; 0x45c <twi_transmit+0x96>
 468:	84 e7       	ldi	r24, 0x74	; 116
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	24 e9       	ldi	r18, 0x94	; 148
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <backwardsecure>:
// Name:	 Eric Suter
// Datum:	 8.11.2015
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	2e 97       	sbiw	r28, 0x0e	; 14
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61

	while ((PINA & 0x01) == 0){
 496:	09 c0       	rjmp	.+18     	; 0x4aa <backwardsecure+0x28>
	
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
 498:	82 e6       	ldi	r24, 0x62	; 98
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	22 e6       	ldi	r18, 0x62	; 98
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	28 60       	ori	r18, 0x08	; 8
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 4aa:	89 e3       	ldi	r24, 0x39	; 57
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	88 2f       	mov	r24, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	81 70       	andi	r24, 0x01	; 1
 4b8:	99 27       	eor	r25, r25
 4ba:	89 2b       	or	r24, r25
 4bc:	69 f3       	breq	.-38     	; 0x498 <backwardsecure+0x16>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	aa ef       	ldi	r26, 0xFA	; 250
 4c4:	b3 e4       	ldi	r27, 0x43	; 67
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	9a 83       	std	Y+2, r25	; 0x02
 4ca:	ab 83       	std	Y+3, r26	; 0x03
 4cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	4a e7       	ldi	r20, 0x7A	; 122
 4d4:	55 e4       	ldi	r21, 0x45	; 69
 4d6:	69 81       	ldd	r22, Y+1	; 0x01
 4d8:	7a 81       	ldd	r23, Y+2	; 0x02
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	9c 81       	ldd	r25, Y+4	; 0x04
 4de:	6b d3       	rcall	.+1750   	; 0xbb6 <__mulsf3>
 4e0:	dc 01       	movw	r26, r24
 4e2:	cb 01       	movw	r24, r22
 4e4:	8d 83       	std	Y+5, r24	; 0x05
 4e6:	9e 83       	std	Y+6, r25	; 0x06
 4e8:	af 83       	std	Y+7, r26	; 0x07
 4ea:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e8       	ldi	r20, 0x80	; 128
 4f2:	5f e3       	ldi	r21, 0x3F	; 63
 4f4:	6d 81       	ldd	r22, Y+5	; 0x05
 4f6:	7e 81       	ldd	r23, Y+6	; 0x06
 4f8:	8f 81       	ldd	r24, Y+7	; 0x07
 4fa:	98 85       	ldd	r25, Y+8	; 0x08
 4fc:	db d2       	rcall	.+1462   	; 0xab4 <__cmpsf2>
 4fe:	88 23       	and	r24, r24
 500:	2c f4       	brge	.+10     	; 0x50c <backwardsecure+0x8a>
		__ticks = 1;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	9a 87       	std	Y+10, r25	; 0x0a
 508:	89 87       	std	Y+9, r24	; 0x09
 50a:	3b c0       	rjmp	.+118    	; 0x582 <backwardsecure+0x100>
	else if (__tmp > 65535)
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	3f ef       	ldi	r19, 0xFF	; 255
 510:	4f e7       	ldi	r20, 0x7F	; 127
 512:	57 e4       	ldi	r21, 0x47	; 71
 514:	6d 81       	ldd	r22, Y+5	; 0x05
 516:	7e 81       	ldd	r23, Y+6	; 0x06
 518:	8f 81       	ldd	r24, Y+7	; 0x07
 51a:	98 85       	ldd	r25, Y+8	; 0x08
 51c:	48 d3       	rcall	.+1680   	; 0xbae <__gesf2>
 51e:	18 16       	cp	r1, r24
 520:	3c f5       	brge	.+78     	; 0x570 <backwardsecure+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e2       	ldi	r20, 0x20	; 32
 528:	51 e4       	ldi	r21, 0x41	; 65
 52a:	69 81       	ldd	r22, Y+1	; 0x01
 52c:	7a 81       	ldd	r23, Y+2	; 0x02
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	9c 81       	ldd	r25, Y+4	; 0x04
 532:	41 d3       	rcall	.+1666   	; 0xbb6 <__mulsf3>
 534:	dc 01       	movw	r26, r24
 536:	cb 01       	movw	r24, r22
 538:	bc 01       	movw	r22, r24
 53a:	cd 01       	movw	r24, r26
 53c:	bf d2       	rcall	.+1406   	; 0xabc <__fixunssfsi>
 53e:	dc 01       	movw	r26, r24
 540:	cb 01       	movw	r24, r22
 542:	9a 87       	std	Y+10, r25	; 0x0a
 544:	89 87       	std	Y+9, r24	; 0x09
 546:	0f c0       	rjmp	.+30     	; 0x566 <backwardsecure+0xe4>
 548:	80 e9       	ldi	r24, 0x90	; 144
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	9c 87       	std	Y+12, r25	; 0x0c
 54e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 550:	8b 85       	ldd	r24, Y+11	; 0x0b
 552:	9c 85       	ldd	r25, Y+12	; 0x0c
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <backwardsecure+0xd2>
 558:	9c 87       	std	Y+12, r25	; 0x0c
 55a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 55c:	89 85       	ldd	r24, Y+9	; 0x09
 55e:	9a 85       	ldd	r25, Y+10	; 0x0a
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	9a 87       	std	Y+10, r25	; 0x0a
 564:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 566:	89 85       	ldd	r24, Y+9	; 0x09
 568:	9a 85       	ldd	r25, Y+10	; 0x0a
 56a:	89 2b       	or	r24, r25
 56c:	69 f7       	brne	.-38     	; 0x548 <backwardsecure+0xc6>
 56e:	13 c0       	rjmp	.+38     	; 0x596 <backwardsecure+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 570:	6d 81       	ldd	r22, Y+5	; 0x05
 572:	7e 81       	ldd	r23, Y+6	; 0x06
 574:	8f 81       	ldd	r24, Y+7	; 0x07
 576:	98 85       	ldd	r25, Y+8	; 0x08
 578:	a1 d2       	rcall	.+1346   	; 0xabc <__fixunssfsi>
 57a:	dc 01       	movw	r26, r24
 57c:	cb 01       	movw	r24, r22
 57e:	9a 87       	std	Y+10, r25	; 0x0a
 580:	89 87       	std	Y+9, r24	; 0x09
 582:	89 85       	ldd	r24, Y+9	; 0x09
 584:	9a 85       	ldd	r25, Y+10	; 0x0a
 586:	9e 87       	std	Y+14, r25	; 0x0e
 588:	8d 87       	std	Y+13, r24	; 0x0d
 58a:	8d 85       	ldd	r24, Y+13	; 0x0d
 58c:	9e 85       	ldd	r25, Y+14	; 0x0e
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <backwardsecure+0x10c>
 592:	9e 87       	std	Y+14, r25	; 0x0e
 594:	8d 87       	std	Y+13, r24	; 0x0d
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
	
	}
	_delay_ms(500);
	PORTF &= ~(0x08);
 596:	82 e6       	ldi	r24, 0x62	; 98
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	22 e6       	ldi	r18, 0x62	; 98
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	f9 01       	movw	r30, r18
 5a0:	20 81       	ld	r18, Z
 5a2:	27 7f       	andi	r18, 0xF7	; 247
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
}
 5a8:	2e 96       	adiw	r28, 0x0e	; 14
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <forwardsecure>:
// Datum:	 8.11.2015
// Version:	 1.1
//////////////////////////////////////////


void forwardsecure(){
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2e 97       	sbiw	r28, 0x0e	; 14
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
	
		while ((PINA & 0x02) == 0){
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <forwardsecure+0x28>
			
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
 5d0:	82 e6       	ldi	r24, 0x62	; 98
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	22 e6       	ldi	r18, 0x62	; 98
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	f9 01       	movw	r30, r18
 5da:	20 81       	ld	r18, Z
 5dc:	24 60       	ori	r18, 0x04	; 4
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 5e2:	89 e3       	ldi	r24, 0x39	; 57
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	fc 01       	movw	r30, r24
 5e8:	80 81       	ld	r24, Z
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	82 70       	andi	r24, 0x02	; 2
 5f0:	99 27       	eor	r25, r25
 5f2:	89 2b       	or	r24, r25
 5f4:	69 f3       	breq	.-38     	; 0x5d0 <forwardsecure+0x16>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	aa ef       	ldi	r26, 0xFA	; 250
 5fc:	b3 e4       	ldi	r27, 0x43	; 67
 5fe:	89 83       	std	Y+1, r24	; 0x01
 600:	9a 83       	std	Y+2, r25	; 0x02
 602:	ab 83       	std	Y+3, r26	; 0x03
 604:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	4a e7       	ldi	r20, 0x7A	; 122
 60c:	55 e4       	ldi	r21, 0x45	; 69
 60e:	69 81       	ldd	r22, Y+1	; 0x01
 610:	7a 81       	ldd	r23, Y+2	; 0x02
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	9c 81       	ldd	r25, Y+4	; 0x04
 616:	cf d2       	rcall	.+1438   	; 0xbb6 <__mulsf3>
 618:	dc 01       	movw	r26, r24
 61a:	cb 01       	movw	r24, r22
 61c:	8d 83       	std	Y+5, r24	; 0x05
 61e:	9e 83       	std	Y+6, r25	; 0x06
 620:	af 83       	std	Y+7, r26	; 0x07
 622:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	40 e8       	ldi	r20, 0x80	; 128
 62a:	5f e3       	ldi	r21, 0x3F	; 63
 62c:	6d 81       	ldd	r22, Y+5	; 0x05
 62e:	7e 81       	ldd	r23, Y+6	; 0x06
 630:	8f 81       	ldd	r24, Y+7	; 0x07
 632:	98 85       	ldd	r25, Y+8	; 0x08
 634:	3f d2       	rcall	.+1150   	; 0xab4 <__cmpsf2>
 636:	88 23       	and	r24, r24
 638:	2c f4       	brge	.+10     	; 0x644 <forwardsecure+0x8a>
		__ticks = 1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	9a 87       	std	Y+10, r25	; 0x0a
 640:	89 87       	std	Y+9, r24	; 0x09
 642:	3b c0       	rjmp	.+118    	; 0x6ba <forwardsecure+0x100>
	else if (__tmp > 65535)
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	3f ef       	ldi	r19, 0xFF	; 255
 648:	4f e7       	ldi	r20, 0x7F	; 127
 64a:	57 e4       	ldi	r21, 0x47	; 71
 64c:	6d 81       	ldd	r22, Y+5	; 0x05
 64e:	7e 81       	ldd	r23, Y+6	; 0x06
 650:	8f 81       	ldd	r24, Y+7	; 0x07
 652:	98 85       	ldd	r25, Y+8	; 0x08
 654:	ac d2       	rcall	.+1368   	; 0xbae <__gesf2>
 656:	18 16       	cp	r1, r24
 658:	3c f5       	brge	.+78     	; 0x6a8 <forwardsecure+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e2       	ldi	r20, 0x20	; 32
 660:	51 e4       	ldi	r21, 0x41	; 65
 662:	69 81       	ldd	r22, Y+1	; 0x01
 664:	7a 81       	ldd	r23, Y+2	; 0x02
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	9c 81       	ldd	r25, Y+4	; 0x04
 66a:	a5 d2       	rcall	.+1354   	; 0xbb6 <__mulsf3>
 66c:	dc 01       	movw	r26, r24
 66e:	cb 01       	movw	r24, r22
 670:	bc 01       	movw	r22, r24
 672:	cd 01       	movw	r24, r26
 674:	23 d2       	rcall	.+1094   	; 0xabc <__fixunssfsi>
 676:	dc 01       	movw	r26, r24
 678:	cb 01       	movw	r24, r22
 67a:	9a 87       	std	Y+10, r25	; 0x0a
 67c:	89 87       	std	Y+9, r24	; 0x09
 67e:	0f c0       	rjmp	.+30     	; 0x69e <forwardsecure+0xe4>
 680:	80 e9       	ldi	r24, 0x90	; 144
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	9c 87       	std	Y+12, r25	; 0x0c
 686:	8b 87       	std	Y+11, r24	; 0x0b
 688:	8b 85       	ldd	r24, Y+11	; 0x0b
 68a:	9c 85       	ldd	r25, Y+12	; 0x0c
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <forwardsecure+0xd2>
 690:	9c 87       	std	Y+12, r25	; 0x0c
 692:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 694:	89 85       	ldd	r24, Y+9	; 0x09
 696:	9a 85       	ldd	r25, Y+10	; 0x0a
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	9a 87       	std	Y+10, r25	; 0x0a
 69c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 69e:	89 85       	ldd	r24, Y+9	; 0x09
 6a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 6a2:	89 2b       	or	r24, r25
 6a4:	69 f7       	brne	.-38     	; 0x680 <forwardsecure+0xc6>
 6a6:	13 c0       	rjmp	.+38     	; 0x6ce <forwardsecure+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6a8:	6d 81       	ldd	r22, Y+5	; 0x05
 6aa:	7e 81       	ldd	r23, Y+6	; 0x06
 6ac:	8f 81       	ldd	r24, Y+7	; 0x07
 6ae:	98 85       	ldd	r25, Y+8	; 0x08
 6b0:	05 d2       	rcall	.+1034   	; 0xabc <__fixunssfsi>
 6b2:	dc 01       	movw	r26, r24
 6b4:	cb 01       	movw	r24, r22
 6b6:	9a 87       	std	Y+10, r25	; 0x0a
 6b8:	89 87       	std	Y+9, r24	; 0x09
 6ba:	89 85       	ldd	r24, Y+9	; 0x09
 6bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 6be:	9e 87       	std	Y+14, r25	; 0x0e
 6c0:	8d 87       	std	Y+13, r24	; 0x0d
 6c2:	8d 85       	ldd	r24, Y+13	; 0x0d
 6c4:	9e 85       	ldd	r25, Y+14	; 0x0e
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <forwardsecure+0x10c>
 6ca:	9e 87       	std	Y+14, r25	; 0x0e
 6cc:	8d 87       	std	Y+13, r24	; 0x0d
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
			
		}
		_delay_ms(500);
		PORTF &= ~(0x04);
 6ce:	82 e6       	ldi	r24, 0x62	; 98
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	22 e6       	ldi	r18, 0x62	; 98
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	20 81       	ld	r18, Z
 6da:	2b 7f       	andi	r18, 0xFB	; 251
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
}
 6e0:	2e 96       	adiw	r28, 0x0e	; 14
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <nrf24_init>:
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    nrf24_transferSync(value,value,len);
    nrf24_csn_digitalWrite(HIGH);
}
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	1c d1       	rcall	.+568    	; 0x934 <nrf24_setupPins>
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	4e d1       	rcall	.+668    	; 0x99c <nrf24_ce_digitalWrite>
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	6c d1       	rcall	.+728    	; 0x9dc <nrf24_csn_digitalWrite>
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <nrf24_config>:
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	00 d0       	rcall	.+0      	; 0x710 <nrf24_config+0x6>
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	6a 83       	std	Y+2, r22	; 0x02
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	80 93 13 01 	sts	0x0113, r24
 71e:	69 81       	ldd	r22, Y+1	; 0x01
 720:	85 e0       	ldi	r24, 0x05	; 5
 722:	d5 d0       	rcall	.+426    	; 0x8ce <nrf24_configRegister>
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	81 e1       	ldi	r24, 0x11	; 17
 728:	d2 d0       	rcall	.+420    	; 0x8ce <nrf24_configRegister>
 72a:	80 91 13 01 	lds	r24, 0x0113
 72e:	68 2f       	mov	r22, r24
 730:	82 e1       	ldi	r24, 0x12	; 18
 732:	cd d0       	rcall	.+410    	; 0x8ce <nrf24_configRegister>
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	83 e1       	ldi	r24, 0x13	; 19
 738:	ca d0       	rcall	.+404    	; 0x8ce <nrf24_configRegister>
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	84 e1       	ldi	r24, 0x14	; 20
 73e:	c7 d0       	rcall	.+398    	; 0x8ce <nrf24_configRegister>
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	85 e1       	ldi	r24, 0x15	; 21
 744:	c4 d0       	rcall	.+392    	; 0x8ce <nrf24_configRegister>
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	86 e1       	ldi	r24, 0x16	; 22
 74a:	c1 d0       	rcall	.+386    	; 0x8ce <nrf24_configRegister>
 74c:	66 e0       	ldi	r22, 0x06	; 6
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	be d0       	rcall	.+380    	; 0x8ce <nrf24_configRegister>
 752:	68 e0       	ldi	r22, 0x08	; 8
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	bb d0       	rcall	.+374    	; 0x8ce <nrf24_configRegister>
 758:	63 e0       	ldi	r22, 0x03	; 3
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	b8 d0       	rcall	.+368    	; 0x8ce <nrf24_configRegister>
 75e:	63 e0       	ldi	r22, 0x03	; 3
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	b5 d0       	rcall	.+362    	; 0x8ce <nrf24_configRegister>
 764:	6f e4       	ldi	r22, 0x4F	; 79
 766:	84 e0       	ldi	r24, 0x04	; 4
 768:	b2 d0       	rcall	.+356    	; 0x8ce <nrf24_configRegister>
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	8c e1       	ldi	r24, 0x1C	; 28
 76e:	af d0       	rcall	.+350    	; 0x8ce <nrf24_configRegister>
 770:	33 d0       	rcall	.+102    	; 0x7d8 <nrf24_powerUpRx>
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <nrf24_rx_address>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	00 d0       	rcall	.+0      	; 0x782 <nrf24_rx_address+0x6>
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	9a 83       	std	Y+2, r25	; 0x02
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	07 d1       	rcall	.+526    	; 0x99c <nrf24_ce_digitalWrite>
 78e:	89 81       	ldd	r24, Y+1	; 0x01
 790:	9a 81       	ldd	r25, Y+2	; 0x02
 792:	45 e0       	ldi	r20, 0x05	; 5
 794:	bc 01       	movw	r22, r24
 796:	8b e0       	ldi	r24, 0x0B	; 11
 798:	b0 d0       	rcall	.+352    	; 0x8fa <nrf24_writeRegister>
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	ff d0       	rcall	.+510    	; 0x99c <nrf24_ce_digitalWrite>
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <nrf24_tx_address>:
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <nrf24_tx_address+0x6>
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	9a 83       	std	Y+2, r25	; 0x02
 7b4:	89 83       	std	Y+1, r24	; 0x01
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ba:	45 e0       	ldi	r20, 0x05	; 5
 7bc:	bc 01       	movw	r22, r24
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	9c d0       	rcall	.+312    	; 0x8fa <nrf24_writeRegister>
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	9a 81       	ldd	r25, Y+2	; 0x02
 7c6:	45 e0       	ldi	r20, 0x05	; 5
 7c8:	bc 01       	movw	r22, r24
 7ca:	80 e1       	ldi	r24, 0x10	; 16
 7cc:	96 d0       	rcall	.+300    	; 0x8fa <nrf24_writeRegister>
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <nrf24_powerUpRx>:
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	fc d0       	rcall	.+504    	; 0x9dc <nrf24_csn_digitalWrite>
 7e4:	82 ee       	ldi	r24, 0xE2	; 226
 7e6:	0f d0       	rcall	.+30     	; 0x806 <spi_transfer>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	f8 d0       	rcall	.+496    	; 0x9dc <nrf24_csn_digitalWrite>
 7ec:	60 e7       	ldi	r22, 0x70	; 112
 7ee:	87 e0       	ldi	r24, 0x07	; 7
 7f0:	6e d0       	rcall	.+220    	; 0x8ce <nrf24_configRegister>
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	d3 d0       	rcall	.+422    	; 0x99c <nrf24_ce_digitalWrite>
 7f6:	6b e0       	ldi	r22, 0x0B	; 11
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	69 d0       	rcall	.+210    	; 0x8ce <nrf24_configRegister>
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	ce d0       	rcall	.+412    	; 0x99c <nrf24_ce_digitalWrite>
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <spi_transfer>:
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	00 d0       	rcall	.+0      	; 0x80c <spi_transfer+0x6>
 80c:	1f 92       	push	r1
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	8b 83       	std	Y+3, r24	; 0x03
 814:	19 82       	std	Y+1, r1	; 0x01
 816:	1a 82       	std	Y+2, r1	; 0x02
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	00 d1       	rcall	.+512    	; 0xa1c <nrf24_sck_digitalWrite>
 81c:	19 82       	std	Y+1, r1	; 0x01
 81e:	2a c0       	rjmp	.+84     	; 0x874 <spi_transfer+0x6e>
 820:	8b 81       	ldd	r24, Y+3	; 0x03
 822:	88 2f       	mov	r24, r24
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	29 81       	ldd	r18, Y+1	; 0x01
 828:	22 2f       	mov	r18, r18
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	47 e0       	ldi	r20, 0x07	; 7
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	ba 01       	movw	r22, r20
 832:	62 1b       	sub	r22, r18
 834:	73 0b       	sbc	r23, r19
 836:	9b 01       	movw	r18, r22
 838:	02 c0       	rjmp	.+4      	; 0x83e <spi_transfer+0x38>
 83a:	95 95       	asr	r25
 83c:	87 95       	ror	r24
 83e:	2a 95       	dec	r18
 840:	e2 f7       	brpl	.-8      	; 0x83a <spi_transfer+0x34>
 842:	81 70       	andi	r24, 0x01	; 1
 844:	99 27       	eor	r25, r25
 846:	89 2b       	or	r24, r25
 848:	19 f0       	breq	.+6      	; 0x850 <spi_transfer+0x4a>
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	07 d1       	rcall	.+526    	; 0xa5c <nrf24_mosi_digitalWrite>
 84e:	02 c0       	rjmp	.+4      	; 0x854 <spi_transfer+0x4e>
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	04 d1       	rcall	.+520    	; 0xa5c <nrf24_mosi_digitalWrite>
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	e2 d0       	rcall	.+452    	; 0xa1c <nrf24_sck_digitalWrite>
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	88 0f       	add	r24, r24
 85c:	8a 83       	std	Y+2, r24	; 0x02
 85e:	1e d1       	rcall	.+572    	; 0xa9c <nrf24_miso_digitalRead>
 860:	88 23       	and	r24, r24
 862:	19 f0       	breq	.+6      	; 0x86a <spi_transfer+0x64>
 864:	8a 81       	ldd	r24, Y+2	; 0x02
 866:	81 60       	ori	r24, 0x01	; 1
 868:	8a 83       	std	Y+2, r24	; 0x02
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	d7 d0       	rcall	.+430    	; 0xa1c <nrf24_sck_digitalWrite>
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	8f 5f       	subi	r24, 0xFF	; 255
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	88 30       	cpi	r24, 0x08	; 8
 878:	98 f2       	brcs	.-90     	; 0x820 <spi_transfer+0x1a>
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <nrf24_transmitSync>:
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	00 d0       	rcall	.+0      	; 0x88e <nrf24_transmitSync+0x6>
 88e:	00 d0       	rcall	.+0      	; 0x890 <nrf24_transmitSync+0x8>
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	9b 83       	std	Y+3, r25	; 0x03
 896:	8a 83       	std	Y+2, r24	; 0x02
 898:	6c 83       	std	Y+4, r22	; 0x04
 89a:	19 82       	std	Y+1, r1	; 0x01
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <nrf24_transmitSync+0x30>
 89e:	89 81       	ldd	r24, Y+1	; 0x01
 8a0:	88 2f       	mov	r24, r24
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	2a 81       	ldd	r18, Y+2	; 0x02
 8a6:	3b 81       	ldd	r19, Y+3	; 0x03
 8a8:	82 0f       	add	r24, r18
 8aa:	93 1f       	adc	r25, r19
 8ac:	fc 01       	movw	r30, r24
 8ae:	80 81       	ld	r24, Z
 8b0:	aa df       	rcall	.-172    	; 0x806 <spi_transfer>
 8b2:	89 81       	ldd	r24, Y+1	; 0x01
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
 8b6:	89 83       	std	Y+1, r24	; 0x01
 8b8:	99 81       	ldd	r25, Y+1	; 0x01
 8ba:	8c 81       	ldd	r24, Y+4	; 0x04
 8bc:	98 17       	cp	r25, r24
 8be:	78 f3       	brcs	.-34     	; 0x89e <nrf24_transmitSync+0x16>
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	08 95       	ret

000008ce <nrf24_configRegister>:
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <nrf24_configRegister+0x6>
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
 8d8:	89 83       	std	Y+1, r24	; 0x01
 8da:	6a 83       	std	Y+2, r22	; 0x02
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	7e d0       	rcall	.+252    	; 0x9dc <nrf24_csn_digitalWrite>
 8e0:	89 81       	ldd	r24, Y+1	; 0x01
 8e2:	8f 71       	andi	r24, 0x1F	; 31
 8e4:	80 62       	ori	r24, 0x20	; 32
 8e6:	8f df       	rcall	.-226    	; 0x806 <spi_transfer>
 8e8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ea:	8d df       	rcall	.-230    	; 0x806 <spi_transfer>
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	76 d0       	rcall	.+236    	; 0x9dc <nrf24_csn_digitalWrite>
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	00 d0       	rcall	.+0      	; 0x900 <nrf24_writeRegister+0x6>
 900:	00 d0       	rcall	.+0      	; 0x902 <nrf24_writeRegister+0x8>
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	89 83       	std	Y+1, r24	; 0x01
 908:	7b 83       	std	Y+3, r23	; 0x03
 90a:	6a 83       	std	Y+2, r22	; 0x02
 90c:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	65 d0       	rcall	.+202    	; 0x9dc <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	8f 71       	andi	r24, 0x1F	; 31
 916:	80 62       	ori	r24, 0x20	; 32
 918:	76 df       	rcall	.-276    	; 0x806 <spi_transfer>
    nrf24_transmitSync(value,len);
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	9b 81       	ldd	r25, Y+3	; 0x03
 91e:	6c 81       	ldd	r22, Y+4	; 0x04
 920:	b3 df       	rcall	.-154    	; 0x888 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	5b d0       	rcall	.+182    	; 0x9dc <nrf24_csn_digitalWrite>
}
 926:	0f 90       	pop	r0
 928:	0f 90       	pop	r0
 92a:	0f 90       	pop	r0
 92c:	0f 90       	pop	r0
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	08 95       	ret

00000934 <nrf24_setupPins>:
#define clr_bit(reg,bit) reg &= ~(1<<bit)
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
    set_bit(DDRE,6); // CE output
 93c:	82 e2       	ldi	r24, 0x22	; 34
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	22 e2       	ldi	r18, 0x22	; 34
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	f9 01       	movw	r30, r18
 946:	20 81       	ld	r18, Z
 948:	20 64       	ori	r18, 0x40	; 64
 94a:	fc 01       	movw	r30, r24
 94c:	20 83       	st	Z, r18
    set_bit(DDRB,0); // CSN output
 94e:	87 e3       	ldi	r24, 0x37	; 55
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	27 e3       	ldi	r18, 0x37	; 55
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	f9 01       	movw	r30, r18
 958:	20 81       	ld	r18, Z
 95a:	21 60       	ori	r18, 0x01	; 1
 95c:	fc 01       	movw	r30, r24
 95e:	20 83       	st	Z, r18
    set_bit(DDRB,1); // SCK output
 960:	87 e3       	ldi	r24, 0x37	; 55
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	27 e3       	ldi	r18, 0x37	; 55
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	f9 01       	movw	r30, r18
 96a:	20 81       	ld	r18, Z
 96c:	22 60       	ori	r18, 0x02	; 2
 96e:	fc 01       	movw	r30, r24
 970:	20 83       	st	Z, r18
    set_bit(DDRB,2); // MOSI output
 972:	87 e3       	ldi	r24, 0x37	; 55
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	27 e3       	ldi	r18, 0x37	; 55
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	f9 01       	movw	r30, r18
 97c:	20 81       	ld	r18, Z
 97e:	24 60       	ori	r18, 0x04	; 4
 980:	fc 01       	movw	r30, r24
 982:	20 83       	st	Z, r18
    clr_bit(DDRB,3); // MISO input
 984:	87 e3       	ldi	r24, 0x37	; 55
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	27 e3       	ldi	r18, 0x37	; 55
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	f9 01       	movw	r30, r18
 98e:	20 81       	ld	r18, Z
 990:	27 7f       	andi	r18, 0xF7	; 247
 992:	fc 01       	movw	r30, r24
 994:	20 83       	st	Z, r18
}
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	08 95       	ret

0000099c <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	1f 92       	push	r1
 9a2:	cd b7       	in	r28, 0x3d	; 61
 9a4:	de b7       	in	r29, 0x3e	; 62
 9a6:	89 83       	std	Y+1, r24	; 0x01
    if(state)
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	88 23       	and	r24, r24
 9ac:	51 f0       	breq	.+20     	; 0x9c2 <nrf24_ce_digitalWrite+0x26>
    {
        set_bit(PORTE,6);
 9ae:	83 e2       	ldi	r24, 0x23	; 35
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	23 e2       	ldi	r18, 0x23	; 35
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	f9 01       	movw	r30, r18
 9b8:	20 81       	ld	r18, Z
 9ba:	20 64       	ori	r18, 0x40	; 64
 9bc:	fc 01       	movw	r30, r24
 9be:	20 83       	st	Z, r18
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <nrf24_ce_digitalWrite+0x38>
    }
    else
    {
        clr_bit(PORTE,6);
 9c2:	83 e2       	ldi	r24, 0x23	; 35
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	23 e2       	ldi	r18, 0x23	; 35
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	f9 01       	movw	r30, r18
 9cc:	20 81       	ld	r18, Z
 9ce:	2f 7b       	andi	r18, 0xBF	; 191
 9d0:	fc 01       	movw	r30, r24
 9d2:	20 83       	st	Z, r18
    }
}
 9d4:	0f 90       	pop	r0
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	08 95       	ret

000009dc <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	1f 92       	push	r1
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62
 9e6:	89 83       	std	Y+1, r24	; 0x01
    if(state)
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	88 23       	and	r24, r24
 9ec:	51 f0       	breq	.+20     	; 0xa02 <nrf24_csn_digitalWrite+0x26>
    {
        set_bit(PORTB,0);
 9ee:	88 e3       	ldi	r24, 0x38	; 56
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	28 e3       	ldi	r18, 0x38	; 56
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	f9 01       	movw	r30, r18
 9f8:	20 81       	ld	r18, Z
 9fa:	21 60       	ori	r18, 0x01	; 1
 9fc:	fc 01       	movw	r30, r24
 9fe:	20 83       	st	Z, r18
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <nrf24_csn_digitalWrite+0x38>
    }
    else
    {
        clr_bit(PORTB,0);
 a02:	88 e3       	ldi	r24, 0x38	; 56
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	28 e3       	ldi	r18, 0x38	; 56
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	f9 01       	movw	r30, r18
 a0c:	20 81       	ld	r18, Z
 a0e:	2e 7f       	andi	r18, 0xFE	; 254
 a10:	fc 01       	movw	r30, r24
 a12:	20 83       	st	Z, r18
    }
}
 a14:	0f 90       	pop	r0
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	08 95       	ret

00000a1c <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	1f 92       	push	r1
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
 a26:	89 83       	std	Y+1, r24	; 0x01
    if(state)
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	88 23       	and	r24, r24
 a2c:	51 f0       	breq	.+20     	; 0xa42 <nrf24_sck_digitalWrite+0x26>
    {
        set_bit(PORTB,1);
 a2e:	88 e3       	ldi	r24, 0x38	; 56
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	28 e3       	ldi	r18, 0x38	; 56
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	f9 01       	movw	r30, r18
 a38:	20 81       	ld	r18, Z
 a3a:	22 60       	ori	r18, 0x02	; 2
 a3c:	fc 01       	movw	r30, r24
 a3e:	20 83       	st	Z, r18
 a40:	09 c0       	rjmp	.+18     	; 0xa54 <nrf24_sck_digitalWrite+0x38>
    }
    else
    {
        clr_bit(PORTB,1);
 a42:	88 e3       	ldi	r24, 0x38	; 56
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	28 e3       	ldi	r18, 0x38	; 56
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	f9 01       	movw	r30, r18
 a4c:	20 81       	ld	r18, Z
 a4e:	2d 7f       	andi	r18, 0xFD	; 253
 a50:	fc 01       	movw	r30, r24
 a52:	20 83       	st	Z, r18
    }
}
 a54:	0f 90       	pop	r0
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	1f 92       	push	r1
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
 a66:	89 83       	std	Y+1, r24	; 0x01
    if(state)
 a68:	89 81       	ldd	r24, Y+1	; 0x01
 a6a:	88 23       	and	r24, r24
 a6c:	51 f0       	breq	.+20     	; 0xa82 <nrf24_mosi_digitalWrite+0x26>
    {
        set_bit(PORTB,2);
 a6e:	88 e3       	ldi	r24, 0x38	; 56
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	28 e3       	ldi	r18, 0x38	; 56
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	f9 01       	movw	r30, r18
 a78:	20 81       	ld	r18, Z
 a7a:	24 60       	ori	r18, 0x04	; 4
 a7c:	fc 01       	movw	r30, r24
 a7e:	20 83       	st	Z, r18
 a80:	09 c0       	rjmp	.+18     	; 0xa94 <nrf24_mosi_digitalWrite+0x38>
    }
    else
    {
        clr_bit(PORTB,2);
 a82:	88 e3       	ldi	r24, 0x38	; 56
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	28 e3       	ldi	r18, 0x38	; 56
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	f9 01       	movw	r30, r18
 a8c:	20 81       	ld	r18, Z
 a8e:	2b 7f       	andi	r18, 0xFB	; 251
 a90:	fc 01       	movw	r30, r24
 a92:	20 83       	st	Z, r18
    }
}
 a94:	0f 90       	pop	r0
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	08 95       	ret

00000a9c <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
    return check_bit(PINB,3);
 aa4:	86 e3       	ldi	r24, 0x36	; 54
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	fc 01       	movw	r30, r24
 aaa:	80 81       	ld	r24, Z
 aac:	88 70       	andi	r24, 0x08	; 8
}
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	08 95       	ret

00000ab4 <__cmpsf2>:
 ab4:	2f d0       	rcall	.+94     	; 0xb14 <__fp_cmp>
 ab6:	08 f4       	brcc	.+2      	; 0xaba <__cmpsf2+0x6>
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	08 95       	ret

00000abc <__fixunssfsi>:
 abc:	57 d0       	rcall	.+174    	; 0xb6c <__fp_splitA>
 abe:	88 f0       	brcs	.+34     	; 0xae2 <__fixunssfsi+0x26>
 ac0:	9f 57       	subi	r25, 0x7F	; 127
 ac2:	90 f0       	brcs	.+36     	; 0xae8 <__fixunssfsi+0x2c>
 ac4:	b9 2f       	mov	r27, r25
 ac6:	99 27       	eor	r25, r25
 ac8:	b7 51       	subi	r27, 0x17	; 23
 aca:	a0 f0       	brcs	.+40     	; 0xaf4 <__fixunssfsi+0x38>
 acc:	d1 f0       	breq	.+52     	; 0xb02 <__fixunssfsi+0x46>
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	1a f0       	brmi	.+6      	; 0xade <__fixunssfsi+0x22>
 ad8:	ba 95       	dec	r27
 ada:	c9 f7       	brne	.-14     	; 0xace <__fixunssfsi+0x12>
 adc:	12 c0       	rjmp	.+36     	; 0xb02 <__fixunssfsi+0x46>
 ade:	b1 30       	cpi	r27, 0x01	; 1
 ae0:	81 f0       	breq	.+32     	; 0xb02 <__fixunssfsi+0x46>
 ae2:	5e d0       	rcall	.+188    	; 0xba0 <__fp_zero>
 ae4:	b1 e0       	ldi	r27, 0x01	; 1
 ae6:	08 95       	ret
 ae8:	5b c0       	rjmp	.+182    	; 0xba0 <__fp_zero>
 aea:	67 2f       	mov	r22, r23
 aec:	78 2f       	mov	r23, r24
 aee:	88 27       	eor	r24, r24
 af0:	b8 5f       	subi	r27, 0xF8	; 248
 af2:	39 f0       	breq	.+14     	; 0xb02 <__fixunssfsi+0x46>
 af4:	b9 3f       	cpi	r27, 0xF9	; 249
 af6:	cc f3       	brlt	.-14     	; 0xaea <__fixunssfsi+0x2e>
 af8:	86 95       	lsr	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	b3 95       	inc	r27
 b00:	d9 f7       	brne	.-10     	; 0xaf8 <__fixunssfsi+0x3c>
 b02:	3e f4       	brtc	.+14     	; 0xb12 <__fixunssfsi+0x56>
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	08 95       	ret

00000b14 <__fp_cmp>:
 b14:	99 0f       	add	r25, r25
 b16:	00 08       	sbc	r0, r0
 b18:	55 0f       	add	r21, r21
 b1a:	aa 0b       	sbc	r26, r26
 b1c:	e0 e8       	ldi	r30, 0x80	; 128
 b1e:	fe ef       	ldi	r31, 0xFE	; 254
 b20:	16 16       	cp	r1, r22
 b22:	17 06       	cpc	r1, r23
 b24:	e8 07       	cpc	r30, r24
 b26:	f9 07       	cpc	r31, r25
 b28:	c0 f0       	brcs	.+48     	; 0xb5a <__fp_cmp+0x46>
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	e4 07       	cpc	r30, r20
 b30:	f5 07       	cpc	r31, r21
 b32:	98 f0       	brcs	.+38     	; 0xb5a <__fp_cmp+0x46>
 b34:	62 1b       	sub	r22, r18
 b36:	73 0b       	sbc	r23, r19
 b38:	84 0b       	sbc	r24, r20
 b3a:	95 0b       	sbc	r25, r21
 b3c:	39 f4       	brne	.+14     	; 0xb4c <__fp_cmp+0x38>
 b3e:	0a 26       	eor	r0, r26
 b40:	61 f0       	breq	.+24     	; 0xb5a <__fp_cmp+0x46>
 b42:	23 2b       	or	r18, r19
 b44:	24 2b       	or	r18, r20
 b46:	25 2b       	or	r18, r21
 b48:	21 f4       	brne	.+8      	; 0xb52 <__fp_cmp+0x3e>
 b4a:	08 95       	ret
 b4c:	0a 26       	eor	r0, r26
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__fp_cmp+0x3e>
 b50:	a1 40       	sbci	r26, 0x01	; 1
 b52:	a6 95       	lsr	r26
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	81 1d       	adc	r24, r1
 b58:	81 1d       	adc	r24, r1
 b5a:	08 95       	ret

00000b5c <__fp_split3>:
 b5c:	57 fd       	sbrc	r21, 7
 b5e:	90 58       	subi	r25, 0x80	; 128
 b60:	44 0f       	add	r20, r20
 b62:	55 1f       	adc	r21, r21
 b64:	59 f0       	breq	.+22     	; 0xb7c <__fp_splitA+0x10>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	71 f0       	breq	.+28     	; 0xb86 <__fp_splitA+0x1a>
 b6a:	47 95       	ror	r20

00000b6c <__fp_splitA>:
 b6c:	88 0f       	add	r24, r24
 b6e:	97 fb       	bst	r25, 7
 b70:	99 1f       	adc	r25, r25
 b72:	61 f0       	breq	.+24     	; 0xb8c <__fp_splitA+0x20>
 b74:	9f 3f       	cpi	r25, 0xFF	; 255
 b76:	79 f0       	breq	.+30     	; 0xb96 <__fp_splitA+0x2a>
 b78:	87 95       	ror	r24
 b7a:	08 95       	ret
 b7c:	12 16       	cp	r1, r18
 b7e:	13 06       	cpc	r1, r19
 b80:	14 06       	cpc	r1, r20
 b82:	55 1f       	adc	r21, r21
 b84:	f2 cf       	rjmp	.-28     	; 0xb6a <__fp_split3+0xe>
 b86:	46 95       	lsr	r20
 b88:	f1 df       	rcall	.-30     	; 0xb6c <__fp_splitA>
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <__fp_splitA+0x30>
 b8c:	16 16       	cp	r1, r22
 b8e:	17 06       	cpc	r1, r23
 b90:	18 06       	cpc	r1, r24
 b92:	99 1f       	adc	r25, r25
 b94:	f1 cf       	rjmp	.-30     	; 0xb78 <__fp_splitA+0xc>
 b96:	86 95       	lsr	r24
 b98:	71 05       	cpc	r23, r1
 b9a:	61 05       	cpc	r22, r1
 b9c:	08 94       	sec
 b9e:	08 95       	ret

00000ba0 <__fp_zero>:
 ba0:	e8 94       	clt

00000ba2 <__fp_szero>:
 ba2:	bb 27       	eor	r27, r27
 ba4:	66 27       	eor	r22, r22
 ba6:	77 27       	eor	r23, r23
 ba8:	cb 01       	movw	r24, r22
 baa:	97 f9       	bld	r25, 7
 bac:	08 95       	ret

00000bae <__gesf2>:
 bae:	b2 df       	rcall	.-156    	; 0xb14 <__fp_cmp>
 bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__gesf2+0x6>
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__mulsf3>:
 bb6:	0b d0       	rcall	.+22     	; 0xbce <__mulsf3x>
 bb8:	78 c0       	rjmp	.+240    	; 0xcaa <__fp_round>
 bba:	69 d0       	rcall	.+210    	; 0xc8e <__fp_pscA>
 bbc:	28 f0       	brcs	.+10     	; 0xbc8 <__mulsf3+0x12>
 bbe:	6e d0       	rcall	.+220    	; 0xc9c <__fp_pscB>
 bc0:	18 f0       	brcs	.+6      	; 0xbc8 <__mulsf3+0x12>
 bc2:	95 23       	and	r25, r21
 bc4:	09 f0       	breq	.+2      	; 0xbc8 <__mulsf3+0x12>
 bc6:	5a c0       	rjmp	.+180    	; 0xc7c <__fp_inf>
 bc8:	5f c0       	rjmp	.+190    	; 0xc88 <__fp_nan>
 bca:	11 24       	eor	r1, r1
 bcc:	ea cf       	rjmp	.-44     	; 0xba2 <__fp_szero>

00000bce <__mulsf3x>:
 bce:	c6 df       	rcall	.-116    	; 0xb5c <__fp_split3>
 bd0:	a0 f3       	brcs	.-24     	; 0xbba <__mulsf3+0x4>

00000bd2 <__mulsf3_pse>:
 bd2:	95 9f       	mul	r25, r21
 bd4:	d1 f3       	breq	.-12     	; 0xbca <__mulsf3+0x14>
 bd6:	95 0f       	add	r25, r21
 bd8:	50 e0       	ldi	r21, 0x00	; 0
 bda:	55 1f       	adc	r21, r21
 bdc:	62 9f       	mul	r22, r18
 bde:	f0 01       	movw	r30, r0
 be0:	72 9f       	mul	r23, r18
 be2:	bb 27       	eor	r27, r27
 be4:	f0 0d       	add	r31, r0
 be6:	b1 1d       	adc	r27, r1
 be8:	63 9f       	mul	r22, r19
 bea:	aa 27       	eor	r26, r26
 bec:	f0 0d       	add	r31, r0
 bee:	b1 1d       	adc	r27, r1
 bf0:	aa 1f       	adc	r26, r26
 bf2:	64 9f       	mul	r22, r20
 bf4:	66 27       	eor	r22, r22
 bf6:	b0 0d       	add	r27, r0
 bf8:	a1 1d       	adc	r26, r1
 bfa:	66 1f       	adc	r22, r22
 bfc:	82 9f       	mul	r24, r18
 bfe:	22 27       	eor	r18, r18
 c00:	b0 0d       	add	r27, r0
 c02:	a1 1d       	adc	r26, r1
 c04:	62 1f       	adc	r22, r18
 c06:	73 9f       	mul	r23, r19
 c08:	b0 0d       	add	r27, r0
 c0a:	a1 1d       	adc	r26, r1
 c0c:	62 1f       	adc	r22, r18
 c0e:	83 9f       	mul	r24, r19
 c10:	a0 0d       	add	r26, r0
 c12:	61 1d       	adc	r22, r1
 c14:	22 1f       	adc	r18, r18
 c16:	74 9f       	mul	r23, r20
 c18:	33 27       	eor	r19, r19
 c1a:	a0 0d       	add	r26, r0
 c1c:	61 1d       	adc	r22, r1
 c1e:	23 1f       	adc	r18, r19
 c20:	84 9f       	mul	r24, r20
 c22:	60 0d       	add	r22, r0
 c24:	21 1d       	adc	r18, r1
 c26:	82 2f       	mov	r24, r18
 c28:	76 2f       	mov	r23, r22
 c2a:	6a 2f       	mov	r22, r26
 c2c:	11 24       	eor	r1, r1
 c2e:	9f 57       	subi	r25, 0x7F	; 127
 c30:	50 40       	sbci	r21, 0x00	; 0
 c32:	8a f0       	brmi	.+34     	; 0xc56 <__mulsf3_pse+0x84>
 c34:	e1 f0       	breq	.+56     	; 0xc6e <__mulsf3_pse+0x9c>
 c36:	88 23       	and	r24, r24
 c38:	4a f0       	brmi	.+18     	; 0xc4c <__mulsf3_pse+0x7a>
 c3a:	ee 0f       	add	r30, r30
 c3c:	ff 1f       	adc	r31, r31
 c3e:	bb 1f       	adc	r27, r27
 c40:	66 1f       	adc	r22, r22
 c42:	77 1f       	adc	r23, r23
 c44:	88 1f       	adc	r24, r24
 c46:	91 50       	subi	r25, 0x01	; 1
 c48:	50 40       	sbci	r21, 0x00	; 0
 c4a:	a9 f7       	brne	.-22     	; 0xc36 <__mulsf3_pse+0x64>
 c4c:	9e 3f       	cpi	r25, 0xFE	; 254
 c4e:	51 05       	cpc	r21, r1
 c50:	70 f0       	brcs	.+28     	; 0xc6e <__mulsf3_pse+0x9c>
 c52:	14 c0       	rjmp	.+40     	; 0xc7c <__fp_inf>
 c54:	a6 cf       	rjmp	.-180    	; 0xba2 <__fp_szero>
 c56:	5f 3f       	cpi	r21, 0xFF	; 255
 c58:	ec f3       	brlt	.-6      	; 0xc54 <__mulsf3_pse+0x82>
 c5a:	98 3e       	cpi	r25, 0xE8	; 232
 c5c:	dc f3       	brlt	.-10     	; 0xc54 <__mulsf3_pse+0x82>
 c5e:	86 95       	lsr	r24
 c60:	77 95       	ror	r23
 c62:	67 95       	ror	r22
 c64:	b7 95       	ror	r27
 c66:	f7 95       	ror	r31
 c68:	e7 95       	ror	r30
 c6a:	9f 5f       	subi	r25, 0xFF	; 255
 c6c:	c1 f7       	brne	.-16     	; 0xc5e <__mulsf3_pse+0x8c>
 c6e:	fe 2b       	or	r31, r30
 c70:	88 0f       	add	r24, r24
 c72:	91 1d       	adc	r25, r1
 c74:	96 95       	lsr	r25
 c76:	87 95       	ror	r24
 c78:	97 f9       	bld	r25, 7
 c7a:	08 95       	ret

00000c7c <__fp_inf>:
 c7c:	97 f9       	bld	r25, 7
 c7e:	9f 67       	ori	r25, 0x7F	; 127
 c80:	80 e8       	ldi	r24, 0x80	; 128
 c82:	70 e0       	ldi	r23, 0x00	; 0
 c84:	60 e0       	ldi	r22, 0x00	; 0
 c86:	08 95       	ret

00000c88 <__fp_nan>:
 c88:	9f ef       	ldi	r25, 0xFF	; 255
 c8a:	80 ec       	ldi	r24, 0xC0	; 192
 c8c:	08 95       	ret

00000c8e <__fp_pscA>:
 c8e:	00 24       	eor	r0, r0
 c90:	0a 94       	dec	r0
 c92:	16 16       	cp	r1, r22
 c94:	17 06       	cpc	r1, r23
 c96:	18 06       	cpc	r1, r24
 c98:	09 06       	cpc	r0, r25
 c9a:	08 95       	ret

00000c9c <__fp_pscB>:
 c9c:	00 24       	eor	r0, r0
 c9e:	0a 94       	dec	r0
 ca0:	12 16       	cp	r1, r18
 ca2:	13 06       	cpc	r1, r19
 ca4:	14 06       	cpc	r1, r20
 ca6:	05 06       	cpc	r0, r21
 ca8:	08 95       	ret

00000caa <__fp_round>:
 caa:	09 2e       	mov	r0, r25
 cac:	03 94       	inc	r0
 cae:	00 0c       	add	r0, r0
 cb0:	11 f4       	brne	.+4      	; 0xcb6 <__fp_round+0xc>
 cb2:	88 23       	and	r24, r24
 cb4:	52 f0       	brmi	.+20     	; 0xcca <__fp_round+0x20>
 cb6:	bb 0f       	add	r27, r27
 cb8:	40 f4       	brcc	.+16     	; 0xcca <__fp_round+0x20>
 cba:	bf 2b       	or	r27, r31
 cbc:	11 f4       	brne	.+4      	; 0xcc2 <__fp_round+0x18>
 cbe:	60 ff       	sbrs	r22, 0
 cc0:	04 c0       	rjmp	.+8      	; 0xcca <__fp_round+0x20>
 cc2:	6f 5f       	subi	r22, 0xFF	; 255
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	08 95       	ret

00000ccc <_exit>:
 ccc:	f8 94       	cli

00000cce <__stop_program>:
 cce:	ff cf       	rjmp	.-2      	; 0xcce <__stop_program>

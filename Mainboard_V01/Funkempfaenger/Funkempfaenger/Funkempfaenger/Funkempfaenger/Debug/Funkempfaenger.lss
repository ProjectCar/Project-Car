
Funkempfaenger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001327  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051e  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a56  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b83  00000000  00000000  0000333b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00003ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	41 c1       	rjmp	.+642    	; 0x290 <__vector_3>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	56 d0       	rcall	.+172    	; 0x170 <main>
  c4:	f7 c1       	rjmp	.+1006   	; 0x4b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
		}
		
	}
	else{ return 3; }
	
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	80 91 0a 01 	lds	r24, 0x010A
  dc:	90 91 0b 01 	lds	r25, 0x010B
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 0b 01 	sts	0x010B, r25
  e6:	80 93 0a 01 	sts	0x010A, r24
  ea:	80 91 0a 01 	lds	r24, 0x010A
  ee:	90 91 0b 01 	lds	r25, 0x010B
  f2:	8c 32       	cpi	r24, 0x2C	; 44
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	31 f4       	brne	.+12     	; 0x104 <__vector_16+0x3c>
  f8:	c4 98       	cbi	0x18, 4	; 24
  fa:	c5 98       	cbi	0x18, 5	; 24
  fc:	10 92 0b 01 	sts	0x010B, r1
 100:	10 92 0a 01 	sts	0x010A, r1
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <twi_transmit>:
 114:	9c 01       	movw	r18, r24
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	80 93 74 00 	sts	0x0074, r24
 120:	e4 e7       	ldi	r30, 0x74	; 116
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	99 23       	and	r25, r25
 128:	ec f7       	brge	.-6      	; 0x124 <twi_transmit+0x10>
 12a:	20 93 73 00 	sts	0x0073, r18
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 93 74 00 	sts	0x0074, r24
 134:	e4 e7       	ldi	r30, 0x74	; 116
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <twi_transmit+0x24>
 13e:	40 93 73 00 	sts	0x0073, r20
 142:	84 e8       	ldi	r24, 0x84	; 132
 144:	80 93 74 00 	sts	0x0074, r24
 148:	e4 e7       	ldi	r30, 0x74	; 116
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	ec f7       	brge	.-6      	; 0x14c <twi_transmit+0x38>
 152:	8b eb       	ldi	r24, 0xBB	; 187
 154:	80 93 73 00 	sts	0x0073, r24
 158:	84 e8       	ldi	r24, 0x84	; 132
 15a:	80 93 74 00 	sts	0x0074, r24
 15e:	e4 e7       	ldi	r30, 0x74	; 116
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	ec f7       	brge	.-6      	; 0x162 <twi_transmit+0x4e>
 168:	84 e9       	ldi	r24, 0x94	; 148
 16a:	80 93 74 00 	sts	0x0074, r24
 16e:	08 95       	ret

00000170 <main>:
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 93 61 00 	sts	0x0061, r24
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	90 93 62 00 	sts	0x0062, r25
 17c:	84 bb       	out	0x14, r24	; 20
 17e:	15 ba       	out	0x15, r1	; 21
 180:	1a ba       	out	0x1a, r1	; 26
 182:	1b ba       	out	0x1b, r1	; 27
 184:	87 bb       	out	0x17, r24	; 23
 186:	18 ba       	out	0x18, r1	; 24
 188:	83 b7       	in	r24, 0x33	; 51
 18a:	85 60       	ori	r24, 0x05	; 5
 18c:	83 bf       	out	0x33, r24	; 51
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	89 bf       	out	0x39, r24	; 57
 192:	80 ea       	ldi	r24, 0xA0	; 160
 194:	80 93 6a 00 	sts	0x006A, r24
 198:	87 b7       	in	r24, 0x37	; 55
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	87 bf       	out	0x37, r24	; 55
 19e:	78 94       	sei
 1a0:	9e d0       	rcall	.+316    	; 0x2de <nrf24_init>
 1a2:	66 e0       	ldi	r22, 0x06	; 6
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	06 d1       	rcall	.+524    	; 0x3b4 <nrf24_config>
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	54 d1       	rcall	.+680    	; 0x456 <nrf24_tx_address>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	43 d1       	rcall	.+646    	; 0x43a <nrf24_rx_address>
 1b4:	e0 e7       	ldi	r30, 0x70	; 112
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	84 66       	ori	r24, 0x64	; 100
 1bc:	80 83       	st	Z, r24
 1be:	cd e0       	ldi	r28, 0x0D	; 13
 1c0:	d1 e0       	ldi	r29, 0x01	; 1
 1c2:	40 ef       	ldi	r20, 0xF0	; 240
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	6a 81       	ldd	r22, Y+2	; 0x02
 1c8:	8b e0       	ldi	r24, 0x0B	; 11
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	a3 df       	rcall	.-186    	; 0x114 <twi_transmit>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	89 e6       	ldi	r24, 0x69	; 105
 1d2:	98 e1       	ldi	r25, 0x18	; 24
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x64>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x6e>
 1de:	00 00       	nop
 1e0:	f0 cf       	rjmp	.-32     	; 0x1c2 <main+0x52>

000001e2 <backwardsecure>:
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 1e2:	c8 99       	sbic	0x19, 0	; 25
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <backwardsecure+0x12>
	
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
 1e6:	e2 e6       	ldi	r30, 0x62	; 98
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	80 83       	st	Z, r24
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 1f0:	c8 9b       	sbis	0x19, 0	; 25
 1f2:	fb cf       	rjmp	.-10     	; 0x1ea <backwardsecure+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	89 e6       	ldi	r24, 0x69	; 105
 1f8:	98 e1       	ldi	r25, 0x18	; 24
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <backwardsecure+0x18>
 202:	00 c0       	rjmp	.+0      	; 0x204 <backwardsecure+0x22>
 204:	00 00       	nop
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
	
	}
	_delay_ms(500);
	PORTF &= ~(0x08);
 206:	e2 e6       	ldi	r30, 0x62	; 98
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	80 83       	st	Z, r24
 210:	08 95       	ret

00000212 <__vector_4>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT3_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	0b b6       	in	r0, 0x3b	; 59
 21e:	0f 92       	push	r0
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	
	backwardsecure();
 238:	d4 df       	rcall	.-88     	; 0x1e2 <backwardsecure>
	
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0b be       	out	0x3b, r0	; 59
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <forwardsecure>:
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 260:	c9 99       	sbic	0x19, 1	; 25
 262:	07 c0       	rjmp	.+14     	; 0x272 <forwardsecure+0x12>
			
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
 264:	e2 e6       	ldi	r30, 0x62	; 98
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	84 60       	ori	r24, 0x04	; 4
 26c:	80 83       	st	Z, r24
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 26e:	c9 9b       	sbis	0x19, 1	; 25
 270:	fb cf       	rjmp	.-10     	; 0x268 <forwardsecure+0x8>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	89 e6       	ldi	r24, 0x69	; 105
 276:	98 e1       	ldi	r25, 0x18	; 24
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <forwardsecure+0x18>
 280:	00 c0       	rjmp	.+0      	; 0x282 <forwardsecure+0x22>
 282:	00 00       	nop
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
			
		}
		_delay_ms(500);
		PORTF &= ~(0x04);
 284:	e2 e6       	ldi	r30, 0x62	; 98
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	8b 7f       	andi	r24, 0xFB	; 251
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <__vector_3>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT2_vect){
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0b b6       	in	r0, 0x3b	; 59
 29c:	0f 92       	push	r0
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	
	forwardsecure();
 2b6:	d4 df       	rcall	.-88     	; 0x260 <forwardsecure>
	
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0b be       	out	0x3b, r0	; 59
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 2de:	c9 d0       	rcall	.+402    	; 0x472 <nrf24_setupPins>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	cd d0       	rcall	.+410    	; 0x47e <nrf24_ce_digitalWrite>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	d1 c0       	rjmp	.+418    	; 0x48a <nrf24_csn_digitalWrite>
 2e8:	08 95       	ret

000002ea <spi_transfer>:
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	e8 2e       	mov	r14, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	ce d0       	rcall	.+412    	; 0x496 <nrf24_sck_digitalWrite>
 2fa:	c7 e0       	ldi	r28, 0x07	; 7
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	f1 2c       	mov	r15, r1
 302:	97 01       	movw	r18, r14
 304:	0c 2e       	mov	r0, r28
 306:	02 c0       	rjmp	.+4      	; 0x30c <spi_transfer+0x22>
 308:	35 95       	asr	r19
 30a:	27 95       	ror	r18
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <spi_transfer+0x1e>
 310:	20 ff       	sbrs	r18, 0
 312:	03 c0       	rjmp	.+6      	; 0x31a <spi_transfer+0x30>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	c5 d0       	rcall	.+394    	; 0x4a2 <nrf24_mosi_digitalWrite>
 318:	02 c0       	rjmp	.+4      	; 0x31e <spi_transfer+0x34>
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	c2 d0       	rcall	.+388    	; 0x4a2 <nrf24_mosi_digitalWrite>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	ba d0       	rcall	.+372    	; 0x496 <nrf24_sck_digitalWrite>
 322:	11 0f       	add	r17, r17
 324:	c4 d0       	rcall	.+392    	; 0x4ae <nrf24_miso_digitalRead>
 326:	81 11       	cpse	r24, r1
 328:	11 60       	ori	r17, 0x01	; 1
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	b4 d0       	rcall	.+360    	; 0x496 <nrf24_sck_digitalWrite>
 32e:	21 97       	sbiw	r28, 0x01	; 1
 330:	40 f7       	brcc	.-48     	; 0x302 <spi_transfer+0x18>
 332:	81 2f       	mov	r24, r17
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	08 95       	ret

00000340 <nrf24_transmitSync>:
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	66 23       	and	r22, r22
 34a:	69 f0       	breq	.+26     	; 0x366 <nrf24_transmitSync+0x26>
 34c:	ec 01       	movw	r28, r24
 34e:	61 50       	subi	r22, 0x01	; 1
 350:	06 2f       	mov	r16, r22
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	0f 5f       	subi	r16, 0xFF	; 255
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	08 0f       	add	r16, r24
 35a:	19 1f       	adc	r17, r25
 35c:	89 91       	ld	r24, Y+
 35e:	c5 df       	rcall	.-118    	; 0x2ea <spi_transfer>
 360:	c0 17       	cp	r28, r16
 362:	d1 07       	cpc	r29, r17
 364:	d9 f7       	brne	.-10     	; 0x35c <nrf24_transmitSync+0x1c>
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <nrf24_configRegister>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	c8 2f       	mov	r28, r24
 376:	d6 2f       	mov	r29, r22
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	87 d0       	rcall	.+270    	; 0x48a <nrf24_csn_digitalWrite>
 37c:	8c 2f       	mov	r24, r28
 37e:	8f 71       	andi	r24, 0x1F	; 31
 380:	80 62       	ori	r24, 0x20	; 32
 382:	b3 df       	rcall	.-154    	; 0x2ea <spi_transfer>
 384:	8d 2f       	mov	r24, r29
 386:	b1 df       	rcall	.-158    	; 0x2ea <spi_transfer>
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	7f d0       	rcall	.+254    	; 0x48a <nrf24_csn_digitalWrite>
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <nrf24_powerUpRx>:
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	7a d0       	rcall	.+244    	; 0x48a <nrf24_csn_digitalWrite>
 396:	82 ee       	ldi	r24, 0xE2	; 226
 398:	a8 df       	rcall	.-176    	; 0x2ea <spi_transfer>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	76 d0       	rcall	.+236    	; 0x48a <nrf24_csn_digitalWrite>
 39e:	60 e7       	ldi	r22, 0x70	; 112
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	e6 df       	rcall	.-52     	; 0x370 <nrf24_configRegister>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	6b d0       	rcall	.+214    	; 0x47e <nrf24_ce_digitalWrite>
 3a8:	6b e0       	ldi	r22, 0x0B	; 11
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	e1 df       	rcall	.-62     	; 0x370 <nrf24_configRegister>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	66 c0       	rjmp	.+204    	; 0x47e <nrf24_ce_digitalWrite>
 3b2:	08 95       	ret

000003b4 <nrf24_config>:
 3b4:	60 93 13 01 	sts	0x0113, r22
 3b8:	68 2f       	mov	r22, r24
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	d9 df       	rcall	.-78     	; 0x370 <nrf24_configRegister>
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e1       	ldi	r24, 0x11	; 17
 3c2:	d6 df       	rcall	.-84     	; 0x370 <nrf24_configRegister>
 3c4:	60 91 13 01 	lds	r22, 0x0113
 3c8:	82 e1       	ldi	r24, 0x12	; 18
 3ca:	d2 df       	rcall	.-92     	; 0x370 <nrf24_configRegister>
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	83 e1       	ldi	r24, 0x13	; 19
 3d0:	cf df       	rcall	.-98     	; 0x370 <nrf24_configRegister>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	84 e1       	ldi	r24, 0x14	; 20
 3d6:	cc df       	rcall	.-104    	; 0x370 <nrf24_configRegister>
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	85 e1       	ldi	r24, 0x15	; 21
 3dc:	c9 df       	rcall	.-110    	; 0x370 <nrf24_configRegister>
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	86 e1       	ldi	r24, 0x16	; 22
 3e2:	c6 df       	rcall	.-116    	; 0x370 <nrf24_configRegister>
 3e4:	66 e0       	ldi	r22, 0x06	; 6
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	c3 df       	rcall	.-122    	; 0x370 <nrf24_configRegister>
 3ea:	68 e0       	ldi	r22, 0x08	; 8
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	c0 df       	rcall	.-128    	; 0x370 <nrf24_configRegister>
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	bd df       	rcall	.-134    	; 0x370 <nrf24_configRegister>
 3f6:	63 e0       	ldi	r22, 0x03	; 3
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	ba df       	rcall	.-140    	; 0x370 <nrf24_configRegister>
 3fc:	6f e4       	ldi	r22, 0x4F	; 79
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	b7 df       	rcall	.-146    	; 0x370 <nrf24_configRegister>
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	8c e1       	ldi	r24, 0x1C	; 28
 406:	b4 df       	rcall	.-152    	; 0x370 <nrf24_configRegister>
 408:	c4 cf       	rjmp	.-120    	; 0x392 <nrf24_powerUpRx>
 40a:	08 95       	ret

0000040c <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	c8 2f       	mov	r28, r24
 416:	8b 01       	movw	r16, r22
 418:	d4 2f       	mov	r29, r20
    nrf24_csn_digitalWrite(LOW);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	36 d0       	rcall	.+108    	; 0x48a <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 41e:	8c 2f       	mov	r24, r28
 420:	8f 71       	andi	r24, 0x1F	; 31
 422:	80 62       	ori	r24, 0x20	; 32
 424:	62 df       	rcall	.-316    	; 0x2ea <spi_transfer>
    nrf24_transmitSync(value,len);
 426:	6d 2f       	mov	r22, r29
 428:	c8 01       	movw	r24, r16
 42a:	8a df       	rcall	.-236    	; 0x340 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	2d d0       	rcall	.+90     	; 0x48a <nrf24_csn_digitalWrite>
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	08 95       	ret

0000043a <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	1d d0       	rcall	.+58     	; 0x47e <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 444:	45 e0       	ldi	r20, 0x05	; 5
 446:	be 01       	movw	r22, r28
 448:	8b e0       	ldi	r24, 0x0B	; 11
 44a:	e0 df       	rcall	.-64     	; 0x40c <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	17 d0       	rcall	.+46     	; 0x47e <nrf24_ce_digitalWrite>
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 45c:	45 e0       	ldi	r20, 0x05	; 5
 45e:	bc 01       	movw	r22, r24
 460:	8a e0       	ldi	r24, 0x0A	; 10
 462:	d4 df       	rcall	.-88     	; 0x40c <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 464:	45 e0       	ldi	r20, 0x05	; 5
 466:	be 01       	movw	r22, r28
 468:	80 e1       	ldi	r24, 0x10	; 16
 46a:	d0 df       	rcall	.-96     	; 0x40c <nrf24_writeRegister>
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRE,6); // CE output
 472:	16 9a       	sbi	0x02, 6	; 2
    set_bit(DDRB,0); // CSN output
 474:	b8 9a       	sbi	0x17, 0	; 23
    set_bit(DDRB,1); // SCK output
 476:	b9 9a       	sbi	0x17, 1	; 23
    set_bit(DDRB,2); // MOSI output
 478:	ba 9a       	sbi	0x17, 2	; 23
    clr_bit(DDRB,3); // MISO input
 47a:	bb 98       	cbi	0x17, 3	; 23
 47c:	08 95       	ret

0000047e <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 47e:	88 23       	and	r24, r24
 480:	11 f0       	breq	.+4      	; 0x486 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTE,6);
 482:	1e 9a       	sbi	0x03, 6	; 3
 484:	08 95       	ret
    }
    else
    {
        clr_bit(PORTE,6);
 486:	1e 98       	cbi	0x03, 6	; 3
 488:	08 95       	ret

0000048a <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 48a:	88 23       	and	r24, r24
 48c:	11 f0       	breq	.+4      	; 0x492 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,0);
 48e:	c0 9a       	sbi	0x18, 0	; 24
 490:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,0);
 492:	c0 98       	cbi	0x18, 0	; 24
 494:	08 95       	ret

00000496 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 496:	88 23       	and	r24, r24
 498:	11 f0       	breq	.+4      	; 0x49e <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
 49a:	c1 9a       	sbi	0x18, 1	; 24
 49c:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
 49e:	c1 98       	cbi	0x18, 1	; 24
 4a0:	08 95       	ret

000004a2 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 4a2:	88 23       	and	r24, r24
 4a4:	11 f0       	breq	.+4      	; 0x4aa <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
 4a6:	c2 9a       	sbi	0x18, 2	; 24
 4a8:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
 4aa:	c2 98       	cbi	0x18, 2	; 24
 4ac:	08 95       	ret

000004ae <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,3);
 4ae:	86 b3       	in	r24, 0x16	; 22
}
 4b0:	88 70       	andi	r24, 0x08	; 8
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>

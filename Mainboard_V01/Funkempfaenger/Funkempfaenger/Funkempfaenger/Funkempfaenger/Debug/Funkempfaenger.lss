
Funkempfaenger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006e6  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001366  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051e  00000000  00000000  00001ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a78  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b83  00000000  00000000  000035c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000414a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	af c1       	rjmp	.+862    	; 0x36c <__vector_3>
   e:	00 00       	nop
  10:	6e c1       	rjmp	.+732    	; 0x2ee <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	aa d0       	rcall	.+340    	; 0x218 <main>
  c4:	0e c3       	rjmp	.+1564   	; 0x6e2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	int accu = 0;																// Define von Akku Variabel
	
																				// Daten empfangen EF
	
	return(accu);																// Wert zurückgeben
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	80 91 0a 01 	lds	r24, 0x010A
  dc:	90 91 0b 01 	lds	r25, 0x010B
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 0b 01 	sts	0x010B, r25
  e6:	80 93 0a 01 	sts	0x010A, r24
  ea:	80 91 0a 01 	lds	r24, 0x010A
  ee:	90 91 0b 01 	lds	r25, 0x010B
  f2:	8c 32       	cpi	r24, 0x2C	; 44
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	31 f4       	brne	.+12     	; 0x104 <__vector_16+0x3c>
  f8:	c4 98       	cbi	0x18, 4	; 24
  fa:	c5 98       	cbi	0x18, 5	; 24
  fc:	10 92 0b 01 	sts	0x010B, r1
 100:	10 92 0a 01 	sts	0x010A, r1
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <twi_transmit>:
 114:	9c 01       	movw	r18, r24
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	80 93 74 00 	sts	0x0074, r24
 120:	e4 e7       	ldi	r30, 0x74	; 116
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	99 23       	and	r25, r25
 128:	ec f7       	brge	.-6      	; 0x124 <twi_transmit+0x10>
 12a:	20 93 73 00 	sts	0x0073, r18
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 93 74 00 	sts	0x0074, r24
 134:	e4 e7       	ldi	r30, 0x74	; 116
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <twi_transmit+0x24>
 13e:	60 93 73 00 	sts	0x0073, r22
 142:	84 e8       	ldi	r24, 0x84	; 132
 144:	80 93 74 00 	sts	0x0074, r24
 148:	e4 e7       	ldi	r30, 0x74	; 116
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	ec f7       	brge	.-6      	; 0x14c <twi_transmit+0x38>
 152:	40 93 73 00 	sts	0x0073, r20
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	80 93 74 00 	sts	0x0074, r24
 15c:	e4 e7       	ldi	r30, 0x74	; 116
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 23       	and	r24, r24
 164:	ec f7       	brge	.-6      	; 0x160 <twi_transmit+0x4c>
 166:	84 e9       	ldi	r24, 0x94	; 148
 168:	80 93 74 00 	sts	0x0074, r24
 16c:	08 95       	ret

0000016e <rf_transimit>:
// Version:	 1.1
//////////////////////////////////////////

void rf_transimit(){
	
	data_array[0] = 0x77;
 16e:	ef e0       	ldi	r30, 0x0F	; 15
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	87 e7       	ldi	r24, 0x77	; 119
 174:	80 83       	st	Z, r24
	data_array[1] = twi_receive(EM, akku);
 176:	11 82       	std	Z+1, r1	; 0x01
	data_array[2] = PORTC;
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	82 83       	std	Z+2, r24	; 0x02
	data_array[3] = 0x00;
 17c:	13 82       	std	Z+3, r1	; 0x03
	
	
	nrf24_send(data_array);													// Datenarray versenden
 17e:	cf 01       	movw	r24, r30
 180:	0d d2       	rcall	.+1050   	; 0x59c <nrf24_send>
	while(nrf24_isSending());												// Warten bis senden beendet ist
 182:	57 d1       	rcall	.+686    	; 0x432 <nrf24_isSending>
 184:	81 11       	cpse	r24, r1
 186:	fd cf       	rjmp	.-6      	; 0x182 <rf_transimit+0x14>
	temp = nrf24_lastMessageStatus();										// Schaut ob alle Daten angekommen sind
 188:	5b d1       	rcall	.+694    	; 0x440 <nrf24_lastMessageStatus>
 18a:	80 93 0e 01 	sts	0x010E, r24

	if(temp == NRF24_TRANSMISSON_OK){
 18e:	81 11       	cpse	r24, r1
 190:	12 c0       	rjmp	.+36     	; 0x1b6 <rf_transimit+0x48>
		
		PORTF |= 0x02;
 192:	e2 e6       	ldi	r30, 0x62	; 98
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f e7       	ldi	r18, 0x7F	; 127
 19e:	88 e3       	ldi	r24, 0x38	; 56
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <rf_transimit+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <rf_transimit+0x3e>
 1ac:	00 00       	nop
		_delay_ms(25);
		PORTF |= ~(0x02);
 1ae:	80 81       	ld	r24, Z
 1b0:	8d 6f       	ori	r24, 0xFD	; 253
 1b2:	80 83       	st	Z, r24
 1b4:	13 c0       	rjmp	.+38     	; 0x1dc <rf_transimit+0x6e>
		
	}
	else if(temp == NRF24_MESSAGE_LOST){
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	89 f4       	brne	.+34     	; 0x1dc <rf_transimit+0x6e>
		
		PORTF |= 0x08;
 1ba:	e2 e6       	ldi	r30, 0x62	; 98
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 83       	st	Z, r24
 1c4:	2f e7       	ldi	r18, 0x7F	; 127
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <rf_transimit+0x5c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <rf_transimit+0x66>
 1d4:	00 00       	nop
		_delay_ms(25);
		PORTF |= ~(0x08);
 1d6:	80 81       	ld	r24, Z
 1d8:	87 6f       	ori	r24, 0xF7	; 247
 1da:	80 83       	st	Z, r24
		
	}
	nrf24_powerUpRx();
 1dc:	9b d1       	rcall	.+822    	; 0x514 <nrf24_powerUpRx>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9c e9       	ldi	r25, 0x9C	; 156
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <rf_transimit+0x74>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <rf_transimit+0x7a>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <rf_receive>:
// Version:	 1.1
//////////////////////////////////////////

int rf_receive(void){
	
	if(nrf24_dataReady()){
 1ec:	1a d2       	rcall	.+1076   	; 0x622 <nrf24_dataReady>
 1ee:	88 23       	and	r24, r24
 1f0:	51 f0       	breq	.+20     	; 0x206 <rf_receive+0x1a>
		nrf24_getData(data_array);
 1f2:	8f e0       	ldi	r24, 0x0F	; 15
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	7a d1       	rcall	.+756    	; 0x4ec <nrf24_getData>
		
		if(data_array[0] == senden){
 1f8:	80 91 0f 01 	lds	r24, 0x010F
 1fc:	87 37       	cpi	r24, 0x77	; 119
 1fe:	31 f0       	breq	.+12     	; 0x20c <rf_receive+0x20>
			
			return 1;
			
		}
		if(data_array[0] == empfangen){
 200:	88 23       	and	r24, r24
 202:	39 f0       	breq	.+14     	; 0x212 <rf_receive+0x26>
 204:	08 95       	ret
			return 2;
			
		}
		
	}
	else{ return 3; }
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	08 95       	ret
	if(nrf24_dataReady()){
		nrf24_getData(data_array);
		
		if(data_array[0] == senden){
			
			return 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	08 95       	ret
			
		}
		if(data_array[0] == empfangen){
			
			return 2;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	}
	else{ return 3; }
	
}
 216:	08 95       	ret

00000218 <main>:

/* ------------------------------------------------------------------------- */

int main(){
	
	DDRF = 0xFF;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0x01;
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	90 93 62 00 	sts	0x0062, r25
	DDRC = 0xFF;
 224:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 226:	15 ba       	out	0x15, r1	; 21
	DDRA = 0x00;
 228:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 22a:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xFF;
 22c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 22e:	18 ba       	out	0x18, r1	; 24
	
	TCCR0 |= (1<<CS00) | (1<<CS02);												// Taktteiler um den Faktor 1024
 230:	83 b7       	in	r24, 0x33	; 51
 232:	85 60       	ori	r24, 0x05	; 5
 234:	83 bf       	out	0x33, r24	; 51
	EIMSK = (1<<INT2) | (1<<INT3);												// Interrupt auf INT2 und 3 aktivieren
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	89 bf       	out	0x39, r24	; 57
	EICRA = (1<<ISC21) | (0<<ISC20) | (1<<ISC31) | (0<<ISC30);					// Auf negative flanke triggern beim interrupt
 23a:	80 ea       	ldi	r24, 0xA0	; 160
 23c:	80 93 6a 00 	sts	0x006A, r24
	TIMSK |= (1<<TOIE0);														// Timer interrupt aktivieren
 240:	87 b7       	in	r24, 0x37	; 55
 242:	81 60       	ori	r24, 0x01	; 1
 244:	87 bf       	out	0x37, r24	; 55
	sei();																		// Globale Interrupts beim Atmega128a aktivieren
 246:	78 94       	sei
	
	nrf24_init();																// Funkmodul Initialisieren
 248:	b8 d0       	rcall	.+368    	; 0x3ba <nrf24_init>
	nrf24_config(2,6);															// Den Chanel vom Funkmodul wählen und Anzahl der Byte zum übertragen angeben
 24a:	66 e0       	ldi	r22, 0x06	; 6
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	73 d1       	rcall	.+742    	; 0x536 <nrf24_config>
	nrf24_tx_address(tx_address);												// Sendeadresse festlegen ( Muss mit empfängeradresse(rx) des anden geräts übereinstimmen)
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	17 d2       	rcall	.+1070   	; 0x684 <nrf24_tx_address>
	nrf24_rx_address(rx_address);												// Empfangsadresse festlegen ( Muss mit sendeadresse(tx) des anden geräts übereinstimmen)
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	06 d2       	rcall	.+1036   	; 0x668 <nrf24_rx_address>
	TWBR |= 100;
 25c:	e0 e7       	ldi	r30, 0x70	; 112
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	84 66       	ori	r24, 0x64	; 100
 264:	80 83       	st	Z, r24
		
		switch(rf_receive()) {													// Schauen was rf_receive fuer eine aktion weitergibt
			
			case 1: rf_transimit(); break;										// Wenn 1 dann sende Daten an die Fernedienung
			case 2:																// Wenn 2
				twi_transmit(MM, motor, data_array[1]);							// Motorgeschwindigketi schicken
 266:	cf e0       	ldi	r28, 0x0F	; 15
 268:	d1 e0       	ldi	r29, 0x01	; 1
				twi_transmit(MM, servo, data_array[2]);							// Lenkung schicken
				_delay_ms(10);
				
				PORTF = (data_array[2]);
 26a:	02 e6       	ldi	r16, 0x62	; 98
 26c:	10 e0       	ldi	r17, 0x00	; 0
	TWBR |= 100;


	while(1) {
		
		switch(rf_receive()) {													// Schauen was rf_receive fuer eine aktion weitergibt
 26e:	be df       	rcall	.-132    	; 0x1ec <rf_receive>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	91 05       	cpc	r25, r1
 274:	19 f0       	breq	.+6      	; 0x27c <main+0x64>
 276:	02 97       	sbiw	r24, 0x02	; 2
 278:	19 f0       	breq	.+6      	; 0x280 <main+0x68>
 27a:	f9 cf       	rjmp	.-14     	; 0x26e <main+0x56>
			
			case 1: rf_transimit(); break;										// Wenn 1 dann sende Daten an die Fernedienung
 27c:	78 df       	rcall	.-272    	; 0x16e <rf_transimit>
 27e:	f7 cf       	rjmp	.-18     	; 0x26e <main+0x56>
			case 2:																// Wenn 2
				twi_transmit(MM, motor, data_array[1]);							// Motorgeschwindigketi schicken
 280:	49 81       	ldd	r20, Y+1	; 0x01
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	65 e5       	ldi	r22, 0x55	; 85
 286:	8b e0       	ldi	r24, 0x0B	; 11
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	44 df       	rcall	.-376    	; 0x114 <twi_transmit>
				twi_transmit(MM, servo, data_array[2]);							// Lenkung schicken
 28c:	4a 81       	ldd	r20, Y+2	; 0x02
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	66 e6       	ldi	r22, 0x66	; 102
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	3e df       	rcall	.-388    	; 0x114 <twi_transmit>
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9c e9       	ldi	r25, 0x9C	; 156
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x84>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x8a>
 2a2:	00 00       	nop
				_delay_ms(10);
				
				PORTF = (data_array[2]);
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	f8 01       	movw	r30, r16
 2a8:	80 83       	st	Z, r24
				
				ram = data_array[3];											// Beleuchtung den Daten anpassen
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	90 93 0d 01 	sts	0x010D, r25
 2b2:	80 93 0c 01 	sts	0x010C, r24

				if ( ram  | 0x01 ){	PORTC |= 0x0F;}else{PORTC &= ~(0x0F);}
 2b6:	85 b3       	in	r24, 0x15	; 21
 2b8:	8f 60       	ori	r24, 0x0F	; 15
 2ba:	85 bb       	out	0x15, r24	; 21
 2bc:	d8 cf       	rjmp	.-80     	; 0x26e <main+0x56>

000002be <backwardsecure>:
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 2be:	c8 99       	sbic	0x19, 0	; 25
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <backwardsecure+0x12>
	
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
 2c2:	e2 e6       	ldi	r30, 0x62	; 98
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	80 83       	st	Z, r24
// Version:	 1.1
//////////////////////////////////////////

void backwardsecure(){

	while ((PINA & 0x01) == 0){
 2cc:	c8 9b       	sbis	0x19, 0	; 25
 2ce:	fb cf       	rjmp	.-10     	; 0x2c6 <backwardsecure+0x8>
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	89 e6       	ldi	r24, 0x69	; 105
 2d4:	98 e1       	ldi	r25, 0x18	; 24
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <backwardsecure+0x18>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <backwardsecure+0x22>
 2e0:	00 00       	nop
		//twi_transmit(MM, motor, sback);
		PORTF |= 0x08;
	
	}
	_delay_ms(500);
	PORTF &= ~(0x08);
 2e2:	e2 e6       	ldi	r30, 0x62	; 98
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	87 7f       	andi	r24, 0xF7	; 247
 2ea:	80 83       	st	Z, r24
 2ec:	08 95       	ret

000002ee <__vector_4>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT3_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	0f 92       	push	r0
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	
	backwardsecure();
 314:	d4 df       	rcall	.-88     	; 0x2be <backwardsecure>
	
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0b be       	out	0x3b, r0	; 59
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <forwardsecure>:
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 33c:	c9 99       	sbic	0x19, 1	; 25
 33e:	07 c0       	rjmp	.+14     	; 0x34e <forwardsecure+0x12>
			
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
 340:	e2 e6       	ldi	r30, 0x62	; 98
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	84 60       	ori	r24, 0x04	; 4
 348:	80 83       	st	Z, r24
//////////////////////////////////////////


void forwardsecure(){
	
		while ((PINA & 0x02) == 0){
 34a:	c9 9b       	sbis	0x19, 1	; 25
 34c:	fb cf       	rjmp	.-10     	; 0x344 <forwardsecure+0x8>
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	89 e6       	ldi	r24, 0x69	; 105
 352:	98 e1       	ldi	r25, 0x18	; 24
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <forwardsecure+0x18>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <forwardsecure+0x22>
 35e:	00 00       	nop
			//twi_transmit(MM, motor, sfwd);
			PORTF |= 0x04;
			
		}
		_delay_ms(500);
		PORTF &= ~(0x04);
 360:	e2 e6       	ldi	r30, 0x62	; 98
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	80 83       	st	Z, r24
 36a:	08 95       	ret

0000036c <__vector_3>:
	
}

/* ------------------------------------------------------------------------- */

ISR(INT2_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	0b b6       	in	r0, 0x3b	; 59
 378:	0f 92       	push	r0
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	
	forwardsecure();
 392:	d4 df       	rcall	.-88     	; 0x33c <forwardsecure>
	
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0b be       	out	0x3b, r0	; 59
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 3ba:	72 d1       	rcall	.+740    	; 0x6a0 <nrf24_setupPins>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	76 d1       	rcall	.+748    	; 0x6ac <nrf24_ce_digitalWrite>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	7a c1       	rjmp	.+756    	; 0x6b8 <nrf24_csn_digitalWrite>
 3c4:	08 95       	ret

000003c6 <spi_transfer>:
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	e8 2e       	mov	r14, r24
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	77 d1       	rcall	.+750    	; 0x6c4 <nrf24_sck_digitalWrite>
 3d6:	c7 e0       	ldi	r28, 0x07	; 7
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	10 e0       	ldi	r17, 0x00	; 0
 3dc:	f1 2c       	mov	r15, r1
 3de:	97 01       	movw	r18, r14
 3e0:	0c 2e       	mov	r0, r28
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <spi_transfer+0x22>
 3e4:	35 95       	asr	r19
 3e6:	27 95       	ror	r18
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <spi_transfer+0x1e>
 3ec:	20 ff       	sbrs	r18, 0
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <spi_transfer+0x30>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	6e d1       	rcall	.+732    	; 0x6d0 <nrf24_mosi_digitalWrite>
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <spi_transfer+0x34>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	6b d1       	rcall	.+726    	; 0x6d0 <nrf24_mosi_digitalWrite>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	63 d1       	rcall	.+710    	; 0x6c4 <nrf24_sck_digitalWrite>
 3fe:	11 0f       	add	r17, r17
 400:	6d d1       	rcall	.+730    	; 0x6dc <nrf24_miso_digitalRead>
 402:	81 11       	cpse	r24, r1
 404:	11 60       	ori	r17, 0x01	; 1
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	5d d1       	rcall	.+698    	; 0x6c4 <nrf24_sck_digitalWrite>
 40a:	21 97       	sbiw	r28, 0x01	; 1
 40c:	40 f7       	brcc	.-48     	; 0x3de <spi_transfer+0x18>
 40e:	81 2f       	mov	r24, r17
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	08 95       	ret

0000041c <nrf24_getStatus>:
 41c:	cf 93       	push	r28
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	4b d1       	rcall	.+662    	; 0x6b8 <nrf24_csn_digitalWrite>
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	d0 df       	rcall	.-96     	; 0x3c6 <spi_transfer>
 426:	c8 2f       	mov	r28, r24
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	46 d1       	rcall	.+652    	; 0x6b8 <nrf24_csn_digitalWrite>
 42c:	8c 2f       	mov	r24, r28
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <nrf24_isSending>:
 432:	f4 df       	rcall	.-24     	; 0x41c <nrf24_getStatus>
 434:	98 2f       	mov	r25, r24
 436:	90 73       	andi	r25, 0x30	; 48
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	09 f0       	breq	.+2      	; 0x43e <nrf24_isSending+0xc>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret

00000440 <nrf24_lastMessageStatus>:
 440:	ed df       	rcall	.-38     	; 0x41c <nrf24_getStatus>
 442:	85 fd       	sbrc	r24, 5
 444:	04 c0       	rjmp	.+8      	; 0x44e <nrf24_lastMessageStatus+0xe>
 446:	84 fd       	sbrc	r24, 4
 448:	04 c0       	rjmp	.+8      	; 0x452 <nrf24_lastMessageStatus+0x12>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	08 95       	ret
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret

00000456 <nrf24_transferSync>:
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	44 23       	and	r20, r20
 464:	99 f0       	breq	.+38     	; 0x48c <nrf24_transferSync+0x36>
 466:	ec 01       	movw	r28, r24
 468:	06 2f       	mov	r16, r22
 46a:	17 2f       	mov	r17, r23
 46c:	41 50       	subi	r20, 0x01	; 1
 46e:	e4 2e       	mov	r14, r20
 470:	f1 2c       	mov	r15, r1
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	e2 1a       	sub	r14, r18
 476:	f2 0a       	sbc	r15, r18
 478:	e8 0e       	add	r14, r24
 47a:	f9 1e       	adc	r15, r25
 47c:	89 91       	ld	r24, Y+
 47e:	a3 df       	rcall	.-186    	; 0x3c6 <spi_transfer>
 480:	f8 01       	movw	r30, r16
 482:	81 93       	st	Z+, r24
 484:	8f 01       	movw	r16, r30
 486:	ce 15       	cp	r28, r14
 488:	df 05       	cpc	r29, r15
 48a:	c1 f7       	brne	.-16     	; 0x47c <nrf24_transferSync+0x26>
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	08 95       	ret

0000049a <nrf24_transmitSync>:
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	66 23       	and	r22, r22
 4a4:	69 f0       	breq	.+26     	; 0x4c0 <nrf24_transmitSync+0x26>
 4a6:	ec 01       	movw	r28, r24
 4a8:	61 50       	subi	r22, 0x01	; 1
 4aa:	06 2f       	mov	r16, r22
 4ac:	10 e0       	ldi	r17, 0x00	; 0
 4ae:	0f 5f       	subi	r16, 0xFF	; 255
 4b0:	1f 4f       	sbci	r17, 0xFF	; 255
 4b2:	08 0f       	add	r16, r24
 4b4:	19 1f       	adc	r17, r25
 4b6:	89 91       	ld	r24, Y+
 4b8:	86 df       	rcall	.-244    	; 0x3c6 <spi_transfer>
 4ba:	c0 17       	cp	r28, r16
 4bc:	d1 07       	cpc	r29, r17
 4be:	d9 f7       	brne	.-10     	; 0x4b6 <nrf24_transmitSync+0x1c>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	08 95       	ret

000004ca <nrf24_configRegister>:
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	c8 2f       	mov	r28, r24
 4d0:	d6 2f       	mov	r29, r22
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	f1 d0       	rcall	.+482    	; 0x6b8 <nrf24_csn_digitalWrite>
 4d6:	8c 2f       	mov	r24, r28
 4d8:	8f 71       	andi	r24, 0x1F	; 31
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	74 df       	rcall	.-280    	; 0x3c6 <spi_transfer>
 4de:	8d 2f       	mov	r24, r29
 4e0:	72 df       	rcall	.-284    	; 0x3c6 <spi_transfer>
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	e9 d0       	rcall	.+466    	; 0x6b8 <nrf24_csn_digitalWrite>
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <nrf24_getData>:
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ec 01       	movw	r28, r24
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	e1 d0       	rcall	.+450    	; 0x6b8 <nrf24_csn_digitalWrite>
 4f6:	81 e6       	ldi	r24, 0x61	; 97
 4f8:	66 df       	rcall	.-308    	; 0x3c6 <spi_transfer>
 4fa:	40 91 15 01 	lds	r20, 0x0115
 4fe:	be 01       	movw	r22, r28
 500:	ce 01       	movw	r24, r28
 502:	a9 df       	rcall	.-174    	; 0x456 <nrf24_transferSync>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	d8 d0       	rcall	.+432    	; 0x6b8 <nrf24_csn_digitalWrite>
 508:	60 e4       	ldi	r22, 0x40	; 64
 50a:	87 e0       	ldi	r24, 0x07	; 7
 50c:	de df       	rcall	.-68     	; 0x4ca <nrf24_configRegister>
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <nrf24_powerUpRx>:
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	d0 d0       	rcall	.+416    	; 0x6b8 <nrf24_csn_digitalWrite>
 518:	82 ee       	ldi	r24, 0xE2	; 226
 51a:	55 df       	rcall	.-342    	; 0x3c6 <spi_transfer>
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	cc d0       	rcall	.+408    	; 0x6b8 <nrf24_csn_digitalWrite>
 520:	60 e7       	ldi	r22, 0x70	; 112
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	d2 df       	rcall	.-92     	; 0x4ca <nrf24_configRegister>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	c1 d0       	rcall	.+386    	; 0x6ac <nrf24_ce_digitalWrite>
 52a:	6b e0       	ldi	r22, 0x0B	; 11
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	cd df       	rcall	.-102    	; 0x4ca <nrf24_configRegister>
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	bc c0       	rjmp	.+376    	; 0x6ac <nrf24_ce_digitalWrite>
 534:	08 95       	ret

00000536 <nrf24_config>:
 536:	60 93 15 01 	sts	0x0115, r22
 53a:	68 2f       	mov	r22, r24
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	c5 df       	rcall	.-118    	; 0x4ca <nrf24_configRegister>
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	81 e1       	ldi	r24, 0x11	; 17
 544:	c2 df       	rcall	.-124    	; 0x4ca <nrf24_configRegister>
 546:	60 91 15 01 	lds	r22, 0x0115
 54a:	82 e1       	ldi	r24, 0x12	; 18
 54c:	be df       	rcall	.-132    	; 0x4ca <nrf24_configRegister>
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	83 e1       	ldi	r24, 0x13	; 19
 552:	bb df       	rcall	.-138    	; 0x4ca <nrf24_configRegister>
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	84 e1       	ldi	r24, 0x14	; 20
 558:	b8 df       	rcall	.-144    	; 0x4ca <nrf24_configRegister>
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	85 e1       	ldi	r24, 0x15	; 21
 55e:	b5 df       	rcall	.-150    	; 0x4ca <nrf24_configRegister>
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	86 e1       	ldi	r24, 0x16	; 22
 564:	b2 df       	rcall	.-156    	; 0x4ca <nrf24_configRegister>
 566:	66 e0       	ldi	r22, 0x06	; 6
 568:	86 e0       	ldi	r24, 0x06	; 6
 56a:	af df       	rcall	.-162    	; 0x4ca <nrf24_configRegister>
 56c:	68 e0       	ldi	r22, 0x08	; 8
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	ac df       	rcall	.-168    	; 0x4ca <nrf24_configRegister>
 572:	63 e0       	ldi	r22, 0x03	; 3
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	a9 df       	rcall	.-174    	; 0x4ca <nrf24_configRegister>
 578:	63 e0       	ldi	r22, 0x03	; 3
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	a6 df       	rcall	.-180    	; 0x4ca <nrf24_configRegister>
 57e:	6f e4       	ldi	r22, 0x4F	; 79
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	a3 df       	rcall	.-186    	; 0x4ca <nrf24_configRegister>
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	8c e1       	ldi	r24, 0x1C	; 28
 588:	a0 df       	rcall	.-192    	; 0x4ca <nrf24_configRegister>
 58a:	c4 cf       	rjmp	.-120    	; 0x514 <nrf24_powerUpRx>
 58c:	08 95       	ret

0000058e <nrf24_powerUpTx>:
 58e:	60 e7       	ldi	r22, 0x70	; 112
 590:	87 e0       	ldi	r24, 0x07	; 7
 592:	9b df       	rcall	.-202    	; 0x4ca <nrf24_configRegister>
 594:	6a e0       	ldi	r22, 0x0A	; 10
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	98 cf       	rjmp	.-208    	; 0x4ca <nrf24_configRegister>
 59a:	08 95       	ret

0000059c <nrf24_send>:
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	ec 01       	movw	r28, r24
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	83 d0       	rcall	.+262    	; 0x6ac <nrf24_ce_digitalWrite>
 5a6:	f3 df       	rcall	.-26     	; 0x58e <nrf24_powerUpTx>
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	86 d0       	rcall	.+268    	; 0x6b8 <nrf24_csn_digitalWrite>
 5ac:	81 ee       	ldi	r24, 0xE1	; 225
 5ae:	0b df       	rcall	.-490    	; 0x3c6 <spi_transfer>
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	82 d0       	rcall	.+260    	; 0x6b8 <nrf24_csn_digitalWrite>
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	80 d0       	rcall	.+256    	; 0x6b8 <nrf24_csn_digitalWrite>
 5b8:	80 ea       	ldi	r24, 0xA0	; 160
 5ba:	05 df       	rcall	.-502    	; 0x3c6 <spi_transfer>
 5bc:	60 91 15 01 	lds	r22, 0x0115
 5c0:	ce 01       	movw	r24, r28
 5c2:	6b df       	rcall	.-298    	; 0x49a <nrf24_transmitSync>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	78 d0       	rcall	.+240    	; 0x6b8 <nrf24_csn_digitalWrite>
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	70 d0       	rcall	.+224    	; 0x6ac <nrf24_ce_digitalWrite>
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <nrf24_readRegister>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	08 2f       	mov	r16, r24
 5dc:	eb 01       	movw	r28, r22
 5de:	14 2f       	mov	r17, r20
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	6a d0       	rcall	.+212    	; 0x6b8 <nrf24_csn_digitalWrite>
 5e4:	80 2f       	mov	r24, r16
 5e6:	8f 71       	andi	r24, 0x1F	; 31
 5e8:	ee de       	rcall	.-548    	; 0x3c6 <spi_transfer>
 5ea:	41 2f       	mov	r20, r17
 5ec:	be 01       	movw	r22, r28
 5ee:	ce 01       	movw	r24, r28
 5f0:	32 df       	rcall	.-412    	; 0x456 <nrf24_transferSync>
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	61 d0       	rcall	.+194    	; 0x6b8 <nrf24_csn_digitalWrite>
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	08 95       	ret

00000600 <nrf24_rxFifoEmpty>:
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	1f 92       	push	r1
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	be 01       	movw	r22, r28
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	87 e1       	ldi	r24, 0x17	; 23
 614:	de df       	rcall	.-68     	; 0x5d2 <nrf24_readRegister>
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	81 70       	andi	r24, 0x01	; 1
 61a:	0f 90       	pop	r0
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <nrf24_dataReady>:
 622:	fc de       	rcall	.-520    	; 0x41c <nrf24_getStatus>
 624:	86 fd       	sbrc	r24, 6
 626:	06 c0       	rjmp	.+12     	; 0x634 <nrf24_dataReady+0x12>
 628:	eb df       	rcall	.-42     	; 0x600 <nrf24_rxFifoEmpty>
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	88 23       	and	r24, r24
 62e:	19 f0       	breq	.+6      	; 0x636 <nrf24_dataReady+0x14>
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	01 c0       	rjmp	.+2      	; 0x636 <nrf24_dataReady+0x14>
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	89 2f       	mov	r24, r25
 638:	08 95       	ret

0000063a <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 63a:	0f 93       	push	r16
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	c8 2f       	mov	r28, r24
 644:	8b 01       	movw	r16, r22
 646:	d4 2f       	mov	r29, r20
    nrf24_csn_digitalWrite(LOW);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	36 d0       	rcall	.+108    	; 0x6b8 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 64c:	8c 2f       	mov	r24, r28
 64e:	8f 71       	andi	r24, 0x1F	; 31
 650:	80 62       	ori	r24, 0x20	; 32
 652:	b9 de       	rcall	.-654    	; 0x3c6 <spi_transfer>
    nrf24_transmitSync(value,len);
 654:	6d 2f       	mov	r22, r29
 656:	c8 01       	movw	r24, r16
 658:	20 df       	rcall	.-448    	; 0x49a <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	2d d0       	rcall	.+90     	; 0x6b8 <nrf24_csn_digitalWrite>
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	08 95       	ret

00000668 <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	1d d0       	rcall	.+58     	; 0x6ac <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 672:	45 e0       	ldi	r20, 0x05	; 5
 674:	be 01       	movw	r22, r28
 676:	8b e0       	ldi	r24, 0x0B	; 11
 678:	e0 df       	rcall	.-64     	; 0x63a <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	17 d0       	rcall	.+46     	; 0x6ac <nrf24_ce_digitalWrite>
}
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 68a:	45 e0       	ldi	r20, 0x05	; 5
 68c:	bc 01       	movw	r22, r24
 68e:	8a e0       	ldi	r24, 0x0A	; 10
 690:	d4 df       	rcall	.-88     	; 0x63a <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 692:	45 e0       	ldi	r20, 0x05	; 5
 694:	be 01       	movw	r22, r28
 696:	80 e1       	ldi	r24, 0x10	; 16
 698:	d0 df       	rcall	.-96     	; 0x63a <nrf24_writeRegister>
}
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRE,6); // CE output
 6a0:	16 9a       	sbi	0x02, 6	; 2
    set_bit(DDRB,0); // CSN output
 6a2:	b8 9a       	sbi	0x17, 0	; 23
    set_bit(DDRB,1); // SCK output
 6a4:	b9 9a       	sbi	0x17, 1	; 23
    set_bit(DDRB,2); // MOSI output
 6a6:	ba 9a       	sbi	0x17, 2	; 23
    clr_bit(DDRB,3); // MISO input
 6a8:	bb 98       	cbi	0x17, 3	; 23
 6aa:	08 95       	ret

000006ac <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 6ac:	88 23       	and	r24, r24
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTE,6);
 6b0:	1e 9a       	sbi	0x03, 6	; 3
 6b2:	08 95       	ret
    }
    else
    {
        clr_bit(PORTE,6);
 6b4:	1e 98       	cbi	0x03, 6	; 3
 6b6:	08 95       	ret

000006b8 <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 6b8:	88 23       	and	r24, r24
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,0);
 6bc:	c0 9a       	sbi	0x18, 0	; 24
 6be:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,0);
 6c0:	c0 98       	cbi	0x18, 0	; 24
 6c2:	08 95       	ret

000006c4 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 6c4:	88 23       	and	r24, r24
 6c6:	11 f0       	breq	.+4      	; 0x6cc <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
 6c8:	c1 9a       	sbi	0x18, 1	; 24
 6ca:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
 6cc:	c1 98       	cbi	0x18, 1	; 24
 6ce:	08 95       	ret

000006d0 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 6d0:	88 23       	and	r24, r24
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
 6d4:	c2 9a       	sbi	0x18, 2	; 24
 6d6:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
 6d8:	c2 98       	cbi	0x18, 2	; 24
 6da:	08 95       	ret

000006dc <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,3);
 6dc:	86 b3       	in	r24, 0x16	; 22
}
 6de:	88 70       	andi	r24, 0x08	; 8
 6e0:	08 95       	ret

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>


ENERGY_MANAGEMENT_V0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d9  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a3  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032f  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b0  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000389  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000023a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 04 	call	0x888	; 0x888 <main>
  78:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <powermanagement_init>:
* inits the general powermanagement
*
* @return Voltage
*/
void powermanagement_init()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PORTD4);                 //Set tristate for ENABLE_MCU
  88:	8a e2       	ldi	r24, 0x2A	; 42
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2a e2       	ldi	r18, 0x2A	; 42
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	20 61       	ori	r18, 0x10	; 16
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	DDRB |= (1<<PORTB0);                 //Set tristate for CRUISE_CONTROL
  9a:	84 e2       	ldi	r24, 0x24	; 36
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	24 e2       	ldi	r18, 0x24	; 36
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	21 60       	ori	r18, 0x01	; 1
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <adc_init>:
* inits the adc with the corresponding channel
*
* @param Channel
*/
void adc_init(int channel)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <adc_init+0x6>
  b8:	00 d0       	rcall	.+0      	; 0xba <adc_init+0x8>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX = 0x00;                        //Reset ADMUX register to 0
  c2:	8c e7       	ldi	r24, 0x7C	; 124
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	ADCSRA = 0x00;                       //Reset ADCSRA register to 0
  ca:	8a e7       	ldi	r24, 0x7A	; 122
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0);                 //Set ref to AVCC
  d2:	8c e7       	ldi	r24, 0x7C	; 124
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2c e7       	ldi	r18, 0x7C	; 124
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	20 64       	ori	r18, 0x40	; 64
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	int channel_bit = (channel);
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
	//ADMUX |= (channel << 4);           //Set channel
	
	ADMUX |= channel_bit;
  ec:	8c e7       	ldi	r24, 0x7C	; 124
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2c e7       	ldi	r18, 0x7C	; 124
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	32 2f       	mov	r19, r18
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	23 2b       	or	r18, r19
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	
	ADCSRA |= ( (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADATE) );   //Enable ADC, Star ADC, Set Clock Prescaler to 8
 102:	8a e7       	ldi	r24, 0x7A	; 122
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2a e7       	ldi	r18, 0x7A	; 122
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	23 6a       	ori	r18, 0xA3	; 163
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);
 114:	8a e7       	ldi	r24, 0x7A	; 122
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2a e7       	ldi	r18, 0x7A	; 122
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	20 64       	ori	r18, 0x40	; 64
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	
	//return 1;
}
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <adc_sample>:
* make a sample on the adc
*
* @return ADC-Value
*/
int adc_sample()
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <adc_sample+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	int result = 0;                      //Setup space for ADC result
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	19 82       	std	Y+1, r1	; 0x01
	
	result = ADCL + (ADCH << 8);         //Get 10bit result from ADC registers. Keep in mind to read ADCH!
 142:	88 e7       	ldi	r24, 0x78	; 120
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	89 e7       	ldi	r24, 0x79	; 121
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	98 2f       	mov	r25, r24
 15c:	88 27       	eor	r24, r24
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
	
	return result;
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <get_five_rail>:
* Returns the actual voltage on the five Volt rail
*
* @return Voltage
*/
float get_five_rail()
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	62 97       	sbiw	r28, 0x12	; 18
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
	adc_init(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a8 ec       	ldi	r26, 0xC8	; 200
 196:	b2 e4       	ldi	r27, 0x42	; 66
 198:	8d 83       	std	Y+5, r24	; 0x05
 19a:	9e 83       	std	Y+6, r25	; 0x06
 19c:	af 83       	std	Y+7, r26	; 0x07
 19e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	4a ef       	ldi	r20, 0xFA	; 250
 1a6:	54 e4       	ldi	r21, 0x44	; 68
 1a8:	6d 81       	ldd	r22, Y+5	; 0x05
 1aa:	7e 81       	ldd	r23, Y+6	; 0x06
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	89 87       	std	Y+9, r24	; 0x09
 1ba:	9a 87       	std	Y+10, r25	; 0x0a
 1bc:	ab 87       	std	Y+11, r26	; 0x0b
 1be:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	69 85       	ldd	r22, Y+9	; 0x09
 1ca:	7a 85       	ldd	r23, Y+10	; 0x0a
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d0:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 1d4:	88 23       	and	r24, r24
 1d6:	2c f4       	brge	.+10     	; 0x1e2 <get_five_rail+0x6e>
		__ticks = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	9e 87       	std	Y+14, r25	; 0x0e
 1de:	8d 87       	std	Y+13, r24	; 0x0d
 1e0:	3f c0       	rjmp	.+126    	; 0x260 <get_five_rail+0xec>
	else if (__tmp > 65535)
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	3f ef       	ldi	r19, 0xFF	; 255
 1e6:	4f e7       	ldi	r20, 0x7F	; 127
 1e8:	57 e4       	ldi	r21, 0x47	; 71
 1ea:	69 85       	ldd	r22, Y+9	; 0x09
 1ec:	7a 85       	ldd	r23, Y+10	; 0x0a
 1ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f2:	0e 94 6d 07 	call	0xeda	; 0xeda <__gesf2>
 1f6:	18 16       	cp	r1, r24
 1f8:	4c f5       	brge	.+82     	; 0x24c <get_five_rail+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e2       	ldi	r20, 0x20	; 32
 200:	51 e4       	ldi	r21, 0x41	; 65
 202:	6d 81       	ldd	r22, Y+5	; 0x05
 204:	7e 81       	ldd	r23, Y+6	; 0x06
 206:	8f 81       	ldd	r24, Y+7	; 0x07
 208:	98 85       	ldd	r25, Y+8	; 0x08
 20a:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	bc 01       	movw	r22, r24
 214:	cd 01       	movw	r24, r26
 216:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	9e 87       	std	Y+14, r25	; 0x0e
 220:	8d 87       	std	Y+13, r24	; 0x0d
 222:	0f c0       	rjmp	.+30     	; 0x242 <get_five_rail+0xce>
 224:	88 ec       	ldi	r24, 0xC8	; 200
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	98 8b       	std	Y+16, r25	; 0x10
 22a:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22c:	8f 85       	ldd	r24, Y+15	; 0x0f
 22e:	98 89       	ldd	r25, Y+16	; 0x10
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <get_five_rail+0xbc>
 234:	98 8b       	std	Y+16, r25	; 0x10
 236:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 238:	8d 85       	ldd	r24, Y+13	; 0x0d
 23a:	9e 85       	ldd	r25, Y+14	; 0x0e
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	9e 87       	std	Y+14, r25	; 0x0e
 240:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	8d 85       	ldd	r24, Y+13	; 0x0d
 244:	9e 85       	ldd	r25, Y+14	; 0x0e
 246:	89 2b       	or	r24, r25
 248:	69 f7       	brne	.-38     	; 0x224 <get_five_rail+0xb0>
 24a:	14 c0       	rjmp	.+40     	; 0x274 <get_five_rail+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24c:	69 85       	ldd	r22, Y+9	; 0x09
 24e:	7a 85       	ldd	r23, Y+10	; 0x0a
 250:	8b 85       	ldd	r24, Y+11	; 0x0b
 252:	9c 85       	ldd	r25, Y+12	; 0x0c
 254:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 258:	dc 01       	movw	r26, r24
 25a:	cb 01       	movw	r24, r22
 25c:	9e 87       	std	Y+14, r25	; 0x0e
 25e:	8d 87       	std	Y+13, r24	; 0x0d
 260:	8d 85       	ldd	r24, Y+13	; 0x0d
 262:	9e 85       	ldd	r25, Y+14	; 0x0e
 264:	9a 8b       	std	Y+18, r25	; 0x12
 266:	89 8b       	std	Y+17, r24	; 0x11
 268:	89 89       	ldd	r24, Y+17	; 0x11
 26a:	9a 89       	ldd	r25, Y+18	; 0x12
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <get_five_rail+0xf8>
 270:	9a 8b       	std	Y+18, r25	; 0x12
 272:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 274:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 278:	09 2e       	mov	r0, r25
 27a:	00 0c       	add	r0, r0
 27c:	aa 0b       	sbc	r26, r26
 27e:	bb 0b       	sbc	r27, r27
 280:	bc 01       	movw	r22, r24
 282:	cd 01       	movw	r24, r26
 284:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__floatsisf>
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 ec       	ldi	r19, 0xC0	; 192
 290:	4f e7       	ldi	r20, 0x7F	; 127
 292:	54 e4       	ldi	r21, 0x44	; 68
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	23 e3       	ldi	r18, 0x33	; 51
 2a2:	33 e3       	ldi	r19, 0x33	; 51
 2a4:	43 e5       	ldi	r20, 0x53	; 83
 2a6:	50 e4       	ldi	r21, 0x40	; 64
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	ab 83       	std	Y+3, r26	; 0x03
 2ba:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*5.2;
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e2       	ldi	r20, 0x20	; 32
 2c2:	50 e4       	ldi	r21, 0x40	; 64
 2c4:	69 81       	ldd	r22, Y+1	; 0x01
 2c6:	7a 81       	ldd	r23, Y+2	; 0x02
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	9c 81       	ldd	r25, Y+4	; 0x04
 2cc:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 2d0:	dc 01       	movw	r26, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	26 e6       	ldi	r18, 0x66	; 102
 2d6:	36 e6       	ldi	r19, 0x66	; 102
 2d8:	46 ea       	ldi	r20, 0xA6	; 166
 2da:	50 e4       	ldi	r21, 0x40	; 64
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	9a 83       	std	Y+2, r25	; 0x02
 2ec:	ab 83       	std	Y+3, r26	; 0x03
 2ee:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	ab 81       	ldd	r26, Y+3	; 0x03
 2f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
 2f8:	bc 01       	movw	r22, r24
 2fa:	cd 01       	movw	r24, r26
 2fc:	62 96       	adiw	r28, 0x12	; 18
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <get_three_rail>:
* Returns the actual voltage on the three point three Volt rail
*
* @return Voltage
*/
float get_three_rail()
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	62 97       	sbiw	r28, 0x12	; 18
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
	adc_init(1);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a8 ec       	ldi	r26, 0xC8	; 200
 330:	b2 e4       	ldi	r27, 0x42	; 66
 332:	8d 83       	std	Y+5, r24	; 0x05
 334:	9e 83       	std	Y+6, r25	; 0x06
 336:	af 83       	std	Y+7, r26	; 0x07
 338:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	4a ef       	ldi	r20, 0xFA	; 250
 340:	54 e4       	ldi	r21, 0x44	; 68
 342:	6d 81       	ldd	r22, Y+5	; 0x05
 344:	7e 81       	ldd	r23, Y+6	; 0x06
 346:	8f 81       	ldd	r24, Y+7	; 0x07
 348:	98 85       	ldd	r25, Y+8	; 0x08
 34a:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 34e:	dc 01       	movw	r26, r24
 350:	cb 01       	movw	r24, r22
 352:	89 87       	std	Y+9, r24	; 0x09
 354:	9a 87       	std	Y+10, r25	; 0x0a
 356:	ab 87       	std	Y+11, r26	; 0x0b
 358:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e8       	ldi	r20, 0x80	; 128
 360:	5f e3       	ldi	r21, 0x3F	; 63
 362:	69 85       	ldd	r22, Y+9	; 0x09
 364:	7a 85       	ldd	r23, Y+10	; 0x0a
 366:	8b 85       	ldd	r24, Y+11	; 0x0b
 368:	9c 85       	ldd	r25, Y+12	; 0x0c
 36a:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 36e:	88 23       	and	r24, r24
 370:	2c f4       	brge	.+10     	; 0x37c <get_three_rail+0x6e>
		__ticks = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	9e 87       	std	Y+14, r25	; 0x0e
 378:	8d 87       	std	Y+13, r24	; 0x0d
 37a:	3f c0       	rjmp	.+126    	; 0x3fa <get_three_rail+0xec>
	else if (__tmp > 65535)
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	3f ef       	ldi	r19, 0xFF	; 255
 380:	4f e7       	ldi	r20, 0x7F	; 127
 382:	57 e4       	ldi	r21, 0x47	; 71
 384:	69 85       	ldd	r22, Y+9	; 0x09
 386:	7a 85       	ldd	r23, Y+10	; 0x0a
 388:	8b 85       	ldd	r24, Y+11	; 0x0b
 38a:	9c 85       	ldd	r25, Y+12	; 0x0c
 38c:	0e 94 6d 07 	call	0xeda	; 0xeda <__gesf2>
 390:	18 16       	cp	r1, r24
 392:	4c f5       	brge	.+82     	; 0x3e6 <get_three_rail+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e2       	ldi	r20, 0x20	; 32
 39a:	51 e4       	ldi	r21, 0x41	; 65
 39c:	6d 81       	ldd	r22, Y+5	; 0x05
 39e:	7e 81       	ldd	r23, Y+6	; 0x06
 3a0:	8f 81       	ldd	r24, Y+7	; 0x07
 3a2:	98 85       	ldd	r25, Y+8	; 0x08
 3a4:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	9e 87       	std	Y+14, r25	; 0x0e
 3ba:	8d 87       	std	Y+13, r24	; 0x0d
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <get_three_rail+0xce>
 3be:	88 ec       	ldi	r24, 0xC8	; 200
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	98 8b       	std	Y+16, r25	; 0x10
 3c4:	8f 87       	std	Y+15, r24	; 0x0f
 3c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 3c8:	98 89       	ldd	r25, Y+16	; 0x10
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <get_three_rail+0xbc>
 3ce:	98 8b       	std	Y+16, r25	; 0x10
 3d0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	9e 87       	std	Y+14, r25	; 0x0e
 3da:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3de:	9e 85       	ldd	r25, Y+14	; 0x0e
 3e0:	89 2b       	or	r24, r25
 3e2:	69 f7       	brne	.-38     	; 0x3be <get_three_rail+0xb0>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <get_three_rail+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e6:	69 85       	ldd	r22, Y+9	; 0x09
 3e8:	7a 85       	ldd	r23, Y+10	; 0x0a
 3ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 3ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ee:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 3f2:	dc 01       	movw	r26, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	9e 87       	std	Y+14, r25	; 0x0e
 3f8:	8d 87       	std	Y+13, r24	; 0x0d
 3fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 3fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 3fe:	9a 8b       	std	Y+18, r25	; 0x12
 400:	89 8b       	std	Y+17, r24	; 0x11
 402:	89 89       	ldd	r24, Y+17	; 0x11
 404:	9a 89       	ldd	r25, Y+18	; 0x12
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <get_three_rail+0xf8>
 40a:	9a 8b       	std	Y+18, r25	; 0x12
 40c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 40e:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 412:	09 2e       	mov	r0, r25
 414:	00 0c       	add	r0, r0
 416:	aa 0b       	sbc	r26, r26
 418:	bb 0b       	sbc	r27, r27
 41a:	bc 01       	movw	r22, r24
 41c:	cd 01       	movw	r24, r26
 41e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__floatsisf>
 422:	dc 01       	movw	r26, r24
 424:	cb 01       	movw	r24, r22
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 ec       	ldi	r19, 0xC0	; 192
 42a:	4f e7       	ldi	r20, 0x7F	; 127
 42c:	54 e4       	ldi	r21, 0x44	; 68
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 436:	dc 01       	movw	r26, r24
 438:	cb 01       	movw	r24, r22
 43a:	23 e3       	ldi	r18, 0x33	; 51
 43c:	33 e3       	ldi	r19, 0x33	; 51
 43e:	43 e5       	ldi	r20, 0x53	; 83
 440:	50 e4       	ldi	r21, 0x40	; 64
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	ab 83       	std	Y+3, r26	; 0x03
 454:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*3.4;
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e2       	ldi	r20, 0x20	; 32
 45c:	50 e4       	ldi	r21, 0x40	; 64
 45e:	69 81       	ldd	r22, Y+1	; 0x01
 460:	7a 81       	ldd	r23, Y+2	; 0x02
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	9c 81       	ldd	r25, Y+4	; 0x04
 466:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 46a:	dc 01       	movw	r26, r24
 46c:	cb 01       	movw	r24, r22
 46e:	2a e9       	ldi	r18, 0x9A	; 154
 470:	39 e9       	ldi	r19, 0x99	; 153
 472:	49 e5       	ldi	r20, 0x59	; 89
 474:	50 e4       	ldi	r21, 0x40	; 64
 476:	bc 01       	movw	r22, r24
 478:	cd 01       	movw	r24, r26
 47a:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	ab 83       	std	Y+3, r26	; 0x03
 488:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	ab 81       	ldd	r26, Y+3	; 0x03
 490:	bc 81       	ldd	r27, Y+4	; 0x04
}
 492:	bc 01       	movw	r22, r24
 494:	cd 01       	movw	r24, r26
 496:	62 96       	adiw	r28, 0x12	; 18
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <get_current>:
* Returns the actual current consumption (Not yet implemented!!)
*
* @return Current
*/
float get_current()
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	62 97       	sbiw	r28, 0x12	; 18
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
	adc_init(2);
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	a8 ec       	ldi	r26, 0xC8	; 200
 4ca:	b2 e4       	ldi	r27, 0x42	; 66
 4cc:	8d 83       	std	Y+5, r24	; 0x05
 4ce:	9e 83       	std	Y+6, r25	; 0x06
 4d0:	af 83       	std	Y+7, r26	; 0x07
 4d2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	4a ef       	ldi	r20, 0xFA	; 250
 4da:	54 e4       	ldi	r21, 0x44	; 68
 4dc:	6d 81       	ldd	r22, Y+5	; 0x05
 4de:	7e 81       	ldd	r23, Y+6	; 0x06
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 4e8:	dc 01       	movw	r26, r24
 4ea:	cb 01       	movw	r24, r22
 4ec:	89 87       	std	Y+9, r24	; 0x09
 4ee:	9a 87       	std	Y+10, r25	; 0x0a
 4f0:	ab 87       	std	Y+11, r26	; 0x0b
 4f2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e8       	ldi	r20, 0x80	; 128
 4fa:	5f e3       	ldi	r21, 0x3F	; 63
 4fc:	69 85       	ldd	r22, Y+9	; 0x09
 4fe:	7a 85       	ldd	r23, Y+10	; 0x0a
 500:	8b 85       	ldd	r24, Y+11	; 0x0b
 502:	9c 85       	ldd	r25, Y+12	; 0x0c
 504:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 508:	88 23       	and	r24, r24
 50a:	2c f4       	brge	.+10     	; 0x516 <get_current+0x6e>
		__ticks = 1;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9e 87       	std	Y+14, r25	; 0x0e
 512:	8d 87       	std	Y+13, r24	; 0x0d
 514:	3f c0       	rjmp	.+126    	; 0x594 <get_current+0xec>
	else if (__tmp > 65535)
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	3f ef       	ldi	r19, 0xFF	; 255
 51a:	4f e7       	ldi	r20, 0x7F	; 127
 51c:	57 e4       	ldi	r21, 0x47	; 71
 51e:	69 85       	ldd	r22, Y+9	; 0x09
 520:	7a 85       	ldd	r23, Y+10	; 0x0a
 522:	8b 85       	ldd	r24, Y+11	; 0x0b
 524:	9c 85       	ldd	r25, Y+12	; 0x0c
 526:	0e 94 6d 07 	call	0xeda	; 0xeda <__gesf2>
 52a:	18 16       	cp	r1, r24
 52c:	4c f5       	brge	.+82     	; 0x580 <get_current+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e2       	ldi	r20, 0x20	; 32
 534:	51 e4       	ldi	r21, 0x41	; 65
 536:	6d 81       	ldd	r22, Y+5	; 0x05
 538:	7e 81       	ldd	r23, Y+6	; 0x06
 53a:	8f 81       	ldd	r24, Y+7	; 0x07
 53c:	98 85       	ldd	r25, Y+8	; 0x08
 53e:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 542:	dc 01       	movw	r26, r24
 544:	cb 01       	movw	r24, r22
 546:	bc 01       	movw	r22, r24
 548:	cd 01       	movw	r24, r26
 54a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 54e:	dc 01       	movw	r26, r24
 550:	cb 01       	movw	r24, r22
 552:	9e 87       	std	Y+14, r25	; 0x0e
 554:	8d 87       	std	Y+13, r24	; 0x0d
 556:	0f c0       	rjmp	.+30     	; 0x576 <get_current+0xce>
 558:	88 ec       	ldi	r24, 0xC8	; 200
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	98 8b       	std	Y+16, r25	; 0x10
 55e:	8f 87       	std	Y+15, r24	; 0x0f
 560:	8f 85       	ldd	r24, Y+15	; 0x0f
 562:	98 89       	ldd	r25, Y+16	; 0x10
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <get_current+0xbc>
 568:	98 8b       	std	Y+16, r25	; 0x10
 56a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 56c:	8d 85       	ldd	r24, Y+13	; 0x0d
 56e:	9e 85       	ldd	r25, Y+14	; 0x0e
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	9e 87       	std	Y+14, r25	; 0x0e
 574:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 576:	8d 85       	ldd	r24, Y+13	; 0x0d
 578:	9e 85       	ldd	r25, Y+14	; 0x0e
 57a:	89 2b       	or	r24, r25
 57c:	69 f7       	brne	.-38     	; 0x558 <get_current+0xb0>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <get_current+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 580:	69 85       	ldd	r22, Y+9	; 0x09
 582:	7a 85       	ldd	r23, Y+10	; 0x0a
 584:	8b 85       	ldd	r24, Y+11	; 0x0b
 586:	9c 85       	ldd	r25, Y+12	; 0x0c
 588:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 58c:	dc 01       	movw	r26, r24
 58e:	cb 01       	movw	r24, r22
 590:	9e 87       	std	Y+14, r25	; 0x0e
 592:	8d 87       	std	Y+13, r24	; 0x0d
 594:	8d 85       	ldd	r24, Y+13	; 0x0d
 596:	9e 85       	ldd	r25, Y+14	; 0x0e
 598:	9a 8b       	std	Y+18, r25	; 0x12
 59a:	89 8b       	std	Y+17, r24	; 0x11
 59c:	89 89       	ldd	r24, Y+17	; 0x11
 59e:	9a 89       	ldd	r25, Y+18	; 0x12
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <get_current+0xf8>
 5a4:	9a 8b       	std	Y+18, r25	; 0x12
 5a6:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 5a8:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 5ac:	09 2e       	mov	r0, r25
 5ae:	00 0c       	add	r0, r0
 5b0:	aa 0b       	sbc	r26, r26
 5b2:	bb 0b       	sbc	r27, r27
 5b4:	bc 01       	movw	r22, r24
 5b6:	cd 01       	movw	r24, r26
 5b8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__floatsisf>
 5bc:	dc 01       	movw	r26, r24
 5be:	cb 01       	movw	r24, r22
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 ec       	ldi	r19, 0xC0	; 192
 5c4:	4f e7       	ldi	r20, 0x7F	; 127
 5c6:	54 e4       	ldi	r21, 0x44	; 68
 5c8:	bc 01       	movw	r22, r24
 5ca:	cd 01       	movw	r24, r26
 5cc:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 5d0:	dc 01       	movw	r26, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	23 e3       	ldi	r18, 0x33	; 51
 5d6:	33 e3       	ldi	r19, 0x33	; 51
 5d8:	43 e5       	ldi	r20, 0x53	; 83
 5da:	50 e4       	ldi	r21, 0x40	; 64
 5dc:	bc 01       	movw	r22, r24
 5de:	cd 01       	movw	r24, r26
 5e0:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 5e4:	dc 01       	movw	r26, r24
 5e6:	cb 01       	movw	r24, r22
 5e8:	89 83       	std	Y+1, r24	; 0x01
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	ab 83       	std	Y+3, r26	; 0x03
 5ee:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*0;
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e2       	ldi	r20, 0x20	; 32
 5f6:	50 e4       	ldi	r21, 0x40	; 64
 5f8:	69 81       	ldd	r22, Y+1	; 0x01
 5fa:	7a 81       	ldd	r23, Y+2	; 0x02
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 604:	dc 01       	movw	r26, r24
 606:	cb 01       	movw	r24, r22
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a9 01       	movw	r20, r18
 60e:	bc 01       	movw	r22, r24
 610:	cd 01       	movw	r24, r26
 612:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 616:	dc 01       	movw	r26, r24
 618:	cb 01       	movw	r24, r22
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	9a 83       	std	Y+2, r25	; 0x02
 61e:	ab 83       	std	Y+3, r26	; 0x03
 620:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	9a 81       	ldd	r25, Y+2	; 0x02
 626:	ab 81       	ldd	r26, Y+3	; 0x03
 628:	bc 81       	ldd	r27, Y+4	; 0x04
}
 62a:	bc 01       	movw	r22, r24
 62c:	cd 01       	movw	r24, r26
 62e:	62 96       	adiw	r28, 0x12	; 18
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <get_lipo>:
* Returns the actual lipo voltage
*
* @return Voltage
*/
float get_lipo()
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	62 97       	sbiw	r28, 0x12	; 18
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
	adc_init(3);
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	a8 ec       	ldi	r26, 0xC8	; 200
 662:	b2 e4       	ldi	r27, 0x42	; 66
 664:	8d 83       	std	Y+5, r24	; 0x05
 666:	9e 83       	std	Y+6, r25	; 0x06
 668:	af 83       	std	Y+7, r26	; 0x07
 66a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	4a ef       	ldi	r20, 0xFA	; 250
 672:	54 e4       	ldi	r21, 0x44	; 68
 674:	6d 81       	ldd	r22, Y+5	; 0x05
 676:	7e 81       	ldd	r23, Y+6	; 0x06
 678:	8f 81       	ldd	r24, Y+7	; 0x07
 67a:	98 85       	ldd	r25, Y+8	; 0x08
 67c:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 680:	dc 01       	movw	r26, r24
 682:	cb 01       	movw	r24, r22
 684:	89 87       	std	Y+9, r24	; 0x09
 686:	9a 87       	std	Y+10, r25	; 0x0a
 688:	ab 87       	std	Y+11, r26	; 0x0b
 68a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	40 e8       	ldi	r20, 0x80	; 128
 692:	5f e3       	ldi	r21, 0x3F	; 63
 694:	69 85       	ldd	r22, Y+9	; 0x09
 696:	7a 85       	ldd	r23, Y+10	; 0x0a
 698:	8b 85       	ldd	r24, Y+11	; 0x0b
 69a:	9c 85       	ldd	r25, Y+12	; 0x0c
 69c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 6a0:	88 23       	and	r24, r24
 6a2:	2c f4       	brge	.+10     	; 0x6ae <get_lipo+0x6e>
		__ticks = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	9e 87       	std	Y+14, r25	; 0x0e
 6aa:	8d 87       	std	Y+13, r24	; 0x0d
 6ac:	3f c0       	rjmp	.+126    	; 0x72c <get_lipo+0xec>
	else if (__tmp > 65535)
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	3f ef       	ldi	r19, 0xFF	; 255
 6b2:	4f e7       	ldi	r20, 0x7F	; 127
 6b4:	57 e4       	ldi	r21, 0x47	; 71
 6b6:	69 85       	ldd	r22, Y+9	; 0x09
 6b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 6ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 6bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 6be:	0e 94 6d 07 	call	0xeda	; 0xeda <__gesf2>
 6c2:	18 16       	cp	r1, r24
 6c4:	4c f5       	brge	.+82     	; 0x718 <get_lipo+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	40 e2       	ldi	r20, 0x20	; 32
 6cc:	51 e4       	ldi	r21, 0x41	; 65
 6ce:	6d 81       	ldd	r22, Y+5	; 0x05
 6d0:	7e 81       	ldd	r23, Y+6	; 0x06
 6d2:	8f 81       	ldd	r24, Y+7	; 0x07
 6d4:	98 85       	ldd	r25, Y+8	; 0x08
 6d6:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 6da:	dc 01       	movw	r26, r24
 6dc:	cb 01       	movw	r24, r22
 6de:	bc 01       	movw	r22, r24
 6e0:	cd 01       	movw	r24, r26
 6e2:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 6e6:	dc 01       	movw	r26, r24
 6e8:	cb 01       	movw	r24, r22
 6ea:	9e 87       	std	Y+14, r25	; 0x0e
 6ec:	8d 87       	std	Y+13, r24	; 0x0d
 6ee:	0f c0       	rjmp	.+30     	; 0x70e <get_lipo+0xce>
 6f0:	88 ec       	ldi	r24, 0xC8	; 200
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	98 8b       	std	Y+16, r25	; 0x10
 6f6:	8f 87       	std	Y+15, r24	; 0x0f
 6f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 6fa:	98 89       	ldd	r25, Y+16	; 0x10
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <get_lipo+0xbc>
 700:	98 8b       	std	Y+16, r25	; 0x10
 702:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 704:	8d 85       	ldd	r24, Y+13	; 0x0d
 706:	9e 85       	ldd	r25, Y+14	; 0x0e
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	9e 87       	std	Y+14, r25	; 0x0e
 70c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 70e:	8d 85       	ldd	r24, Y+13	; 0x0d
 710:	9e 85       	ldd	r25, Y+14	; 0x0e
 712:	89 2b       	or	r24, r25
 714:	69 f7       	brne	.-38     	; 0x6f0 <get_lipo+0xb0>
 716:	14 c0       	rjmp	.+40     	; 0x740 <get_lipo+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 718:	69 85       	ldd	r22, Y+9	; 0x09
 71a:	7a 85       	ldd	r23, Y+10	; 0x0a
 71c:	8b 85       	ldd	r24, Y+11	; 0x0b
 71e:	9c 85       	ldd	r25, Y+12	; 0x0c
 720:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 724:	dc 01       	movw	r26, r24
 726:	cb 01       	movw	r24, r22
 728:	9e 87       	std	Y+14, r25	; 0x0e
 72a:	8d 87       	std	Y+13, r24	; 0x0d
 72c:	8d 85       	ldd	r24, Y+13	; 0x0d
 72e:	9e 85       	ldd	r25, Y+14	; 0x0e
 730:	9a 8b       	std	Y+18, r25	; 0x12
 732:	89 8b       	std	Y+17, r24	; 0x11
 734:	89 89       	ldd	r24, Y+17	; 0x11
 736:	9a 89       	ldd	r25, Y+18	; 0x12
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <get_lipo+0xf8>
 73c:	9a 8b       	std	Y+18, r25	; 0x12
 73e:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 740:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 744:	09 2e       	mov	r0, r25
 746:	00 0c       	add	r0, r0
 748:	aa 0b       	sbc	r26, r26
 74a:	bb 0b       	sbc	r27, r27
 74c:	bc 01       	movw	r22, r24
 74e:	cd 01       	movw	r24, r26
 750:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__floatsisf>
 754:	dc 01       	movw	r26, r24
 756:	cb 01       	movw	r24, r22
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 ec       	ldi	r19, 0xC0	; 192
 75c:	4f e7       	ldi	r20, 0x7F	; 127
 75e:	54 e4       	ldi	r21, 0x44	; 68
 760:	bc 01       	movw	r22, r24
 762:	cd 01       	movw	r24, r26
 764:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 768:	dc 01       	movw	r26, r24
 76a:	cb 01       	movw	r24, r22
 76c:	23 e3       	ldi	r18, 0x33	; 51
 76e:	33 e3       	ldi	r19, 0x33	; 51
 770:	43 e5       	ldi	r20, 0x53	; 83
 772:	50 e4       	ldi	r21, 0x40	; 64
 774:	bc 01       	movw	r22, r24
 776:	cd 01       	movw	r24, r26
 778:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 77c:	dc 01       	movw	r26, r24
 77e:	cb 01       	movw	r24, r22
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	9a 83       	std	Y+2, r25	; 0x02
 784:	ab 83       	std	Y+3, r26	; 0x03
 786:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*12.4;
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	40 e2       	ldi	r20, 0x20	; 32
 78e:	50 e4       	ldi	r21, 0x40	; 64
 790:	69 81       	ldd	r22, Y+1	; 0x01
 792:	7a 81       	ldd	r23, Y+2	; 0x02
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	9c 81       	ldd	r25, Y+4	; 0x04
 798:	0e 94 1a 06 	call	0xc34	; 0xc34 <__divsf3>
 79c:	dc 01       	movw	r26, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	26 e6       	ldi	r18, 0x66	; 102
 7a2:	36 e6       	ldi	r19, 0x66	; 102
 7a4:	46 e4       	ldi	r20, 0x46	; 70
 7a6:	51 e4       	ldi	r21, 0x41	; 65
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 7b0:	dc 01       	movw	r26, r24
 7b2:	cb 01       	movw	r24, r22
 7b4:	89 83       	std	Y+1, r24	; 0x01
 7b6:	9a 83       	std	Y+2, r25	; 0x02
 7b8:	ab 83       	std	Y+3, r26	; 0x03
 7ba:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	9a 81       	ldd	r25, Y+2	; 0x02
 7c0:	ab 81       	ldd	r26, Y+3	; 0x03
 7c2:	bc 81       	ldd	r27, Y+4	; 0x04
}
 7c4:	bc 01       	movw	r22, r24
 7c6:	cd 01       	movw	r24, r26
 7c8:	62 96       	adiw	r28, 0x12	; 18
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <power_control>:
* Power control
*
* @param on or off
*/
void power_control(char state)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	1f 92       	push	r1
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	51 f4       	brne	.+20     	; 0x800 <power_control+0x26>
	{
		PORTD &= ~(1<<PORTD4);
 7ec:	8b e2       	ldi	r24, 0x2B	; 43
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	2b e2       	ldi	r18, 0x2B	; 43
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f9 01       	movw	r30, r18
 7f6:	20 81       	ld	r18, Z
 7f8:	2f 7e       	andi	r18, 0xEF	; 239
 7fa:	fc 01       	movw	r30, r24
 7fc:	20 83       	st	Z, r18
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <power_control+0x3e>
		
	}
	else if(state == OFF)
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	88 23       	and	r24, r24
 804:	49 f4       	brne	.+18     	; 0x818 <power_control+0x3e>
	{
		PORTD |= (1<<PORTD4);
 806:	8b e2       	ldi	r24, 0x2B	; 43
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	2b e2       	ldi	r18, 0x2B	; 43
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	f9 01       	movw	r30, r18
 810:	20 81       	ld	r18, Z
 812:	20 61       	ori	r18, 0x10	; 16
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
	}
	
	//return 1;
}
 818:	0f 90       	pop	r0
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <cc_control>:
* CruiseControl control
*
* @param on or off
*/
void cc_control(char state)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	1f 92       	push	r1
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
 82c:	89 81       	ldd	r24, Y+1	; 0x01
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	51 f4       	brne	.+20     	; 0x846 <cc_control+0x26>
	{
		PORTB |= (1<<PORTB0);
 832:	85 e2       	ldi	r24, 0x25	; 37
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	25 e2       	ldi	r18, 0x25	; 37
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	20 81       	ld	r18, Z
 83e:	21 60       	ori	r18, 0x01	; 1
 840:	fc 01       	movw	r30, r24
 842:	20 83       	st	Z, r18
 844:	0c c0       	rjmp	.+24     	; 0x85e <cc_control+0x3e>
		
	}
	else if(state == OFF)
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	88 23       	and	r24, r24
 84a:	49 f4       	brne	.+18     	; 0x85e <cc_control+0x3e>
	{
		PORTB &= ~(1<<PORTB0);
 84c:	85 e2       	ldi	r24, 0x25	; 37
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	25 e2       	ldi	r18, 0x25	; 37
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	f9 01       	movw	r30, r18
 856:	20 81       	ld	r18, Z
 858:	2e 7f       	andi	r18, 0xFE	; 254
 85a:	fc 01       	movw	r30, r24
 85c:	20 83       	st	Z, r18
	}
	
	//return 1;
}
 85e:	0f 90       	pop	r0
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <twi_init>:
/**
* TWI Init
*
*/
void twi_init(void)
{
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
	//TWI Init
	TWAR = ( 0x0A << 1 );
 86e:	8a eb       	ldi	r24, 0xBA	; 186
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	24 e1       	ldi	r18, 0x14	; 20
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
	//TWAR |= 0x01;
	TWCR = ( (1<<TWEN) | (1<<TWEA) );
 878:	8c eb       	ldi	r24, 0xBC	; 188
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	24 e4       	ldi	r18, 0x44	; 68
 87e:	fc 01       	movw	r30, r24
 880:	20 83       	st	Z, r18
}
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <main>:

int main(void)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	e6 97       	sbiw	r28, 0x36	; 54
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
	powermanagement_init();
 89c:	0e 94 40 00 	call	0x80	; 0x80 <powermanagement_init>
	
	char power_status = 1;
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	8b 83       	std	Y+3, r24	; 0x03
	char cc_status = 1;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	8c 83       	std	Y+4, r24	; 0x04
	
	float five_rail = 0;
 8a8:	1d 82       	std	Y+5, r1	; 0x05
 8aa:	1e 82       	std	Y+6, r1	; 0x06
 8ac:	1f 82       	std	Y+7, r1	; 0x07
 8ae:	18 86       	std	Y+8, r1	; 0x08
	float three_rail = 0;
 8b0:	19 86       	std	Y+9, r1	; 0x09
 8b2:	1a 86       	std	Y+10, r1	; 0x0a
 8b4:	1b 86       	std	Y+11, r1	; 0x0b
 8b6:	1c 86       	std	Y+12, r1	; 0x0c
	float current = 0;
 8b8:	1d 86       	std	Y+13, r1	; 0x0d
 8ba:	1e 86       	std	Y+14, r1	; 0x0e
 8bc:	1f 86       	std	Y+15, r1	; 0x0f
 8be:	18 8a       	std	Y+16, r1	; 0x10
	float lipo = 0;
 8c0:	19 8a       	std	Y+17, r1	; 0x11
 8c2:	1a 8a       	std	Y+18, r1	; 0x12
 8c4:	1b 8a       	std	Y+19, r1	; 0x13
 8c6:	1c 8a       	std	Y+20, r1	; 0x14
	
	int counter = 0;
 8c8:	1a 82       	std	Y+2, r1	; 0x02
 8ca:	19 82       	std	Y+1, r1	; 0x01
	
	int data = 0;
 8cc:	1e 8a       	std	Y+22, r1	; 0x16
 8ce:	1d 8a       	std	Y+21, r1	; 0x15
	int data_twi[2];

	DDRD |= ( (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) );
 8d0:	8a e2       	ldi	r24, 0x2A	; 42
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	2a e2       	ldi	r18, 0x2A	; 42
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	f9 01       	movw	r30, r18
 8da:	20 81       	ld	r18, Z
 8dc:	20 6e       	ori	r18, 0xE0	; 224
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
	
	while(1)
	{
		five_rail = get_five_rail();
 8e2:	0e 94 ba 00 	call	0x174	; 0x174 <get_five_rail>
 8e6:	dc 01       	movw	r26, r24
 8e8:	cb 01       	movw	r24, r22
 8ea:	8d 83       	std	Y+5, r24	; 0x05
 8ec:	9e 83       	std	Y+6, r25	; 0x06
 8ee:	af 83       	std	Y+7, r26	; 0x07
 8f0:	b8 87       	std	Y+8, r27	; 0x08
		three_rail = get_three_rail();
 8f2:	0e 94 87 01 	call	0x30e	; 0x30e <get_three_rail>
 8f6:	dc 01       	movw	r26, r24
 8f8:	cb 01       	movw	r24, r22
 8fa:	89 87       	std	Y+9, r24	; 0x09
 8fc:	9a 87       	std	Y+10, r25	; 0x0a
 8fe:	ab 87       	std	Y+11, r26	; 0x0b
 900:	bc 87       	std	Y+12, r27	; 0x0c
		current = get_current();
 902:	0e 94 54 02 	call	0x4a8	; 0x4a8 <get_current>
 906:	dc 01       	movw	r26, r24
 908:	cb 01       	movw	r24, r22
 90a:	8d 87       	std	Y+13, r24	; 0x0d
 90c:	9e 87       	std	Y+14, r25	; 0x0e
 90e:	af 87       	std	Y+15, r26	; 0x0f
 910:	b8 8b       	std	Y+16, r27	; 0x10
		lipo = get_lipo();
 912:	0e 94 20 03 	call	0x640	; 0x640 <get_lipo>
 916:	dc 01       	movw	r26, r24
 918:	cb 01       	movw	r24, r22
 91a:	89 8b       	std	Y+17, r24	; 0x11
 91c:	9a 8b       	std	Y+18, r25	; 0x12
 91e:	ab 8b       	std	Y+19, r26	; 0x13
 920:	bc 8b       	std	Y+20, r27	; 0x14
		
		if(lipo < 11.0)
 922:	20 e0       	ldi	r18, 0x00	; 0
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e3       	ldi	r20, 0x30	; 48
 928:	51 e4       	ldi	r21, 0x41	; 65
 92a:	69 89       	ldd	r22, Y+17	; 0x11
 92c:	7a 89       	ldd	r23, Y+18	; 0x12
 92e:	8b 89       	ldd	r24, Y+19	; 0x13
 930:	9c 89       	ldd	r25, Y+20	; 0x14
 932:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 936:	88 23       	and	r24, r24
 938:	24 f4       	brge	.+8      	; 0x942 <__stack+0x43>
		{
			//Bat. low
			power_control(0);
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	0e 94 ed 03 	call	0x7da	; 0x7da <power_control>
 940:	73 c1       	rjmp	.+742    	; 0xc28 <__stack+0x329>
		}
		else
		{
			power_control(1);
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 ed 03 	call	0x7da	; 0x7da <power_control>
			cc_control(cc_status);
 948:	8c 81       	ldd	r24, Y+4	; 0x04
 94a:	0e 94 10 04 	call	0x820	; 0x820 <cc_control>
		
			twi_init();
 94e:	0e 94 33 04 	call	0x866	; 0x866 <twi_init>
		
			switch(TWSR)        //TWDR    Unknown identifier    Error
 952:	89 eb       	ldi	r24, 0xB9	; 185
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	fc 01       	movw	r30, r24
 958:	80 81       	ld	r24, Z
 95a:	88 2f       	mov	r24, r24
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	80 38       	cpi	r24, 0x80	; 128
 960:	91 05       	cpc	r25, r1
 962:	09 f4       	brne	.+2      	; 0x966 <__stack+0x67>
 964:	c1 c0       	rjmp	.+386    	; 0xae8 <__stack+0x1e9>
 966:	80 3a       	cpi	r24, 0xA0	; 160
 968:	91 05       	cpc	r25, r1
 96a:	09 f4       	brne	.+2      	; 0x96e <__stack+0x6f>
 96c:	53 c1       	rjmp	.+678    	; 0xc14 <__stack+0x315>
 96e:	80 36       	cpi	r24, 0x60	; 96
 970:	91 05       	cpc	r25, r1
 972:	09 f0       	breq	.+2      	; 0x976 <__stack+0x77>
				case 0xA0:            /* Received Stop or Repeated Start while still addressed */
					TWCR |= ( (1<<TWINT) );                            /* Switch to not Addressed */
					break;
			
				default:
					break;
 974:	59 c1       	rjmp	.+690    	; 0xc28 <__stack+0x329>
			twi_init();
		
			switch(TWSR)        //TWDR    Unknown identifier    Error
			{
				case 0x60:
					TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 976:	8c eb       	ldi	r24, 0xBC	; 188
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	2c eb       	ldi	r18, 0xBC	; 188
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	f9 01       	movw	r30, r18
 980:	20 81       	ld	r18, Z
 982:	20 6c       	ori	r18, 0xC0	; 192
 984:	fc 01       	movw	r30, r24
 986:	20 83       	st	Z, r18
				
					while(counter < 5)
 988:	a7 c0       	rjmp	.+334    	; 0xad8 <__stack+0x1d9>
					{
						counter++;
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	9a 81       	ldd	r25, Y+2	; 0x02
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	9a 83       	std	Y+2, r25	; 0x02
 992:	89 83       	std	Y+1, r24	; 0x01
					
						if(TWSR == 0x80)
 994:	89 eb       	ldi	r24, 0xB9	; 185
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	fc 01       	movw	r30, r24
 99a:	80 81       	ld	r24, Z
 99c:	80 38       	cpi	r24, 0x80	; 128
 99e:	51 f5       	brne	.+84     	; 0x9f4 <__stack+0xf5>
						{
							data_twi[0] = TWDR;
 9a0:	8b eb       	ldi	r24, 0xBB	; 187
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	fc 01       	movw	r30, r24
 9a6:	80 81       	ld	r24, Z
 9a8:	88 2f       	mov	r24, r24
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	9c ab       	std	Y+52, r25	; 0x34
 9ae:	8b ab       	std	Y+51, r24	; 0x33
							TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 9b0:	8c eb       	ldi	r24, 0xBC	; 188
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	2c eb       	ldi	r18, 0xBC	; 188
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	f9 01       	movw	r30, r18
 9ba:	20 81       	ld	r18, Z
 9bc:	20 6c       	ori	r18, 0xC0	; 192
 9be:	fc 01       	movw	r30, r24
 9c0:	20 83       	st	Z, r18
							if(TWSR == 0x80)
 9c2:	89 eb       	ldi	r24, 0xB9	; 185
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	fc 01       	movw	r30, r24
 9c8:	80 81       	ld	r24, Z
 9ca:	80 38       	cpi	r24, 0x80	; 128
 9cc:	91 f4       	brne	.+36     	; 0x9f2 <__stack+0xf3>
							{
								data_twi[1] = TWDR;
 9ce:	8b eb       	ldi	r24, 0xBB	; 187
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	fc 01       	movw	r30, r24
 9d4:	80 81       	ld	r24, Z
 9d6:	88 2f       	mov	r24, r24
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	9e ab       	std	Y+54, r25	; 0x36
 9dc:	8d ab       	std	Y+53, r24	; 0x35
								TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 9de:	8c eb       	ldi	r24, 0xBC	; 188
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	2c eb       	ldi	r18, 0xBC	; 188
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	f9 01       	movw	r30, r18
 9e8:	20 81       	ld	r18, Z
 9ea:	20 6c       	ori	r18, 0xC0	; 192
 9ec:	fc 01       	movw	r30, r24
 9ee:	20 83       	st	Z, r18
								break;
 9f0:	78 c0       	rjmp	.+240    	; 0xae2 <__stack+0x1e3>
							}
							break;
 9f2:	77 c0       	rjmp	.+238    	; 0xae2 <__stack+0x1e3>
 9f4:	80 e0       	ldi	r24, 0x00	; 0
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	a8 ec       	ldi	r26, 0xC8	; 200
 9fa:	b2 e4       	ldi	r27, 0x42	; 66
 9fc:	8f 8b       	std	Y+23, r24	; 0x17
 9fe:	98 8f       	std	Y+24, r25	; 0x18
 a00:	a9 8f       	std	Y+25, r26	; 0x19
 a02:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 a04:	20 e0       	ldi	r18, 0x00	; 0
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	4a ef       	ldi	r20, 0xFA	; 250
 a0a:	54 e4       	ldi	r21, 0x44	; 68
 a0c:	6f 89       	ldd	r22, Y+23	; 0x17
 a0e:	78 8d       	ldd	r23, Y+24	; 0x18
 a10:	89 8d       	ldd	r24, Y+25	; 0x19
 a12:	9a 8d       	ldd	r25, Y+26	; 0x1a
 a14:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 a18:	dc 01       	movw	r26, r24
 a1a:	cb 01       	movw	r24, r22
 a1c:	8b 8f       	std	Y+27, r24	; 0x1b
 a1e:	9c 8f       	std	Y+28, r25	; 0x1c
 a20:	ad 8f       	std	Y+29, r26	; 0x1d
 a22:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	40 e8       	ldi	r20, 0x80	; 128
 a2a:	5f e3       	ldi	r21, 0x3F	; 63
 a2c:	6b 8d       	ldd	r22, Y+27	; 0x1b
 a2e:	7c 8d       	ldd	r23, Y+28	; 0x1c
 a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
 a32:	9e 8d       	ldd	r25, Y+30	; 0x1e
 a34:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 a38:	88 23       	and	r24, r24
 a3a:	2c f4       	brge	.+10     	; 0xa46 <__stack+0x147>
		__ticks = 1;
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	98 a3       	std	Y+32, r25	; 0x20
 a42:	8f 8f       	std	Y+31, r24	; 0x1f
 a44:	3f c0       	rjmp	.+126    	; 0xac4 <__stack+0x1c5>
	else if (__tmp > 65535)
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	3f ef       	ldi	r19, 0xFF	; 255
 a4a:	4f e7       	ldi	r20, 0x7F	; 127
 a4c:	57 e4       	ldi	r21, 0x47	; 71
 a4e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 a50:	7c 8d       	ldd	r23, Y+28	; 0x1c
 a52:	8d 8d       	ldd	r24, Y+29	; 0x1d
 a54:	9e 8d       	ldd	r25, Y+30	; 0x1e
 a56:	0e 94 6d 07 	call	0xeda	; 0xeda <__gesf2>
 a5a:	18 16       	cp	r1, r24
 a5c:	4c f5       	brge	.+82     	; 0xab0 <__stack+0x1b1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	40 e2       	ldi	r20, 0x20	; 32
 a64:	51 e4       	ldi	r21, 0x41	; 65
 a66:	6f 89       	ldd	r22, Y+23	; 0x17
 a68:	78 8d       	ldd	r23, Y+24	; 0x18
 a6a:	89 8d       	ldd	r24, Y+25	; 0x19
 a6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 a6e:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 a72:	dc 01       	movw	r26, r24
 a74:	cb 01       	movw	r24, r22
 a76:	bc 01       	movw	r22, r24
 a78:	cd 01       	movw	r24, r26
 a7a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 a7e:	dc 01       	movw	r26, r24
 a80:	cb 01       	movw	r24, r22
 a82:	98 a3       	std	Y+32, r25	; 0x20
 a84:	8f 8f       	std	Y+31, r24	; 0x1f
 a86:	0f c0       	rjmp	.+30     	; 0xaa6 <__stack+0x1a7>
 a88:	88 ec       	ldi	r24, 0xC8	; 200
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	9a a3       	std	Y+34, r25	; 0x22
 a8e:	89 a3       	std	Y+33, r24	; 0x21
 a90:	89 a1       	ldd	r24, Y+33	; 0x21
 a92:	9a a1       	ldd	r25, Y+34	; 0x22
 a94:	01 97       	sbiw	r24, 0x01	; 1
 a96:	f1 f7       	brne	.-4      	; 0xa94 <__stack+0x195>
 a98:	9a a3       	std	Y+34, r25	; 0x22
 a9a:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 a9e:	98 a1       	ldd	r25, Y+32	; 0x20
 aa0:	01 97       	sbiw	r24, 0x01	; 1
 aa2:	98 a3       	std	Y+32, r25	; 0x20
 aa4:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 aa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 aa8:	98 a1       	ldd	r25, Y+32	; 0x20
 aaa:	89 2b       	or	r24, r25
 aac:	69 f7       	brne	.-38     	; 0xa88 <__stack+0x189>
 aae:	14 c0       	rjmp	.+40     	; 0xad8 <__stack+0x1d9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 ab0:	6b 8d       	ldd	r22, Y+27	; 0x1b
 ab2:	7c 8d       	ldd	r23, Y+28	; 0x1c
 ab4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 ab6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 ab8:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 abc:	dc 01       	movw	r26, r24
 abe:	cb 01       	movw	r24, r22
 ac0:	98 a3       	std	Y+32, r25	; 0x20
 ac2:	8f 8f       	std	Y+31, r24	; 0x1f
 ac4:	8f 8d       	ldd	r24, Y+31	; 0x1f
 ac6:	98 a1       	ldd	r25, Y+32	; 0x20
 ac8:	9c a3       	std	Y+36, r25	; 0x24
 aca:	8b a3       	std	Y+35, r24	; 0x23
 acc:	8b a1       	ldd	r24, Y+35	; 0x23
 ace:	9c a1       	ldd	r25, Y+36	; 0x24
 ad0:	01 97       	sbiw	r24, 0x01	; 1
 ad2:	f1 f7       	brne	.-4      	; 0xad0 <__stack+0x1d1>
 ad4:	9c a3       	std	Y+36, r25	; 0x24
 ad6:	8b a3       	std	Y+35, r24	; 0x23
			switch(TWSR)        //TWDR    Unknown identifier    Error
			{
				case 0x60:
					TWCR |= ( (1<<TWINT) | (1<<TWEA) );
				
					while(counter < 5)
 ad8:	89 81       	ldd	r24, Y+1	; 0x01
 ada:	9a 81       	ldd	r25, Y+2	; 0x02
 adc:	05 97       	sbiw	r24, 0x05	; 5
 ade:	0c f4       	brge	.+2      	; 0xae2 <__stack+0x1e3>
 ae0:	54 cf       	rjmp	.-344    	; 0x98a <__stack+0x8b>
							break;
						}
						_delay_ms(100);
					}
					counter = counter;
					counter = 0;
 ae2:	1a 82       	std	Y+2, r1	; 0x02
 ae4:	19 82       	std	Y+1, r1	; 0x01
				
					break;
 ae6:	a0 c0       	rjmp	.+320    	; 0xc28 <__stack+0x329>
			
				case 0x80:
					data = TWDR;
 ae8:	8b eb       	ldi	r24, 0xBB	; 187
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	fc 01       	movw	r30, r24
 aee:	80 81       	ld	r24, Z
 af0:	88 2f       	mov	r24, r24
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	9e 8b       	std	Y+22, r25	; 0x16
 af6:	8d 8b       	std	Y+21, r24	; 0x15
					TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 af8:	8c eb       	ldi	r24, 0xBC	; 188
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	2c eb       	ldi	r18, 0xBC	; 188
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	f9 01       	movw	r30, r18
 b02:	20 81       	ld	r18, Z
 b04:	20 6c       	ori	r18, 0xC0	; 192
 b06:	fc 01       	movw	r30, r24
 b08:	20 83       	st	Z, r18
					PORTD |= ( (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) );
 b0a:	8b e2       	ldi	r24, 0x2B	; 43
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	2b e2       	ldi	r18, 0x2B	; 43
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	f9 01       	movw	r30, r18
 b14:	20 81       	ld	r18, Z
 b16:	20 6e       	ori	r18, 0xE0	; 224
 b18:	fc 01       	movw	r30, r24
 b1a:	20 83       	st	Z, r18
 b1c:	80 e0       	ldi	r24, 0x00	; 0
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	a8 e4       	ldi	r26, 0x48	; 72
 b22:	b2 e4       	ldi	r27, 0x42	; 66
 b24:	8d a3       	std	Y+37, r24	; 0x25
 b26:	9e a3       	std	Y+38, r25	; 0x26
 b28:	af a3       	std	Y+39, r26	; 0x27
 b2a:	b8 a7       	std	Y+40, r27	; 0x28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 b2c:	20 e0       	ldi	r18, 0x00	; 0
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	4a ef       	ldi	r20, 0xFA	; 250
 b32:	54 e4       	ldi	r21, 0x44	; 68
 b34:	6d a1       	ldd	r22, Y+37	; 0x25
 b36:	7e a1       	ldd	r23, Y+38	; 0x26
 b38:	8f a1       	ldd	r24, Y+39	; 0x27
 b3a:	98 a5       	ldd	r25, Y+40	; 0x28
 b3c:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 b40:	dc 01       	movw	r26, r24
 b42:	cb 01       	movw	r24, r22
 b44:	89 a7       	std	Y+41, r24	; 0x29
 b46:	9a a7       	std	Y+42, r25	; 0x2a
 b48:	ab a7       	std	Y+43, r26	; 0x2b
 b4a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 b4c:	20 e0       	ldi	r18, 0x00	; 0
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	40 e8       	ldi	r20, 0x80	; 128
 b52:	5f e3       	ldi	r21, 0x3F	; 63
 b54:	69 a5       	ldd	r22, Y+41	; 0x29
 b56:	7a a5       	ldd	r23, Y+42	; 0x2a
 b58:	8b a5       	ldd	r24, Y+43	; 0x2b
 b5a:	9c a5       	ldd	r25, Y+44	; 0x2c
 b5c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__cmpsf2>
 b60:	88 23       	and	r24, r24
 b62:	2c f4       	brge	.+10     	; 0xb6e <__stack+0x26f>
		__ticks = 1;
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	9e a7       	std	Y+46, r25	; 0x2e
 b6a:	8d a7       	std	Y+45, r24	; 0x2d
 b6c:	3f c0       	rjmp	.+126    	; 0xbec <__stack+0x2ed>
	else if (__tmp > 65535)
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	3f ef       	ldi	r19, 0xFF	; 255
 b72:	4f e7       	ldi	r20, 0x7F	; 127
 b74:	57 e4       	ldi	r21, 0x47	; 71
 b76:	69 a5       	ldd	r22, Y+41	; 0x29
 b78:	7a a5       	ldd	r23, Y+42	; 0x2a
 b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
 b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
 b7e:	0e 94 6d 07 	call	0xeda	; 0xeda <__gesf2>
 b82:	18 16       	cp	r1, r24
 b84:	4c f5       	brge	.+82     	; 0xbd8 <__stack+0x2d9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 b86:	20 e0       	ldi	r18, 0x00	; 0
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	40 e2       	ldi	r20, 0x20	; 32
 b8c:	51 e4       	ldi	r21, 0x41	; 65
 b8e:	6d a1       	ldd	r22, Y+37	; 0x25
 b90:	7e a1       	ldd	r23, Y+38	; 0x26
 b92:	8f a1       	ldd	r24, Y+39	; 0x27
 b94:	98 a5       	ldd	r25, Y+40	; 0x28
 b96:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
 b9a:	dc 01       	movw	r26, r24
 b9c:	cb 01       	movw	r24, r22
 b9e:	bc 01       	movw	r22, r24
 ba0:	cd 01       	movw	r24, r26
 ba2:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 ba6:	dc 01       	movw	r26, r24
 ba8:	cb 01       	movw	r24, r22
 baa:	9e a7       	std	Y+46, r25	; 0x2e
 bac:	8d a7       	std	Y+45, r24	; 0x2d
 bae:	0f c0       	rjmp	.+30     	; 0xbce <__stack+0x2cf>
 bb0:	88 ec       	ldi	r24, 0xC8	; 200
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	98 ab       	std	Y+48, r25	; 0x30
 bb6:	8f a7       	std	Y+47, r24	; 0x2f
 bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
 bba:	98 a9       	ldd	r25, Y+48	; 0x30
 bbc:	01 97       	sbiw	r24, 0x01	; 1
 bbe:	f1 f7       	brne	.-4      	; 0xbbc <__stack+0x2bd>
 bc0:	98 ab       	std	Y+48, r25	; 0x30
 bc2:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 bc4:	8d a5       	ldd	r24, Y+45	; 0x2d
 bc6:	9e a5       	ldd	r25, Y+46	; 0x2e
 bc8:	01 97       	sbiw	r24, 0x01	; 1
 bca:	9e a7       	std	Y+46, r25	; 0x2e
 bcc:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 bce:	8d a5       	ldd	r24, Y+45	; 0x2d
 bd0:	9e a5       	ldd	r25, Y+46	; 0x2e
 bd2:	89 2b       	or	r24, r25
 bd4:	69 f7       	brne	.-38     	; 0xbb0 <__stack+0x2b1>
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <__stack+0x301>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 bd8:	69 a5       	ldd	r22, Y+41	; 0x29
 bda:	7a a5       	ldd	r23, Y+42	; 0x2a
 bdc:	8b a5       	ldd	r24, Y+43	; 0x2b
 bde:	9c a5       	ldd	r25, Y+44	; 0x2c
 be0:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
 be4:	dc 01       	movw	r26, r24
 be6:	cb 01       	movw	r24, r22
 be8:	9e a7       	std	Y+46, r25	; 0x2e
 bea:	8d a7       	std	Y+45, r24	; 0x2d
 bec:	8d a5       	ldd	r24, Y+45	; 0x2d
 bee:	9e a5       	ldd	r25, Y+46	; 0x2e
 bf0:	9a ab       	std	Y+50, r25	; 0x32
 bf2:	89 ab       	std	Y+49, r24	; 0x31
 bf4:	89 a9       	ldd	r24, Y+49	; 0x31
 bf6:	9a a9       	ldd	r25, Y+50	; 0x32
 bf8:	01 97       	sbiw	r24, 0x01	; 1
 bfa:	f1 f7       	brne	.-4      	; 0xbf8 <__stack+0x2f9>
 bfc:	9a ab       	std	Y+50, r25	; 0x32
 bfe:	89 ab       	std	Y+49, r24	; 0x31
					_delay_ms(50);
					PORTD &= ~( (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) );
 c00:	8b e2       	ldi	r24, 0x2B	; 43
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	2b e2       	ldi	r18, 0x2B	; 43
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	f9 01       	movw	r30, r18
 c0a:	20 81       	ld	r18, Z
 c0c:	2f 71       	andi	r18, 0x1F	; 31
 c0e:	fc 01       	movw	r30, r24
 c10:	20 83       	st	Z, r18
					break;
 c12:	0a c0       	rjmp	.+20     	; 0xc28 <__stack+0x329>
			
				case 0xA0:            /* Received Stop or Repeated Start while still addressed */
					TWCR |= ( (1<<TWINT) );                            /* Switch to not Addressed */
 c14:	8c eb       	ldi	r24, 0xBC	; 188
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	2c eb       	ldi	r18, 0xBC	; 188
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	f9 01       	movw	r30, r18
 c1e:	20 81       	ld	r18, Z
 c20:	20 68       	ori	r18, 0x80	; 128
 c22:	fc 01       	movw	r30, r24
 c24:	20 83       	st	Z, r18
					break;
 c26:	00 00       	nop
			
				default:
					break;
			}
		}
	}
 c28:	5c ce       	rjmp	.-840    	; 0x8e2 <main+0x5a>

00000c2a <__cmpsf2>:
 c2a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_cmp>
 c2e:	08 f4       	brcc	.+2      	; 0xc32 <__cmpsf2+0x8>
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	08 95       	ret

00000c34 <__divsf3>:
 c34:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__divsf3x>
 c38:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_round>
 c3c:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscB>
 c40:	58 f0       	brcs	.+22     	; 0xc58 <__divsf3+0x24>
 c42:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_pscA>
 c46:	40 f0       	brcs	.+16     	; 0xc58 <__divsf3+0x24>
 c48:	29 f4       	brne	.+10     	; 0xc54 <__divsf3+0x20>
 c4a:	5f 3f       	cpi	r21, 0xFF	; 255
 c4c:	29 f0       	breq	.+10     	; 0xc58 <__divsf3+0x24>
 c4e:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_inf>
 c52:	51 11       	cpse	r21, r1
 c54:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 c58:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_nan>

00000c5c <__divsf3x>:
 c5c:	0e 94 44 07 	call	0xe88	; 0xe88 <__fp_split3>
 c60:	68 f3       	brcs	.-38     	; 0xc3c <__divsf3+0x8>

00000c62 <__divsf3_pse>:
 c62:	99 23       	and	r25, r25
 c64:	b1 f3       	breq	.-20     	; 0xc52 <__divsf3+0x1e>
 c66:	55 23       	and	r21, r21
 c68:	91 f3       	breq	.-28     	; 0xc4e <__divsf3+0x1a>
 c6a:	95 1b       	sub	r25, r21
 c6c:	55 0b       	sbc	r21, r21
 c6e:	bb 27       	eor	r27, r27
 c70:	aa 27       	eor	r26, r26
 c72:	62 17       	cp	r22, r18
 c74:	73 07       	cpc	r23, r19
 c76:	84 07       	cpc	r24, r20
 c78:	38 f0       	brcs	.+14     	; 0xc88 <__divsf3_pse+0x26>
 c7a:	9f 5f       	subi	r25, 0xFF	; 255
 c7c:	5f 4f       	sbci	r21, 0xFF	; 255
 c7e:	22 0f       	add	r18, r18
 c80:	33 1f       	adc	r19, r19
 c82:	44 1f       	adc	r20, r20
 c84:	aa 1f       	adc	r26, r26
 c86:	a9 f3       	breq	.-22     	; 0xc72 <__divsf3_pse+0x10>
 c88:	35 d0       	rcall	.+106    	; 0xcf4 <__divsf3_pse+0x92>
 c8a:	0e 2e       	mov	r0, r30
 c8c:	3a f0       	brmi	.+14     	; 0xc9c <__divsf3_pse+0x3a>
 c8e:	e0 e8       	ldi	r30, 0x80	; 128
 c90:	32 d0       	rcall	.+100    	; 0xcf6 <__divsf3_pse+0x94>
 c92:	91 50       	subi	r25, 0x01	; 1
 c94:	50 40       	sbci	r21, 0x00	; 0
 c96:	e6 95       	lsr	r30
 c98:	00 1c       	adc	r0, r0
 c9a:	ca f7       	brpl	.-14     	; 0xc8e <__divsf3_pse+0x2c>
 c9c:	2b d0       	rcall	.+86     	; 0xcf4 <__divsf3_pse+0x92>
 c9e:	fe 2f       	mov	r31, r30
 ca0:	29 d0       	rcall	.+82     	; 0xcf4 <__divsf3_pse+0x92>
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	bb 1f       	adc	r27, r27
 caa:	26 17       	cp	r18, r22
 cac:	37 07       	cpc	r19, r23
 cae:	48 07       	cpc	r20, r24
 cb0:	ab 07       	cpc	r26, r27
 cb2:	b0 e8       	ldi	r27, 0x80	; 128
 cb4:	09 f0       	breq	.+2      	; 0xcb8 <__divsf3_pse+0x56>
 cb6:	bb 0b       	sbc	r27, r27
 cb8:	80 2d       	mov	r24, r0
 cba:	bf 01       	movw	r22, r30
 cbc:	ff 27       	eor	r31, r31
 cbe:	93 58       	subi	r25, 0x83	; 131
 cc0:	5f 4f       	sbci	r21, 0xFF	; 255
 cc2:	3a f0       	brmi	.+14     	; 0xcd2 <__divsf3_pse+0x70>
 cc4:	9e 3f       	cpi	r25, 0xFE	; 254
 cc6:	51 05       	cpc	r21, r1
 cc8:	78 f0       	brcs	.+30     	; 0xce8 <__divsf3_pse+0x86>
 cca:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_inf>
 cce:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 cd2:	5f 3f       	cpi	r21, 0xFF	; 255
 cd4:	e4 f3       	brlt	.-8      	; 0xcce <__divsf3_pse+0x6c>
 cd6:	98 3e       	cpi	r25, 0xE8	; 232
 cd8:	d4 f3       	brlt	.-12     	; 0xcce <__divsf3_pse+0x6c>
 cda:	86 95       	lsr	r24
 cdc:	77 95       	ror	r23
 cde:	67 95       	ror	r22
 ce0:	b7 95       	ror	r27
 ce2:	f7 95       	ror	r31
 ce4:	9f 5f       	subi	r25, 0xFF	; 255
 ce6:	c9 f7       	brne	.-14     	; 0xcda <__divsf3_pse+0x78>
 ce8:	88 0f       	add	r24, r24
 cea:	91 1d       	adc	r25, r1
 cec:	96 95       	lsr	r25
 cee:	87 95       	ror	r24
 cf0:	97 f9       	bld	r25, 7
 cf2:	08 95       	ret
 cf4:	e1 e0       	ldi	r30, 0x01	; 1
 cf6:	66 0f       	add	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	88 1f       	adc	r24, r24
 cfc:	bb 1f       	adc	r27, r27
 cfe:	62 17       	cp	r22, r18
 d00:	73 07       	cpc	r23, r19
 d02:	84 07       	cpc	r24, r20
 d04:	ba 07       	cpc	r27, r26
 d06:	20 f0       	brcs	.+8      	; 0xd10 <__divsf3_pse+0xae>
 d08:	62 1b       	sub	r22, r18
 d0a:	73 0b       	sbc	r23, r19
 d0c:	84 0b       	sbc	r24, r20
 d0e:	ba 0b       	sbc	r27, r26
 d10:	ee 1f       	adc	r30, r30
 d12:	88 f7       	brcc	.-30     	; 0xcf6 <__divsf3_pse+0x94>
 d14:	e0 95       	com	r30
 d16:	08 95       	ret

00000d18 <__fixunssfsi>:
 d18:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_splitA>
 d1c:	88 f0       	brcs	.+34     	; 0xd40 <__fixunssfsi+0x28>
 d1e:	9f 57       	subi	r25, 0x7F	; 127
 d20:	98 f0       	brcs	.+38     	; 0xd48 <__fixunssfsi+0x30>
 d22:	b9 2f       	mov	r27, r25
 d24:	99 27       	eor	r25, r25
 d26:	b7 51       	subi	r27, 0x17	; 23
 d28:	b0 f0       	brcs	.+44     	; 0xd56 <__fixunssfsi+0x3e>
 d2a:	e1 f0       	breq	.+56     	; 0xd64 <__fixunssfsi+0x4c>
 d2c:	66 0f       	add	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	1a f0       	brmi	.+6      	; 0xd3c <__fixunssfsi+0x24>
 d36:	ba 95       	dec	r27
 d38:	c9 f7       	brne	.-14     	; 0xd2c <__fixunssfsi+0x14>
 d3a:	14 c0       	rjmp	.+40     	; 0xd64 <__fixunssfsi+0x4c>
 d3c:	b1 30       	cpi	r27, 0x01	; 1
 d3e:	91 f0       	breq	.+36     	; 0xd64 <__fixunssfsi+0x4c>
 d40:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_zero>
 d44:	b1 e0       	ldi	r27, 0x01	; 1
 d46:	08 95       	ret
 d48:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_zero>
 d4c:	67 2f       	mov	r22, r23
 d4e:	78 2f       	mov	r23, r24
 d50:	88 27       	eor	r24, r24
 d52:	b8 5f       	subi	r27, 0xF8	; 248
 d54:	39 f0       	breq	.+14     	; 0xd64 <__fixunssfsi+0x4c>
 d56:	b9 3f       	cpi	r27, 0xF9	; 249
 d58:	cc f3       	brlt	.-14     	; 0xd4c <__fixunssfsi+0x34>
 d5a:	86 95       	lsr	r24
 d5c:	77 95       	ror	r23
 d5e:	67 95       	ror	r22
 d60:	b3 95       	inc	r27
 d62:	d9 f7       	brne	.-10     	; 0xd5a <__fixunssfsi+0x42>
 d64:	3e f4       	brtc	.+14     	; 0xd74 <__fixunssfsi+0x5c>
 d66:	90 95       	com	r25
 d68:	80 95       	com	r24
 d6a:	70 95       	com	r23
 d6c:	61 95       	neg	r22
 d6e:	7f 4f       	sbci	r23, 0xFF	; 255
 d70:	8f 4f       	sbci	r24, 0xFF	; 255
 d72:	9f 4f       	sbci	r25, 0xFF	; 255
 d74:	08 95       	ret

00000d76 <__floatunsisf>:
 d76:	e8 94       	clt
 d78:	09 c0       	rjmp	.+18     	; 0xd8c <__floatsisf+0x12>

00000d7a <__floatsisf>:
 d7a:	97 fb       	bst	r25, 7
 d7c:	3e f4       	brtc	.+14     	; 0xd8c <__floatsisf+0x12>
 d7e:	90 95       	com	r25
 d80:	80 95       	com	r24
 d82:	70 95       	com	r23
 d84:	61 95       	neg	r22
 d86:	7f 4f       	sbci	r23, 0xFF	; 255
 d88:	8f 4f       	sbci	r24, 0xFF	; 255
 d8a:	9f 4f       	sbci	r25, 0xFF	; 255
 d8c:	99 23       	and	r25, r25
 d8e:	a9 f0       	breq	.+42     	; 0xdba <__floatsisf+0x40>
 d90:	f9 2f       	mov	r31, r25
 d92:	96 e9       	ldi	r25, 0x96	; 150
 d94:	bb 27       	eor	r27, r27
 d96:	93 95       	inc	r25
 d98:	f6 95       	lsr	r31
 d9a:	87 95       	ror	r24
 d9c:	77 95       	ror	r23
 d9e:	67 95       	ror	r22
 da0:	b7 95       	ror	r27
 da2:	f1 11       	cpse	r31, r1
 da4:	f8 cf       	rjmp	.-16     	; 0xd96 <__floatsisf+0x1c>
 da6:	fa f4       	brpl	.+62     	; 0xde6 <__floatsisf+0x6c>
 da8:	bb 0f       	add	r27, r27
 daa:	11 f4       	brne	.+4      	; 0xdb0 <__floatsisf+0x36>
 dac:	60 ff       	sbrs	r22, 0
 dae:	1b c0       	rjmp	.+54     	; 0xde6 <__floatsisf+0x6c>
 db0:	6f 5f       	subi	r22, 0xFF	; 255
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	8f 4f       	sbci	r24, 0xFF	; 255
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	16 c0       	rjmp	.+44     	; 0xde6 <__floatsisf+0x6c>
 dba:	88 23       	and	r24, r24
 dbc:	11 f0       	breq	.+4      	; 0xdc2 <__floatsisf+0x48>
 dbe:	96 e9       	ldi	r25, 0x96	; 150
 dc0:	11 c0       	rjmp	.+34     	; 0xde4 <__floatsisf+0x6a>
 dc2:	77 23       	and	r23, r23
 dc4:	21 f0       	breq	.+8      	; 0xdce <__floatsisf+0x54>
 dc6:	9e e8       	ldi	r25, 0x8E	; 142
 dc8:	87 2f       	mov	r24, r23
 dca:	76 2f       	mov	r23, r22
 dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <__floatsisf+0x5e>
 dce:	66 23       	and	r22, r22
 dd0:	71 f0       	breq	.+28     	; 0xdee <__floatsisf+0x74>
 dd2:	96 e8       	ldi	r25, 0x86	; 134
 dd4:	86 2f       	mov	r24, r22
 dd6:	70 e0       	ldi	r23, 0x00	; 0
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	2a f0       	brmi	.+10     	; 0xde6 <__floatsisf+0x6c>
 ddc:	9a 95       	dec	r25
 dde:	66 0f       	add	r22, r22
 de0:	77 1f       	adc	r23, r23
 de2:	88 1f       	adc	r24, r24
 de4:	da f7       	brpl	.-10     	; 0xddc <__floatsisf+0x62>
 de6:	88 0f       	add	r24, r24
 de8:	96 95       	lsr	r25
 dea:	87 95       	ror	r24
 dec:	97 f9       	bld	r25, 7
 dee:	08 95       	ret

00000df0 <__fp_cmp>:
 df0:	99 0f       	add	r25, r25
 df2:	00 08       	sbc	r0, r0
 df4:	55 0f       	add	r21, r21
 df6:	aa 0b       	sbc	r26, r26
 df8:	e0 e8       	ldi	r30, 0x80	; 128
 dfa:	fe ef       	ldi	r31, 0xFE	; 254
 dfc:	16 16       	cp	r1, r22
 dfe:	17 06       	cpc	r1, r23
 e00:	e8 07       	cpc	r30, r24
 e02:	f9 07       	cpc	r31, r25
 e04:	c0 f0       	brcs	.+48     	; 0xe36 <__fp_cmp+0x46>
 e06:	12 16       	cp	r1, r18
 e08:	13 06       	cpc	r1, r19
 e0a:	e4 07       	cpc	r30, r20
 e0c:	f5 07       	cpc	r31, r21
 e0e:	98 f0       	brcs	.+38     	; 0xe36 <__fp_cmp+0x46>
 e10:	62 1b       	sub	r22, r18
 e12:	73 0b       	sbc	r23, r19
 e14:	84 0b       	sbc	r24, r20
 e16:	95 0b       	sbc	r25, r21
 e18:	39 f4       	brne	.+14     	; 0xe28 <__fp_cmp+0x38>
 e1a:	0a 26       	eor	r0, r26
 e1c:	61 f0       	breq	.+24     	; 0xe36 <__fp_cmp+0x46>
 e1e:	23 2b       	or	r18, r19
 e20:	24 2b       	or	r18, r20
 e22:	25 2b       	or	r18, r21
 e24:	21 f4       	brne	.+8      	; 0xe2e <__fp_cmp+0x3e>
 e26:	08 95       	ret
 e28:	0a 26       	eor	r0, r26
 e2a:	09 f4       	brne	.+2      	; 0xe2e <__fp_cmp+0x3e>
 e2c:	a1 40       	sbci	r26, 0x01	; 1
 e2e:	a6 95       	lsr	r26
 e30:	8f ef       	ldi	r24, 0xFF	; 255
 e32:	81 1d       	adc	r24, r1
 e34:	81 1d       	adc	r24, r1
 e36:	08 95       	ret

00000e38 <__fp_inf>:
 e38:	97 f9       	bld	r25, 7
 e3a:	9f 67       	ori	r25, 0x7F	; 127
 e3c:	80 e8       	ldi	r24, 0x80	; 128
 e3e:	70 e0       	ldi	r23, 0x00	; 0
 e40:	60 e0       	ldi	r22, 0x00	; 0
 e42:	08 95       	ret

00000e44 <__fp_nan>:
 e44:	9f ef       	ldi	r25, 0xFF	; 255
 e46:	80 ec       	ldi	r24, 0xC0	; 192
 e48:	08 95       	ret

00000e4a <__fp_pscA>:
 e4a:	00 24       	eor	r0, r0
 e4c:	0a 94       	dec	r0
 e4e:	16 16       	cp	r1, r22
 e50:	17 06       	cpc	r1, r23
 e52:	18 06       	cpc	r1, r24
 e54:	09 06       	cpc	r0, r25
 e56:	08 95       	ret

00000e58 <__fp_pscB>:
 e58:	00 24       	eor	r0, r0
 e5a:	0a 94       	dec	r0
 e5c:	12 16       	cp	r1, r18
 e5e:	13 06       	cpc	r1, r19
 e60:	14 06       	cpc	r1, r20
 e62:	05 06       	cpc	r0, r21
 e64:	08 95       	ret

00000e66 <__fp_round>:
 e66:	09 2e       	mov	r0, r25
 e68:	03 94       	inc	r0
 e6a:	00 0c       	add	r0, r0
 e6c:	11 f4       	brne	.+4      	; 0xe72 <__fp_round+0xc>
 e6e:	88 23       	and	r24, r24
 e70:	52 f0       	brmi	.+20     	; 0xe86 <__fp_round+0x20>
 e72:	bb 0f       	add	r27, r27
 e74:	40 f4       	brcc	.+16     	; 0xe86 <__fp_round+0x20>
 e76:	bf 2b       	or	r27, r31
 e78:	11 f4       	brne	.+4      	; 0xe7e <__fp_round+0x18>
 e7a:	60 ff       	sbrs	r22, 0
 e7c:	04 c0       	rjmp	.+8      	; 0xe86 <__fp_round+0x20>
 e7e:	6f 5f       	subi	r22, 0xFF	; 255
 e80:	7f 4f       	sbci	r23, 0xFF	; 255
 e82:	8f 4f       	sbci	r24, 0xFF	; 255
 e84:	9f 4f       	sbci	r25, 0xFF	; 255
 e86:	08 95       	ret

00000e88 <__fp_split3>:
 e88:	57 fd       	sbrc	r21, 7
 e8a:	90 58       	subi	r25, 0x80	; 128
 e8c:	44 0f       	add	r20, r20
 e8e:	55 1f       	adc	r21, r21
 e90:	59 f0       	breq	.+22     	; 0xea8 <__fp_splitA+0x10>
 e92:	5f 3f       	cpi	r21, 0xFF	; 255
 e94:	71 f0       	breq	.+28     	; 0xeb2 <__fp_splitA+0x1a>
 e96:	47 95       	ror	r20

00000e98 <__fp_splitA>:
 e98:	88 0f       	add	r24, r24
 e9a:	97 fb       	bst	r25, 7
 e9c:	99 1f       	adc	r25, r25
 e9e:	61 f0       	breq	.+24     	; 0xeb8 <__fp_splitA+0x20>
 ea0:	9f 3f       	cpi	r25, 0xFF	; 255
 ea2:	79 f0       	breq	.+30     	; 0xec2 <__fp_splitA+0x2a>
 ea4:	87 95       	ror	r24
 ea6:	08 95       	ret
 ea8:	12 16       	cp	r1, r18
 eaa:	13 06       	cpc	r1, r19
 eac:	14 06       	cpc	r1, r20
 eae:	55 1f       	adc	r21, r21
 eb0:	f2 cf       	rjmp	.-28     	; 0xe96 <__fp_split3+0xe>
 eb2:	46 95       	lsr	r20
 eb4:	f1 df       	rcall	.-30     	; 0xe98 <__fp_splitA>
 eb6:	08 c0       	rjmp	.+16     	; 0xec8 <__fp_splitA+0x30>
 eb8:	16 16       	cp	r1, r22
 eba:	17 06       	cpc	r1, r23
 ebc:	18 06       	cpc	r1, r24
 ebe:	99 1f       	adc	r25, r25
 ec0:	f1 cf       	rjmp	.-30     	; 0xea4 <__fp_splitA+0xc>
 ec2:	86 95       	lsr	r24
 ec4:	71 05       	cpc	r23, r1
 ec6:	61 05       	cpc	r22, r1
 ec8:	08 94       	sec
 eca:	08 95       	ret

00000ecc <__fp_zero>:
 ecc:	e8 94       	clt

00000ece <__fp_szero>:
 ece:	bb 27       	eor	r27, r27
 ed0:	66 27       	eor	r22, r22
 ed2:	77 27       	eor	r23, r23
 ed4:	cb 01       	movw	r24, r22
 ed6:	97 f9       	bld	r25, 7
 ed8:	08 95       	ret

00000eda <__gesf2>:
 eda:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_cmp>
 ede:	08 f4       	brcc	.+2      	; 0xee2 <__gesf2+0x8>
 ee0:	8f ef       	ldi	r24, 0xFF	; 255
 ee2:	08 95       	ret

00000ee4 <__mulsf3>:
 ee4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3x>
 ee8:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_round>
 eec:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fp_pscA>
 ef0:	38 f0       	brcs	.+14     	; 0xf00 <__mulsf3+0x1c>
 ef2:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_pscB>
 ef6:	20 f0       	brcs	.+8      	; 0xf00 <__mulsf3+0x1c>
 ef8:	95 23       	and	r25, r21
 efa:	11 f0       	breq	.+4      	; 0xf00 <__mulsf3+0x1c>
 efc:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_inf>
 f00:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__fp_nan>
 f04:	11 24       	eor	r1, r1
 f06:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>

00000f0a <__mulsf3x>:
 f0a:	0e 94 44 07 	call	0xe88	; 0xe88 <__fp_split3>
 f0e:	70 f3       	brcs	.-36     	; 0xeec <__mulsf3+0x8>

00000f10 <__mulsf3_pse>:
 f10:	95 9f       	mul	r25, r21
 f12:	c1 f3       	breq	.-16     	; 0xf04 <__mulsf3+0x20>
 f14:	95 0f       	add	r25, r21
 f16:	50 e0       	ldi	r21, 0x00	; 0
 f18:	55 1f       	adc	r21, r21
 f1a:	62 9f       	mul	r22, r18
 f1c:	f0 01       	movw	r30, r0
 f1e:	72 9f       	mul	r23, r18
 f20:	bb 27       	eor	r27, r27
 f22:	f0 0d       	add	r31, r0
 f24:	b1 1d       	adc	r27, r1
 f26:	63 9f       	mul	r22, r19
 f28:	aa 27       	eor	r26, r26
 f2a:	f0 0d       	add	r31, r0
 f2c:	b1 1d       	adc	r27, r1
 f2e:	aa 1f       	adc	r26, r26
 f30:	64 9f       	mul	r22, r20
 f32:	66 27       	eor	r22, r22
 f34:	b0 0d       	add	r27, r0
 f36:	a1 1d       	adc	r26, r1
 f38:	66 1f       	adc	r22, r22
 f3a:	82 9f       	mul	r24, r18
 f3c:	22 27       	eor	r18, r18
 f3e:	b0 0d       	add	r27, r0
 f40:	a1 1d       	adc	r26, r1
 f42:	62 1f       	adc	r22, r18
 f44:	73 9f       	mul	r23, r19
 f46:	b0 0d       	add	r27, r0
 f48:	a1 1d       	adc	r26, r1
 f4a:	62 1f       	adc	r22, r18
 f4c:	83 9f       	mul	r24, r19
 f4e:	a0 0d       	add	r26, r0
 f50:	61 1d       	adc	r22, r1
 f52:	22 1f       	adc	r18, r18
 f54:	74 9f       	mul	r23, r20
 f56:	33 27       	eor	r19, r19
 f58:	a0 0d       	add	r26, r0
 f5a:	61 1d       	adc	r22, r1
 f5c:	23 1f       	adc	r18, r19
 f5e:	84 9f       	mul	r24, r20
 f60:	60 0d       	add	r22, r0
 f62:	21 1d       	adc	r18, r1
 f64:	82 2f       	mov	r24, r18
 f66:	76 2f       	mov	r23, r22
 f68:	6a 2f       	mov	r22, r26
 f6a:	11 24       	eor	r1, r1
 f6c:	9f 57       	subi	r25, 0x7F	; 127
 f6e:	50 40       	sbci	r21, 0x00	; 0
 f70:	9a f0       	brmi	.+38     	; 0xf98 <__mulsf3_pse+0x88>
 f72:	f1 f0       	breq	.+60     	; 0xfb0 <__mulsf3_pse+0xa0>
 f74:	88 23       	and	r24, r24
 f76:	4a f0       	brmi	.+18     	; 0xf8a <__mulsf3_pse+0x7a>
 f78:	ee 0f       	add	r30, r30
 f7a:	ff 1f       	adc	r31, r31
 f7c:	bb 1f       	adc	r27, r27
 f7e:	66 1f       	adc	r22, r22
 f80:	77 1f       	adc	r23, r23
 f82:	88 1f       	adc	r24, r24
 f84:	91 50       	subi	r25, 0x01	; 1
 f86:	50 40       	sbci	r21, 0x00	; 0
 f88:	a9 f7       	brne	.-22     	; 0xf74 <__mulsf3_pse+0x64>
 f8a:	9e 3f       	cpi	r25, 0xFE	; 254
 f8c:	51 05       	cpc	r21, r1
 f8e:	80 f0       	brcs	.+32     	; 0xfb0 <__mulsf3_pse+0xa0>
 f90:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_inf>
 f94:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_szero>
 f98:	5f 3f       	cpi	r21, 0xFF	; 255
 f9a:	e4 f3       	brlt	.-8      	; 0xf94 <__mulsf3_pse+0x84>
 f9c:	98 3e       	cpi	r25, 0xE8	; 232
 f9e:	d4 f3       	brlt	.-12     	; 0xf94 <__mulsf3_pse+0x84>
 fa0:	86 95       	lsr	r24
 fa2:	77 95       	ror	r23
 fa4:	67 95       	ror	r22
 fa6:	b7 95       	ror	r27
 fa8:	f7 95       	ror	r31
 faa:	e7 95       	ror	r30
 fac:	9f 5f       	subi	r25, 0xFF	; 255
 fae:	c1 f7       	brne	.-16     	; 0xfa0 <__mulsf3_pse+0x90>
 fb0:	fe 2b       	or	r31, r30
 fb2:	88 0f       	add	r24, r24
 fb4:	91 1d       	adc	r25, r1
 fb6:	96 95       	lsr	r25
 fb8:	87 95       	ror	r24
 fba:	97 f9       	bld	r25, 7
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>

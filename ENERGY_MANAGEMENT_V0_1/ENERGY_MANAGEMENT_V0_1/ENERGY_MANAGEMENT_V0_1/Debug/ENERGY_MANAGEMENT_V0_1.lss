
ENERGY_MANAGEMENT_V0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000da6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000078  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004d6  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000157  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002e3  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000194  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000281  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000034e  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  00001f17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 33 04 	call	0x866	; 0x866 <main>
  78:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <powermanagement_init>:
 * inits the general powermanagement
 * 
 * @return Voltage
 */
void powermanagement_init()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
   DDRD |= (1<<PORTD4);                 //Set tristate for ENABLE_MCU
  88:	8a e2       	ldi	r24, 0x2A	; 42
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2a e2       	ldi	r18, 0x2A	; 42
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	20 61       	ori	r18, 0x10	; 16
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
   DDRB |= (1<<PORTB0);                 //Set tristate for CRUISE_CONTROL
  9a:	84 e2       	ldi	r24, 0x24	; 36
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	24 e2       	ldi	r18, 0x24	; 36
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	21 60       	ori	r18, 0x01	; 1
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <adc_init>:
 * inits the adc with the corresponding channel
 * 
 * @param Channel
 */
void adc_init(int channel)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <adc_init+0x6>
  b8:	00 d0       	rcall	.+0      	; 0xba <adc_init+0x8>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
   ADMUX = 0x00;                        //Reset ADMUX register to 0
  c2:	8c e7       	ldi	r24, 0x7C	; 124
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
   ADCSRA = 0x00;                       //Reset ADCSRA register to 0
  ca:	8a e7       	ldi	r24, 0x7A	; 122
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
   
   ADMUX |= (1<<REFS0);                 //Set ref to AVCC
  d2:	8c e7       	ldi	r24, 0x7C	; 124
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2c e7       	ldi	r18, 0x7C	; 124
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	20 64       	ori	r18, 0x40	; 64
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
   int channel_bit = (channel);
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
   //ADMUX |= (channel << 4);           //Set channel
   
   ADMUX |= channel_bit;
  ec:	8c e7       	ldi	r24, 0x7C	; 124
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2c e7       	ldi	r18, 0x7C	; 124
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	32 2f       	mov	r19, r18
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	23 2b       	or	r18, r19
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
   
   ADCSRA |= ( (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADATE) );   //Enable ADC, Star ADC, Set Clock Prescaler to 8
 102:	8a e7       	ldi	r24, 0x7A	; 122
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2a e7       	ldi	r18, 0x7A	; 122
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	23 6a       	ori	r18, 0xA3	; 163
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
   ADCSRA |= (1<<ADSC);
 114:	8a e7       	ldi	r24, 0x7A	; 122
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2a e7       	ldi	r18, 0x7A	; 122
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	20 64       	ori	r18, 0x40	; 64
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
   
   //return 1;
}
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <adc_sample>:
 * make a sample on the adc
 * 
 * @return ADC-Value
 */
int adc_sample()
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <adc_sample+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
   int result = 0;                      //Setup space for ADC result
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	19 82       	std	Y+1, r1	; 0x01
   
   result = ADCL + (ADCH << 8);         //Get 10bit result from ADC registers. Keep in mind to read ADCH!
 142:	88 e7       	ldi	r24, 0x78	; 120
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	89 e7       	ldi	r24, 0x79	; 121
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	98 2f       	mov	r25, r24
 15c:	88 27       	eor	r24, r24
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
   
   return result;
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <get_five_rail>:
 * Returns the actual voltage on the five Volt rail
 * 
 * @return Voltage
 */
float get_five_rail()
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	62 97       	sbiw	r28, 0x12	; 18
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
   adc_init(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a8 ec       	ldi	r26, 0xC8	; 200
 196:	b2 e4       	ldi	r27, 0x42	; 66
 198:	8d 83       	std	Y+5, r24	; 0x05
 19a:	9e 83       	std	Y+6, r25	; 0x06
 19c:	af 83       	std	Y+7, r26	; 0x07
 19e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	4a ef       	ldi	r20, 0xFA	; 250
 1a6:	54 e4       	ldi	r21, 0x44	; 68
 1a8:	6d 81       	ldd	r22, Y+5	; 0x05
 1aa:	7e 81       	ldd	r23, Y+6	; 0x06
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	89 87       	std	Y+9, r24	; 0x09
 1ba:	9a 87       	std	Y+10, r25	; 0x0a
 1bc:	ab 87       	std	Y+11, r26	; 0x0b
 1be:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	69 85       	ldd	r22, Y+9	; 0x09
 1ca:	7a 85       	ldd	r23, Y+10	; 0x0a
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d0:	0e 94 20 05 	call	0xa40	; 0xa40 <__cmpsf2>
 1d4:	88 23       	and	r24, r24
 1d6:	2c f4       	brge	.+10     	; 0x1e2 <get_five_rail+0x6e>
		__ticks = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	9e 87       	std	Y+14, r25	; 0x0e
 1de:	8d 87       	std	Y+13, r24	; 0x0d
 1e0:	3f c0       	rjmp	.+126    	; 0x260 <get_five_rail+0xec>
	else if (__tmp > 65535)
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	3f ef       	ldi	r19, 0xFF	; 255
 1e6:	4f e7       	ldi	r20, 0x7F	; 127
 1e8:	57 e4       	ldi	r21, 0x47	; 71
 1ea:	69 85       	ldd	r22, Y+9	; 0x09
 1ec:	7a 85       	ldd	r23, Y+10	; 0x0a
 1ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 1f6:	18 16       	cp	r1, r24
 1f8:	4c f5       	brge	.+82     	; 0x24c <get_five_rail+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e2       	ldi	r20, 0x20	; 32
 200:	51 e4       	ldi	r21, 0x41	; 65
 202:	6d 81       	ldd	r22, Y+5	; 0x05
 204:	7e 81       	ldd	r23, Y+6	; 0x06
 206:	8f 81       	ldd	r24, Y+7	; 0x07
 208:	98 85       	ldd	r25, Y+8	; 0x08
 20a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	bc 01       	movw	r22, r24
 214:	cd 01       	movw	r24, r26
 216:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	9e 87       	std	Y+14, r25	; 0x0e
 220:	8d 87       	std	Y+13, r24	; 0x0d
 222:	0f c0       	rjmp	.+30     	; 0x242 <get_five_rail+0xce>
 224:	88 ec       	ldi	r24, 0xC8	; 200
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	98 8b       	std	Y+16, r25	; 0x10
 22a:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22c:	8f 85       	ldd	r24, Y+15	; 0x0f
 22e:	98 89       	ldd	r25, Y+16	; 0x10
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <get_five_rail+0xbc>
 234:	98 8b       	std	Y+16, r25	; 0x10
 236:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 238:	8d 85       	ldd	r24, Y+13	; 0x0d
 23a:	9e 85       	ldd	r25, Y+14	; 0x0e
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	9e 87       	std	Y+14, r25	; 0x0e
 240:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	8d 85       	ldd	r24, Y+13	; 0x0d
 244:	9e 85       	ldd	r25, Y+14	; 0x0e
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	69 f7       	brne	.-38     	; 0x224 <get_five_rail+0xb0>
 24a:	14 c0       	rjmp	.+40     	; 0x274 <get_five_rail+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24c:	69 85       	ldd	r22, Y+9	; 0x09
 24e:	7a 85       	ldd	r23, Y+10	; 0x0a
 250:	8b 85       	ldd	r24, Y+11	; 0x0b
 252:	9c 85       	ldd	r25, Y+12	; 0x0c
 254:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 258:	dc 01       	movw	r26, r24
 25a:	cb 01       	movw	r24, r22
 25c:	9e 87       	std	Y+14, r25	; 0x0e
 25e:	8d 87       	std	Y+13, r24	; 0x0d
 260:	8d 85       	ldd	r24, Y+13	; 0x0d
 262:	9e 85       	ldd	r25, Y+14	; 0x0e
 264:	9a 8b       	std	Y+18, r25	; 0x12
 266:	89 8b       	std	Y+17, r24	; 0x11
 268:	89 89       	ldd	r24, Y+17	; 0x11
 26a:	9a 89       	ldd	r25, Y+18	; 0x12
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <get_five_rail+0xf8>
 270:	9a 8b       	std	Y+18, r25	; 0x12
 272:	89 8b       	std	Y+17, r24	; 0x11
   _delay_ms(100);
   
   float meassurement = (((float)adc_sample()/1023)*3.3);
 274:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 278:	aa 27       	eor	r26, r26
 27a:	97 fd       	sbrc	r25, 7
 27c:	a0 95       	com	r26
 27e:	ba 2f       	mov	r27, r26
 280:	bc 01       	movw	r22, r24
 282:	cd 01       	movw	r24, r26
 284:	0e 94 ba 05 	call	0xb74	; 0xb74 <__floatsisf>
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 ec       	ldi	r19, 0xC0	; 192
 290:	4f e7       	ldi	r20, 0x7F	; 127
 292:	54 e4       	ldi	r21, 0x44	; 68
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	23 e3       	ldi	r18, 0x33	; 51
 2a2:	33 e3       	ldi	r19, 0x33	; 51
 2a4:	43 e5       	ldi	r20, 0x53	; 83
 2a6:	50 e4       	ldi	r21, 0x40	; 64
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	ab 83       	std	Y+3, r26	; 0x03
 2ba:	bc 83       	std	Y+4, r27	; 0x04
   
   meassurement = (meassurement/2.5)*5.2;
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e2       	ldi	r20, 0x20	; 32
 2c2:	50 e4       	ldi	r21, 0x40	; 64
 2c4:	69 81       	ldd	r22, Y+1	; 0x01
 2c6:	7a 81       	ldd	r23, Y+2	; 0x02
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	9c 81       	ldd	r25, Y+4	; 0x04
 2cc:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 2d0:	dc 01       	movw	r26, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	26 e6       	ldi	r18, 0x66	; 102
 2d6:	36 e6       	ldi	r19, 0x66	; 102
 2d8:	46 ea       	ldi	r20, 0xA6	; 166
 2da:	50 e4       	ldi	r21, 0x40	; 64
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	9a 83       	std	Y+2, r25	; 0x02
 2ec:	ab 83       	std	Y+3, r26	; 0x03
 2ee:	bc 83       	std	Y+4, r27	; 0x04

   return meassurement;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	ab 81       	ldd	r26, Y+3	; 0x03
 2f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
 2f8:	bc 01       	movw	r22, r24
 2fa:	cd 01       	movw	r24, r26
 2fc:	62 96       	adiw	r28, 0x12	; 18
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <get_three_rail>:
 * Returns the actual voltage on the three point three Volt rail
 * 
 * @return Voltage
 */
float get_three_rail()
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	62 97       	sbiw	r28, 0x12	; 18
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
   adc_init(1);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a8 ec       	ldi	r26, 0xC8	; 200
 330:	b2 e4       	ldi	r27, 0x42	; 66
 332:	8d 83       	std	Y+5, r24	; 0x05
 334:	9e 83       	std	Y+6, r25	; 0x06
 336:	af 83       	std	Y+7, r26	; 0x07
 338:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	4a ef       	ldi	r20, 0xFA	; 250
 340:	54 e4       	ldi	r21, 0x44	; 68
 342:	6d 81       	ldd	r22, Y+5	; 0x05
 344:	7e 81       	ldd	r23, Y+6	; 0x06
 346:	8f 81       	ldd	r24, Y+7	; 0x07
 348:	98 85       	ldd	r25, Y+8	; 0x08
 34a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 34e:	dc 01       	movw	r26, r24
 350:	cb 01       	movw	r24, r22
 352:	89 87       	std	Y+9, r24	; 0x09
 354:	9a 87       	std	Y+10, r25	; 0x0a
 356:	ab 87       	std	Y+11, r26	; 0x0b
 358:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e8       	ldi	r20, 0x80	; 128
 360:	5f e3       	ldi	r21, 0x3F	; 63
 362:	69 85       	ldd	r22, Y+9	; 0x09
 364:	7a 85       	ldd	r23, Y+10	; 0x0a
 366:	8b 85       	ldd	r24, Y+11	; 0x0b
 368:	9c 85       	ldd	r25, Y+12	; 0x0c
 36a:	0e 94 20 05 	call	0xa40	; 0xa40 <__cmpsf2>
 36e:	88 23       	and	r24, r24
 370:	2c f4       	brge	.+10     	; 0x37c <get_three_rail+0x6e>
		__ticks = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	9e 87       	std	Y+14, r25	; 0x0e
 378:	8d 87       	std	Y+13, r24	; 0x0d
 37a:	3f c0       	rjmp	.+126    	; 0x3fa <get_three_rail+0xec>
	else if (__tmp > 65535)
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	3f ef       	ldi	r19, 0xFF	; 255
 380:	4f e7       	ldi	r20, 0x7F	; 127
 382:	57 e4       	ldi	r21, 0x47	; 71
 384:	69 85       	ldd	r22, Y+9	; 0x09
 386:	7a 85       	ldd	r23, Y+10	; 0x0a
 388:	8b 85       	ldd	r24, Y+11	; 0x0b
 38a:	9c 85       	ldd	r25, Y+12	; 0x0c
 38c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 390:	18 16       	cp	r1, r24
 392:	4c f5       	brge	.+82     	; 0x3e6 <get_three_rail+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e2       	ldi	r20, 0x20	; 32
 39a:	51 e4       	ldi	r21, 0x41	; 65
 39c:	6d 81       	ldd	r22, Y+5	; 0x05
 39e:	7e 81       	ldd	r23, Y+6	; 0x06
 3a0:	8f 81       	ldd	r24, Y+7	; 0x07
 3a2:	98 85       	ldd	r25, Y+8	; 0x08
 3a4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	9e 87       	std	Y+14, r25	; 0x0e
 3ba:	8d 87       	std	Y+13, r24	; 0x0d
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <get_three_rail+0xce>
 3be:	88 ec       	ldi	r24, 0xC8	; 200
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	98 8b       	std	Y+16, r25	; 0x10
 3c4:	8f 87       	std	Y+15, r24	; 0x0f
 3c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 3c8:	98 89       	ldd	r25, Y+16	; 0x10
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <get_three_rail+0xbc>
 3ce:	98 8b       	std	Y+16, r25	; 0x10
 3d0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	9e 87       	std	Y+14, r25	; 0x0e
 3da:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3de:	9e 85       	ldd	r25, Y+14	; 0x0e
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	69 f7       	brne	.-38     	; 0x3be <get_three_rail+0xb0>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <get_three_rail+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e6:	69 85       	ldd	r22, Y+9	; 0x09
 3e8:	7a 85       	ldd	r23, Y+10	; 0x0a
 3ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 3ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ee:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 3f2:	dc 01       	movw	r26, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	9e 87       	std	Y+14, r25	; 0x0e
 3f8:	8d 87       	std	Y+13, r24	; 0x0d
 3fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 3fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 3fe:	9a 8b       	std	Y+18, r25	; 0x12
 400:	89 8b       	std	Y+17, r24	; 0x11
 402:	89 89       	ldd	r24, Y+17	; 0x11
 404:	9a 89       	ldd	r25, Y+18	; 0x12
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <get_three_rail+0xf8>
 40a:	9a 8b       	std	Y+18, r25	; 0x12
 40c:	89 8b       	std	Y+17, r24	; 0x11
   _delay_ms(100);

   float meassurement = (((float)adc_sample()/1023)*3.3);
 40e:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 412:	aa 27       	eor	r26, r26
 414:	97 fd       	sbrc	r25, 7
 416:	a0 95       	com	r26
 418:	ba 2f       	mov	r27, r26
 41a:	bc 01       	movw	r22, r24
 41c:	cd 01       	movw	r24, r26
 41e:	0e 94 ba 05 	call	0xb74	; 0xb74 <__floatsisf>
 422:	dc 01       	movw	r26, r24
 424:	cb 01       	movw	r24, r22
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 ec       	ldi	r19, 0xC0	; 192
 42a:	4f e7       	ldi	r20, 0x7F	; 127
 42c:	54 e4       	ldi	r21, 0x44	; 68
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 436:	dc 01       	movw	r26, r24
 438:	cb 01       	movw	r24, r22
 43a:	23 e3       	ldi	r18, 0x33	; 51
 43c:	33 e3       	ldi	r19, 0x33	; 51
 43e:	43 e5       	ldi	r20, 0x53	; 83
 440:	50 e4       	ldi	r21, 0x40	; 64
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	ab 83       	std	Y+3, r26	; 0x03
 454:	bc 83       	std	Y+4, r27	; 0x04
   
   meassurement = (meassurement/2.5)*3.4;
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e2       	ldi	r20, 0x20	; 32
 45c:	50 e4       	ldi	r21, 0x40	; 64
 45e:	69 81       	ldd	r22, Y+1	; 0x01
 460:	7a 81       	ldd	r23, Y+2	; 0x02
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	9c 81       	ldd	r25, Y+4	; 0x04
 466:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 46a:	dc 01       	movw	r26, r24
 46c:	cb 01       	movw	r24, r22
 46e:	2a e9       	ldi	r18, 0x9A	; 154
 470:	39 e9       	ldi	r19, 0x99	; 153
 472:	49 e5       	ldi	r20, 0x59	; 89
 474:	50 e4       	ldi	r21, 0x40	; 64
 476:	bc 01       	movw	r22, r24
 478:	cd 01       	movw	r24, r26
 47a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	ab 83       	std	Y+3, r26	; 0x03
 488:	bc 83       	std	Y+4, r27	; 0x04

   return meassurement;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	ab 81       	ldd	r26, Y+3	; 0x03
 490:	bc 81       	ldd	r27, Y+4	; 0x04
}
 492:	bc 01       	movw	r22, r24
 494:	cd 01       	movw	r24, r26
 496:	62 96       	adiw	r28, 0x12	; 18
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <get_current>:
 * Returns the actual current consumption (Not yet implemented!!)
 * 
 * @return Current
 */
float get_current()
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	62 97       	sbiw	r28, 0x12	; 18
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
   adc_init(2);
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	a8 ec       	ldi	r26, 0xC8	; 200
 4ca:	b2 e4       	ldi	r27, 0x42	; 66
 4cc:	8d 83       	std	Y+5, r24	; 0x05
 4ce:	9e 83       	std	Y+6, r25	; 0x06
 4d0:	af 83       	std	Y+7, r26	; 0x07
 4d2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	4a ef       	ldi	r20, 0xFA	; 250
 4da:	54 e4       	ldi	r21, 0x44	; 68
 4dc:	6d 81       	ldd	r22, Y+5	; 0x05
 4de:	7e 81       	ldd	r23, Y+6	; 0x06
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 4e8:	dc 01       	movw	r26, r24
 4ea:	cb 01       	movw	r24, r22
 4ec:	89 87       	std	Y+9, r24	; 0x09
 4ee:	9a 87       	std	Y+10, r25	; 0x0a
 4f0:	ab 87       	std	Y+11, r26	; 0x0b
 4f2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e8       	ldi	r20, 0x80	; 128
 4fa:	5f e3       	ldi	r21, 0x3F	; 63
 4fc:	69 85       	ldd	r22, Y+9	; 0x09
 4fe:	7a 85       	ldd	r23, Y+10	; 0x0a
 500:	8b 85       	ldd	r24, Y+11	; 0x0b
 502:	9c 85       	ldd	r25, Y+12	; 0x0c
 504:	0e 94 20 05 	call	0xa40	; 0xa40 <__cmpsf2>
 508:	88 23       	and	r24, r24
 50a:	2c f4       	brge	.+10     	; 0x516 <get_current+0x6e>
		__ticks = 1;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9e 87       	std	Y+14, r25	; 0x0e
 512:	8d 87       	std	Y+13, r24	; 0x0d
 514:	3f c0       	rjmp	.+126    	; 0x594 <get_current+0xec>
	else if (__tmp > 65535)
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	3f ef       	ldi	r19, 0xFF	; 255
 51a:	4f e7       	ldi	r20, 0x7F	; 127
 51c:	57 e4       	ldi	r21, 0x47	; 71
 51e:	69 85       	ldd	r22, Y+9	; 0x09
 520:	7a 85       	ldd	r23, Y+10	; 0x0a
 522:	8b 85       	ldd	r24, Y+11	; 0x0b
 524:	9c 85       	ldd	r25, Y+12	; 0x0c
 526:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 52a:	18 16       	cp	r1, r24
 52c:	4c f5       	brge	.+82     	; 0x580 <get_current+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e2       	ldi	r20, 0x20	; 32
 534:	51 e4       	ldi	r21, 0x41	; 65
 536:	6d 81       	ldd	r22, Y+5	; 0x05
 538:	7e 81       	ldd	r23, Y+6	; 0x06
 53a:	8f 81       	ldd	r24, Y+7	; 0x07
 53c:	98 85       	ldd	r25, Y+8	; 0x08
 53e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 542:	dc 01       	movw	r26, r24
 544:	cb 01       	movw	r24, r22
 546:	bc 01       	movw	r22, r24
 548:	cd 01       	movw	r24, r26
 54a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 54e:	dc 01       	movw	r26, r24
 550:	cb 01       	movw	r24, r22
 552:	9e 87       	std	Y+14, r25	; 0x0e
 554:	8d 87       	std	Y+13, r24	; 0x0d
 556:	0f c0       	rjmp	.+30     	; 0x576 <get_current+0xce>
 558:	88 ec       	ldi	r24, 0xC8	; 200
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	98 8b       	std	Y+16, r25	; 0x10
 55e:	8f 87       	std	Y+15, r24	; 0x0f
 560:	8f 85       	ldd	r24, Y+15	; 0x0f
 562:	98 89       	ldd	r25, Y+16	; 0x10
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <get_current+0xbc>
 568:	98 8b       	std	Y+16, r25	; 0x10
 56a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 56c:	8d 85       	ldd	r24, Y+13	; 0x0d
 56e:	9e 85       	ldd	r25, Y+14	; 0x0e
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	9e 87       	std	Y+14, r25	; 0x0e
 574:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 576:	8d 85       	ldd	r24, Y+13	; 0x0d
 578:	9e 85       	ldd	r25, Y+14	; 0x0e
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	69 f7       	brne	.-38     	; 0x558 <get_current+0xb0>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <get_current+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 580:	69 85       	ldd	r22, Y+9	; 0x09
 582:	7a 85       	ldd	r23, Y+10	; 0x0a
 584:	8b 85       	ldd	r24, Y+11	; 0x0b
 586:	9c 85       	ldd	r25, Y+12	; 0x0c
 588:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 58c:	dc 01       	movw	r26, r24
 58e:	cb 01       	movw	r24, r22
 590:	9e 87       	std	Y+14, r25	; 0x0e
 592:	8d 87       	std	Y+13, r24	; 0x0d
 594:	8d 85       	ldd	r24, Y+13	; 0x0d
 596:	9e 85       	ldd	r25, Y+14	; 0x0e
 598:	9a 8b       	std	Y+18, r25	; 0x12
 59a:	89 8b       	std	Y+17, r24	; 0x11
 59c:	89 89       	ldd	r24, Y+17	; 0x11
 59e:	9a 89       	ldd	r25, Y+18	; 0x12
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <get_current+0xf8>
 5a4:	9a 8b       	std	Y+18, r25	; 0x12
 5a6:	89 8b       	std	Y+17, r24	; 0x11
   _delay_ms(100);

   float meassurement = (((float)adc_sample()/1023)*3.3);
 5a8:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 5ac:	aa 27       	eor	r26, r26
 5ae:	97 fd       	sbrc	r25, 7
 5b0:	a0 95       	com	r26
 5b2:	ba 2f       	mov	r27, r26
 5b4:	bc 01       	movw	r22, r24
 5b6:	cd 01       	movw	r24, r26
 5b8:	0e 94 ba 05 	call	0xb74	; 0xb74 <__floatsisf>
 5bc:	dc 01       	movw	r26, r24
 5be:	cb 01       	movw	r24, r22
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 ec       	ldi	r19, 0xC0	; 192
 5c4:	4f e7       	ldi	r20, 0x7F	; 127
 5c6:	54 e4       	ldi	r21, 0x44	; 68
 5c8:	bc 01       	movw	r22, r24
 5ca:	cd 01       	movw	r24, r26
 5cc:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 5d0:	dc 01       	movw	r26, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	23 e3       	ldi	r18, 0x33	; 51
 5d6:	33 e3       	ldi	r19, 0x33	; 51
 5d8:	43 e5       	ldi	r20, 0x53	; 83
 5da:	50 e4       	ldi	r21, 0x40	; 64
 5dc:	bc 01       	movw	r22, r24
 5de:	cd 01       	movw	r24, r26
 5e0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 5e4:	dc 01       	movw	r26, r24
 5e6:	cb 01       	movw	r24, r22
 5e8:	89 83       	std	Y+1, r24	; 0x01
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	ab 83       	std	Y+3, r26	; 0x03
 5ee:	bc 83       	std	Y+4, r27	; 0x04
   
   meassurement = (meassurement/2.5)*0;
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e2       	ldi	r20, 0x20	; 32
 5f6:	50 e4       	ldi	r21, 0x40	; 64
 5f8:	69 81       	ldd	r22, Y+1	; 0x01
 5fa:	7a 81       	ldd	r23, Y+2	; 0x02
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 604:	dc 01       	movw	r26, r24
 606:	cb 01       	movw	r24, r22
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a9 01       	movw	r20, r18
 60e:	bc 01       	movw	r22, r24
 610:	cd 01       	movw	r24, r26
 612:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 616:	dc 01       	movw	r26, r24
 618:	cb 01       	movw	r24, r22
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	9a 83       	std	Y+2, r25	; 0x02
 61e:	ab 83       	std	Y+3, r26	; 0x03
 620:	bc 83       	std	Y+4, r27	; 0x04

   return meassurement;
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	9a 81       	ldd	r25, Y+2	; 0x02
 626:	ab 81       	ldd	r26, Y+3	; 0x03
 628:	bc 81       	ldd	r27, Y+4	; 0x04
}
 62a:	bc 01       	movw	r22, r24
 62c:	cd 01       	movw	r24, r26
 62e:	62 96       	adiw	r28, 0x12	; 18
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <get_lipo>:
 * Returns the actual lipo voltage
 * 
 * @return Voltage
 */
float get_lipo()
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	62 97       	sbiw	r28, 0x12	; 18
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
   adc_init(3);
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	a8 ec       	ldi	r26, 0xC8	; 200
 662:	b2 e4       	ldi	r27, 0x42	; 66
 664:	8d 83       	std	Y+5, r24	; 0x05
 666:	9e 83       	std	Y+6, r25	; 0x06
 668:	af 83       	std	Y+7, r26	; 0x07
 66a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	4a ef       	ldi	r20, 0xFA	; 250
 672:	54 e4       	ldi	r21, 0x44	; 68
 674:	6d 81       	ldd	r22, Y+5	; 0x05
 676:	7e 81       	ldd	r23, Y+6	; 0x06
 678:	8f 81       	ldd	r24, Y+7	; 0x07
 67a:	98 85       	ldd	r25, Y+8	; 0x08
 67c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 680:	dc 01       	movw	r26, r24
 682:	cb 01       	movw	r24, r22
 684:	89 87       	std	Y+9, r24	; 0x09
 686:	9a 87       	std	Y+10, r25	; 0x0a
 688:	ab 87       	std	Y+11, r26	; 0x0b
 68a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	40 e8       	ldi	r20, 0x80	; 128
 692:	5f e3       	ldi	r21, 0x3F	; 63
 694:	69 85       	ldd	r22, Y+9	; 0x09
 696:	7a 85       	ldd	r23, Y+10	; 0x0a
 698:	8b 85       	ldd	r24, Y+11	; 0x0b
 69a:	9c 85       	ldd	r25, Y+12	; 0x0c
 69c:	0e 94 20 05 	call	0xa40	; 0xa40 <__cmpsf2>
 6a0:	88 23       	and	r24, r24
 6a2:	2c f4       	brge	.+10     	; 0x6ae <get_lipo+0x6e>
		__ticks = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	9e 87       	std	Y+14, r25	; 0x0e
 6aa:	8d 87       	std	Y+13, r24	; 0x0d
 6ac:	3f c0       	rjmp	.+126    	; 0x72c <get_lipo+0xec>
	else if (__tmp > 65535)
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	3f ef       	ldi	r19, 0xFF	; 255
 6b2:	4f e7       	ldi	r20, 0x7F	; 127
 6b4:	57 e4       	ldi	r21, 0x47	; 71
 6b6:	69 85       	ldd	r22, Y+9	; 0x09
 6b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 6ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 6bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 6be:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__gesf2>
 6c2:	18 16       	cp	r1, r24
 6c4:	4c f5       	brge	.+82     	; 0x718 <get_lipo+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	40 e2       	ldi	r20, 0x20	; 32
 6cc:	51 e4       	ldi	r21, 0x41	; 65
 6ce:	6d 81       	ldd	r22, Y+5	; 0x05
 6d0:	7e 81       	ldd	r23, Y+6	; 0x06
 6d2:	8f 81       	ldd	r24, Y+7	; 0x07
 6d4:	98 85       	ldd	r25, Y+8	; 0x08
 6d6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 6da:	dc 01       	movw	r26, r24
 6dc:	cb 01       	movw	r24, r22
 6de:	bc 01       	movw	r22, r24
 6e0:	cd 01       	movw	r24, r26
 6e2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 6e6:	dc 01       	movw	r26, r24
 6e8:	cb 01       	movw	r24, r22
 6ea:	9e 87       	std	Y+14, r25	; 0x0e
 6ec:	8d 87       	std	Y+13, r24	; 0x0d
 6ee:	0f c0       	rjmp	.+30     	; 0x70e <get_lipo+0xce>
 6f0:	88 ec       	ldi	r24, 0xC8	; 200
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	98 8b       	std	Y+16, r25	; 0x10
 6f6:	8f 87       	std	Y+15, r24	; 0x0f
 6f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 6fa:	98 89       	ldd	r25, Y+16	; 0x10
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <get_lipo+0xbc>
 700:	98 8b       	std	Y+16, r25	; 0x10
 702:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 704:	8d 85       	ldd	r24, Y+13	; 0x0d
 706:	9e 85       	ldd	r25, Y+14	; 0x0e
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	9e 87       	std	Y+14, r25	; 0x0e
 70c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 70e:	8d 85       	ldd	r24, Y+13	; 0x0d
 710:	9e 85       	ldd	r25, Y+14	; 0x0e
 712:	00 97       	sbiw	r24, 0x00	; 0
 714:	69 f7       	brne	.-38     	; 0x6f0 <get_lipo+0xb0>
 716:	14 c0       	rjmp	.+40     	; 0x740 <get_lipo+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 718:	69 85       	ldd	r22, Y+9	; 0x09
 71a:	7a 85       	ldd	r23, Y+10	; 0x0a
 71c:	8b 85       	ldd	r24, Y+11	; 0x0b
 71e:	9c 85       	ldd	r25, Y+12	; 0x0c
 720:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fixunssfsi>
 724:	dc 01       	movw	r26, r24
 726:	cb 01       	movw	r24, r22
 728:	9e 87       	std	Y+14, r25	; 0x0e
 72a:	8d 87       	std	Y+13, r24	; 0x0d
 72c:	8d 85       	ldd	r24, Y+13	; 0x0d
 72e:	9e 85       	ldd	r25, Y+14	; 0x0e
 730:	9a 8b       	std	Y+18, r25	; 0x12
 732:	89 8b       	std	Y+17, r24	; 0x11
 734:	89 89       	ldd	r24, Y+17	; 0x11
 736:	9a 89       	ldd	r25, Y+18	; 0x12
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <get_lipo+0xf8>
 73c:	9a 8b       	std	Y+18, r25	; 0x12
 73e:	89 8b       	std	Y+17, r24	; 0x11
   _delay_ms(100);
   
   float meassurement = (((float)adc_sample()/1023)*3.3);
 740:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 744:	aa 27       	eor	r26, r26
 746:	97 fd       	sbrc	r25, 7
 748:	a0 95       	com	r26
 74a:	ba 2f       	mov	r27, r26
 74c:	bc 01       	movw	r22, r24
 74e:	cd 01       	movw	r24, r26
 750:	0e 94 ba 05 	call	0xb74	; 0xb74 <__floatsisf>
 754:	dc 01       	movw	r26, r24
 756:	cb 01       	movw	r24, r22
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 ec       	ldi	r19, 0xC0	; 192
 75c:	4f e7       	ldi	r20, 0x7F	; 127
 75e:	54 e4       	ldi	r21, 0x44	; 68
 760:	bc 01       	movw	r22, r24
 762:	cd 01       	movw	r24, r26
 764:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 768:	dc 01       	movw	r26, r24
 76a:	cb 01       	movw	r24, r22
 76c:	23 e3       	ldi	r18, 0x33	; 51
 76e:	33 e3       	ldi	r19, 0x33	; 51
 770:	43 e5       	ldi	r20, 0x53	; 83
 772:	50 e4       	ldi	r21, 0x40	; 64
 774:	bc 01       	movw	r22, r24
 776:	cd 01       	movw	r24, r26
 778:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 77c:	dc 01       	movw	r26, r24
 77e:	cb 01       	movw	r24, r22
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	9a 83       	std	Y+2, r25	; 0x02
 784:	ab 83       	std	Y+3, r26	; 0x03
 786:	bc 83       	std	Y+4, r27	; 0x04
   
   meassurement = (meassurement/2.5)*12.4;
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	40 e2       	ldi	r20, 0x20	; 32
 78e:	50 e4       	ldi	r21, 0x40	; 64
 790:	69 81       	ldd	r22, Y+1	; 0x01
 792:	7a 81       	ldd	r23, Y+2	; 0x02
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	9c 81       	ldd	r25, Y+4	; 0x04
 798:	0e 94 24 05 	call	0xa48	; 0xa48 <__divsf3>
 79c:	dc 01       	movw	r26, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	26 e6       	ldi	r18, 0x66	; 102
 7a2:	36 e6       	ldi	r19, 0x66	; 102
 7a4:	46 e4       	ldi	r20, 0x46	; 70
 7a6:	51 e4       	ldi	r21, 0x41	; 65
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3>
 7b0:	dc 01       	movw	r26, r24
 7b2:	cb 01       	movw	r24, r22
 7b4:	89 83       	std	Y+1, r24	; 0x01
 7b6:	9a 83       	std	Y+2, r25	; 0x02
 7b8:	ab 83       	std	Y+3, r26	; 0x03
 7ba:	bc 83       	std	Y+4, r27	; 0x04

   return meassurement;
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	9a 81       	ldd	r25, Y+2	; 0x02
 7c0:	ab 81       	ldd	r26, Y+3	; 0x03
 7c2:	bc 81       	ldd	r27, Y+4	; 0x04
}
 7c4:	bc 01       	movw	r22, r24
 7c6:	cd 01       	movw	r24, r26
 7c8:	62 96       	adiw	r28, 0x12	; 18
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <power_control>:
 * Power control
 * 
 * @param on or off
 */
void power_control(char state)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	1f 92       	push	r1
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	89 83       	std	Y+1, r24	; 0x01
   if(state == ON)
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	51 f4       	brne	.+20     	; 0x800 <power_control+0x26>
   {
      PORTD &= ~(1<<PORTD4);
 7ec:	8b e2       	ldi	r24, 0x2B	; 43
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	2b e2       	ldi	r18, 0x2B	; 43
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f9 01       	movw	r30, r18
 7f6:	20 81       	ld	r18, Z
 7f8:	2f 7e       	andi	r18, 0xEF	; 239
 7fa:	fc 01       	movw	r30, r24
 7fc:	20 83       	st	Z, r18
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <power_control+0x3e>
      
   }
   else if(state == OFF)
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	88 23       	and	r24, r24
 804:	49 f4       	brne	.+18     	; 0x818 <power_control+0x3e>
   {
      PORTD |= (1<<PORTD4);
 806:	8b e2       	ldi	r24, 0x2B	; 43
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	2b e2       	ldi	r18, 0x2B	; 43
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	f9 01       	movw	r30, r18
 810:	20 81       	ld	r18, Z
 812:	20 61       	ori	r18, 0x10	; 16
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
   }
   
   //return 1;
}
 818:	0f 90       	pop	r0
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <cc_control>:
 * CruiseControl control
 * 
 * @param on or off
 */
void cc_control(char state)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	1f 92       	push	r1
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	89 83       	std	Y+1, r24	; 0x01
   if(state == ON)
 82c:	89 81       	ldd	r24, Y+1	; 0x01
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	51 f4       	brne	.+20     	; 0x846 <cc_control+0x26>
   {
      PORTB |= (1<<PORTB0);
 832:	85 e2       	ldi	r24, 0x25	; 37
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	25 e2       	ldi	r18, 0x25	; 37
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	20 81       	ld	r18, Z
 83e:	21 60       	ori	r18, 0x01	; 1
 840:	fc 01       	movw	r30, r24
 842:	20 83       	st	Z, r18
 844:	0c c0       	rjmp	.+24     	; 0x85e <cc_control+0x3e>
      
   }
   else if(state == OFF)
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	88 23       	and	r24, r24
 84a:	49 f4       	brne	.+18     	; 0x85e <cc_control+0x3e>
   {
      PORTB &= ~(1<<PORTB0);
 84c:	85 e2       	ldi	r24, 0x25	; 37
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	25 e2       	ldi	r18, 0x25	; 37
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	f9 01       	movw	r30, r18
 856:	20 81       	ld	r18, Z
 858:	2e 7f       	andi	r18, 0xFE	; 254
 85a:	fc 01       	movw	r30, r24
 85c:	20 83       	st	Z, r18
   }
   
   //return 1;
}
 85e:	0f 90       	pop	r0
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <main>:


int main(void)
{
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	68 97       	sbiw	r28, 0x18	; 24
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	de bf       	out	0x3e, r29	; 62
 876:	0f be       	out	0x3f, r0	; 63
 878:	cd bf       	out	0x3d, r28	; 61
   powermanagement_init();
 87a:	0e 94 40 00 	call	0x80	; 0x80 <powermanagement_init>
   
   char power_status = 1;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	8b 83       	std	Y+3, r24	; 0x03
   char cc_status = 1;   
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	8c 83       	std	Y+4, r24	; 0x04
   
   float five_rail = 0;
 886:	1d 82       	std	Y+5, r1	; 0x05
 888:	1e 82       	std	Y+6, r1	; 0x06
 88a:	1f 82       	std	Y+7, r1	; 0x07
 88c:	18 86       	std	Y+8, r1	; 0x08
   float three_rail = 0;
 88e:	19 86       	std	Y+9, r1	; 0x09
 890:	1a 86       	std	Y+10, r1	; 0x0a
 892:	1b 86       	std	Y+11, r1	; 0x0b
 894:	1c 86       	std	Y+12, r1	; 0x0c
   float current = 0;
 896:	1d 86       	std	Y+13, r1	; 0x0d
 898:	1e 86       	std	Y+14, r1	; 0x0e
 89a:	1f 86       	std	Y+15, r1	; 0x0f
 89c:	18 8a       	std	Y+16, r1	; 0x10
   float lipo = 0;
 89e:	19 8a       	std	Y+17, r1	; 0x11
 8a0:	1a 8a       	std	Y+18, r1	; 0x12
 8a2:	1b 8a       	std	Y+19, r1	; 0x13
 8a4:	1c 8a       	std	Y+20, r1	; 0x14
   
   //TWI Init
   TWAR = ( 0x04 << 1);
 8a6:	8a eb       	ldi	r24, 0xBA	; 186
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	28 e0       	ldi	r18, 0x08	; 8
 8ac:	fc 01       	movw	r30, r24
 8ae:	20 83       	st	Z, r18
   TWAR |= 0x01;
 8b0:	8a eb       	ldi	r24, 0xBA	; 186
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	2a eb       	ldi	r18, 0xBA	; 186
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	f9 01       	movw	r30, r18
 8ba:	20 81       	ld	r18, Z
 8bc:	21 60       	ori	r18, 0x01	; 1
 8be:	fc 01       	movw	r30, r24
 8c0:	20 83       	st	Z, r18
   TWCR = ( (1<<TWEN) | (1<<TWEA) );
 8c2:	8c eb       	ldi	r24, 0xBC	; 188
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	24 e4       	ldi	r18, 0x44	; 68
 8c8:	fc 01       	movw	r30, r24
 8ca:	20 83       	st	Z, r18
   TWCR &= ~( (1<<TWSTA) | (1<<TWSTO) );
 8cc:	8c eb       	ldi	r24, 0xBC	; 188
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	2c eb       	ldi	r18, 0xBC	; 188
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	f9 01       	movw	r30, r18
 8d6:	20 81       	ld	r18, Z
 8d8:	2f 7c       	andi	r18, 0xCF	; 207
 8da:	fc 01       	movw	r30, r24
 8dc:	20 83       	st	Z, r18
	   
   int data;
   int status;
	     
	int counter = 0;
 8de:	1a 82       	std	Y+2, r1	; 0x02
 8e0:	19 82       	std	Y+1, r1	; 0x01
		     
    while(1)
    {
      power_control(power_status);
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	0e 94 ed 03 	call	0x7da	; 0x7da <power_control>
      cc_control(cc_status);
 8e8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ea:	0e 94 10 04 	call	0x820	; 0x820 <cc_control>
      
      five_rail = get_five_rail();
 8ee:	0e 94 ba 00 	call	0x174	; 0x174 <get_five_rail>
 8f2:	dc 01       	movw	r26, r24
 8f4:	cb 01       	movw	r24, r22
 8f6:	8d 83       	std	Y+5, r24	; 0x05
 8f8:	9e 83       	std	Y+6, r25	; 0x06
 8fa:	af 83       	std	Y+7, r26	; 0x07
 8fc:	b8 87       	std	Y+8, r27	; 0x08
      three_rail = get_three_rail();
 8fe:	0e 94 87 01 	call	0x30e	; 0x30e <get_three_rail>
 902:	dc 01       	movw	r26, r24
 904:	cb 01       	movw	r24, r22
 906:	89 87       	std	Y+9, r24	; 0x09
 908:	9a 87       	std	Y+10, r25	; 0x0a
 90a:	ab 87       	std	Y+11, r26	; 0x0b
 90c:	bc 87       	std	Y+12, r27	; 0x0c
      current = get_current();
 90e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <get_current>
 912:	dc 01       	movw	r26, r24
 914:	cb 01       	movw	r24, r22
 916:	8d 87       	std	Y+13, r24	; 0x0d
 918:	9e 87       	std	Y+14, r25	; 0x0e
 91a:	af 87       	std	Y+15, r26	; 0x0f
 91c:	b8 8b       	std	Y+16, r27	; 0x10
      lipo = get_lipo();
 91e:	0e 94 20 03 	call	0x640	; 0x640 <get_lipo>
 922:	dc 01       	movw	r26, r24
 924:	cb 01       	movw	r24, r22
 926:	89 8b       	std	Y+17, r24	; 0x11
 928:	9a 8b       	std	Y+18, r25	; 0x12
 92a:	ab 8b       	std	Y+19, r26	; 0x13
 92c:	bc 8b       	std	Y+20, r27	; 0x14
	  

	  

	  data = TWDR;
 92e:	8b eb       	ldi	r24, 0xBB	; 187
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	fc 01       	movw	r30, r24
 934:	80 81       	ld	r24, Z
 936:	88 2f       	mov	r24, r24
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	9e 8b       	std	Y+22, r25	; 0x16
 93c:	8d 8b       	std	Y+21, r24	; 0x15
	  status = TWSR;
 93e:	89 eb       	ldi	r24, 0xB9	; 185
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	fc 01       	movw	r30, r24
 944:	80 81       	ld	r24, Z
 946:	88 2f       	mov	r24, r24
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	98 8f       	std	Y+24, r25	; 0x18
 94c:	8f 8b       	std	Y+23, r24	; 0x17
	  data = TWDR;
 94e:	8b eb       	ldi	r24, 0xBB	; 187
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	fc 01       	movw	r30, r24
 954:	80 81       	ld	r24, Z
 956:	88 2f       	mov	r24, r24
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	9e 8b       	std	Y+22, r25	; 0x16
 95c:	8d 8b       	std	Y+21, r24	; 0x15
      //if ( (TWCR & (1<<TWINT)) == (1<<TWINT) )			  /* If it got Data via TWI for me */
	  //{	  
		  switch(TWSR)		//TWDR	Unknown identifier	Error
 95e:	89 eb       	ldi	r24, 0xB9	; 185
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	fc 01       	movw	r30, r24
 964:	80 81       	ld	r24, Z
 966:	88 2f       	mov	r24, r24
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	80 37       	cpi	r24, 0x70	; 112
 96c:	91 05       	cpc	r25, r1
 96e:	79 f0       	breq	.+30     	; 0x98e <__stack+0x8f>
 970:	81 37       	cpi	r24, 0x71	; 113
 972:	91 05       	cpc	r25, r1
 974:	24 f4       	brge	.+8      	; 0x97e <__stack+0x7f>
 976:	80 36       	cpi	r24, 0x60	; 96
 978:	91 05       	cpc	r25, r1
 97a:	99 f0       	breq	.+38     	; 0x9a2 <__stack+0xa3>
 97c:	57 c0       	rjmp	.+174    	; 0xa2c <__stack+0x12d>
 97e:	80 38       	cpi	r24, 0x80	; 128
 980:	91 05       	cpc	r25, r1
 982:	c9 f0       	breq	.+50     	; 0x9b6 <__stack+0xb7>
 984:	80 3a       	cpi	r24, 0xA0	; 160
 986:	91 05       	cpc	r25, r1
 988:	09 f4       	brne	.+2      	; 0x98c <__stack+0x8d>
 98a:	44 c0       	rjmp	.+136    	; 0xa14 <__stack+0x115>
 98c:	4f c0       	rjmp	.+158    	; 0xa2c <__stack+0x12d>

		  {

			  case 0x70:
			  TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 98e:	8c eb       	ldi	r24, 0xBC	; 188
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	2c eb       	ldi	r18, 0xBC	; 188
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	f9 01       	movw	r30, r18
 998:	20 81       	ld	r18, Z
 99a:	20 6c       	ori	r18, 0xC0	; 192
 99c:	fc 01       	movw	r30, r24
 99e:	20 83       	st	Z, r18
			  break;
 9a0:	4e c0       	rjmp	.+156    	; 0xa3e <__stack+0x13f>
	  
			  case 0x60:
				 TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 9a2:	8c eb       	ldi	r24, 0xBC	; 188
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	2c eb       	ldi	r18, 0xBC	; 188
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	f9 01       	movw	r30, r18
 9ac:	20 81       	ld	r18, Z
 9ae:	20 6c       	ori	r18, 0xC0	; 192
 9b0:	fc 01       	movw	r30, r24
 9b2:	20 83       	st	Z, r18
				 break;
 9b4:	44 c0       	rjmp	.+136    	; 0xa3e <__stack+0x13f>
		
			  case 0x80:
				 data = TWDR;
 9b6:	8b eb       	ldi	r24, 0xBB	; 187
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	fc 01       	movw	r30, r24
 9bc:	80 81       	ld	r24, Z
 9be:	88 2f       	mov	r24, r24
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	9e 8b       	std	Y+22, r25	; 0x16
 9c4:	8d 8b       	std	Y+21, r24	; 0x15
				 if(counter == 0)
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
 9c8:	9a 81       	ldd	r25, Y+2	; 0x02
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	79 f4       	brne	.+30     	; 0x9ec <__stack+0xed>
				 {
					 TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 9ce:	8c eb       	ldi	r24, 0xBC	; 188
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	2c eb       	ldi	r18, 0xBC	; 188
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	f9 01       	movw	r30, r18
 9d8:	20 81       	ld	r18, Z
 9da:	20 6c       	ori	r18, 0xC0	; 192
 9dc:	fc 01       	movw	r30, r24
 9de:	20 83       	st	Z, r18
									 counter++;
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	9a 81       	ldd	r25, Y+2	; 0x02
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	9a 83       	std	Y+2, r25	; 0x02
 9e8:	89 83       	std	Y+1, r24	; 0x01
									 break;
 9ea:	29 c0       	rjmp	.+82     	; 0xa3e <__stack+0x13f>
				 }
				 
				 if(counter == 1)
 9ec:	89 81       	ldd	r24, Y+1	; 0x01
 9ee:	9a 81       	ldd	r25, Y+2	; 0x02
 9f0:	81 30       	cpi	r24, 0x01	; 1
 9f2:	91 05       	cpc	r25, r1
 9f4:	49 f4       	brne	.+18     	; 0xa08 <__stack+0x109>
				 {
					 TWCR |= ( (1<<TWINT) );
 9f6:	8c eb       	ldi	r24, 0xBC	; 188
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	2c eb       	ldi	r18, 0xBC	; 188
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	f9 01       	movw	r30, r18
 a00:	20 81       	ld	r18, Z
 a02:	20 68       	ori	r18, 0x80	; 128
 a04:	fc 01       	movw	r30, r24
 a06:	20 83       	st	Z, r18
				 }
				 counter++;
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	9a 81       	ldd	r25, Y+2	; 0x02
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	9a 83       	std	Y+2, r25	; 0x02
 a10:	89 83       	std	Y+1, r24	; 0x01
				 break;
 a12:	15 c0       	rjmp	.+42     	; 0xa3e <__stack+0x13f>
				 
				case 0xA0:            /* Received Stop or Repeated Start while still addressed */
					TWCR |= ( (1<<TWINT) );			                /* Switch to not Addressed */	
 a14:	8c eb       	ldi	r24, 0xBC	; 188
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	2c eb       	ldi	r18, 0xBC	; 188
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	f9 01       	movw	r30, r18
 a1e:	20 81       	ld	r18, Z
 a20:	20 68       	ori	r18, 0x80	; 128
 a22:	fc 01       	movw	r30, r24
 a24:	20 83       	st	Z, r18
					counter = 0;
 a26:	1a 82       	std	Y+2, r1	; 0x02
 a28:	19 82       	std	Y+1, r1	; 0x01
					break;		
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <__stack+0x13f>
							 
			  default:
			  status = TWDR;
 a2c:	8b eb       	ldi	r24, 0xBB	; 187
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	fc 01       	movw	r30, r24
 a32:	80 81       	ld	r24, Z
 a34:	88 2f       	mov	r24, r24
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	98 8f       	std	Y+24, r25	; 0x18
 a3a:	8f 8b       	std	Y+23, r24	; 0x17
			    break;
 a3c:	00 00       	nop
		  }
	  }
 a3e:	51 cf       	rjmp	.-350    	; 0x8e2 <main+0x7c>

00000a40 <__cmpsf2>:
 a40:	d4 d0       	rcall	.+424    	; 0xbea <__fp_cmp>
 a42:	08 f4       	brcc	.+2      	; 0xa46 <__cmpsf2+0x6>
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	08 95       	ret

00000a48 <__divsf3>:
 a48:	0c d0       	rcall	.+24     	; 0xa62 <__divsf3x>
 a4a:	0a c1       	rjmp	.+532    	; 0xc60 <__fp_round>
 a4c:	02 d1       	rcall	.+516    	; 0xc52 <__fp_pscB>
 a4e:	40 f0       	brcs	.+16     	; 0xa60 <__divsf3+0x18>
 a50:	f9 d0       	rcall	.+498    	; 0xc44 <__fp_pscA>
 a52:	30 f0       	brcs	.+12     	; 0xa60 <__divsf3+0x18>
 a54:	21 f4       	brne	.+8      	; 0xa5e <__divsf3+0x16>
 a56:	5f 3f       	cpi	r21, 0xFF	; 255
 a58:	19 f0       	breq	.+6      	; 0xa60 <__divsf3+0x18>
 a5a:	eb c0       	rjmp	.+470    	; 0xc32 <__fp_inf>
 a5c:	51 11       	cpse	r21, r1
 a5e:	34 c1       	rjmp	.+616    	; 0xcc8 <__fp_szero>
 a60:	ee c0       	rjmp	.+476    	; 0xc3e <__fp_nan>

00000a62 <__divsf3x>:
 a62:	0f d1       	rcall	.+542    	; 0xc82 <__fp_split3>
 a64:	98 f3       	brcs	.-26     	; 0xa4c <__divsf3+0x4>

00000a66 <__divsf3_pse>:
 a66:	99 23       	and	r25, r25
 a68:	c9 f3       	breq	.-14     	; 0xa5c <__divsf3+0x14>
 a6a:	55 23       	and	r21, r21
 a6c:	b1 f3       	breq	.-20     	; 0xa5a <__divsf3+0x12>
 a6e:	95 1b       	sub	r25, r21
 a70:	55 0b       	sbc	r21, r21
 a72:	bb 27       	eor	r27, r27
 a74:	aa 27       	eor	r26, r26
 a76:	62 17       	cp	r22, r18
 a78:	73 07       	cpc	r23, r19
 a7a:	84 07       	cpc	r24, r20
 a7c:	38 f0       	brcs	.+14     	; 0xa8c <__divsf3_pse+0x26>
 a7e:	9f 5f       	subi	r25, 0xFF	; 255
 a80:	5f 4f       	sbci	r21, 0xFF	; 255
 a82:	22 0f       	add	r18, r18
 a84:	33 1f       	adc	r19, r19
 a86:	44 1f       	adc	r20, r20
 a88:	aa 1f       	adc	r26, r26
 a8a:	a9 f3       	breq	.-22     	; 0xa76 <__divsf3_pse+0x10>
 a8c:	33 d0       	rcall	.+102    	; 0xaf4 <__divsf3_pse+0x8e>
 a8e:	0e 2e       	mov	r0, r30
 a90:	3a f0       	brmi	.+14     	; 0xaa0 <__divsf3_pse+0x3a>
 a92:	e0 e8       	ldi	r30, 0x80	; 128
 a94:	30 d0       	rcall	.+96     	; 0xaf6 <__divsf3_pse+0x90>
 a96:	91 50       	subi	r25, 0x01	; 1
 a98:	50 40       	sbci	r21, 0x00	; 0
 a9a:	e6 95       	lsr	r30
 a9c:	00 1c       	adc	r0, r0
 a9e:	ca f7       	brpl	.-14     	; 0xa92 <__divsf3_pse+0x2c>
 aa0:	29 d0       	rcall	.+82     	; 0xaf4 <__divsf3_pse+0x8e>
 aa2:	fe 2f       	mov	r31, r30
 aa4:	27 d0       	rcall	.+78     	; 0xaf4 <__divsf3_pse+0x8e>
 aa6:	66 0f       	add	r22, r22
 aa8:	77 1f       	adc	r23, r23
 aaa:	88 1f       	adc	r24, r24
 aac:	bb 1f       	adc	r27, r27
 aae:	26 17       	cp	r18, r22
 ab0:	37 07       	cpc	r19, r23
 ab2:	48 07       	cpc	r20, r24
 ab4:	ab 07       	cpc	r26, r27
 ab6:	b0 e8       	ldi	r27, 0x80	; 128
 ab8:	09 f0       	breq	.+2      	; 0xabc <__divsf3_pse+0x56>
 aba:	bb 0b       	sbc	r27, r27
 abc:	80 2d       	mov	r24, r0
 abe:	bf 01       	movw	r22, r30
 ac0:	ff 27       	eor	r31, r31
 ac2:	93 58       	subi	r25, 0x83	; 131
 ac4:	5f 4f       	sbci	r21, 0xFF	; 255
 ac6:	2a f0       	brmi	.+10     	; 0xad2 <__divsf3_pse+0x6c>
 ac8:	9e 3f       	cpi	r25, 0xFE	; 254
 aca:	51 05       	cpc	r21, r1
 acc:	68 f0       	brcs	.+26     	; 0xae8 <__divsf3_pse+0x82>
 ace:	b1 c0       	rjmp	.+354    	; 0xc32 <__fp_inf>
 ad0:	fb c0       	rjmp	.+502    	; 0xcc8 <__fp_szero>
 ad2:	5f 3f       	cpi	r21, 0xFF	; 255
 ad4:	ec f3       	brlt	.-6      	; 0xad0 <__divsf3_pse+0x6a>
 ad6:	98 3e       	cpi	r25, 0xE8	; 232
 ad8:	dc f3       	brlt	.-10     	; 0xad0 <__divsf3_pse+0x6a>
 ada:	86 95       	lsr	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	b7 95       	ror	r27
 ae2:	f7 95       	ror	r31
 ae4:	9f 5f       	subi	r25, 0xFF	; 255
 ae6:	c9 f7       	brne	.-14     	; 0xada <__divsf3_pse+0x74>
 ae8:	88 0f       	add	r24, r24
 aea:	91 1d       	adc	r25, r1
 aec:	96 95       	lsr	r25
 aee:	87 95       	ror	r24
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret
 af4:	e1 e0       	ldi	r30, 0x01	; 1
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	bb 1f       	adc	r27, r27
 afe:	62 17       	cp	r22, r18
 b00:	73 07       	cpc	r23, r19
 b02:	84 07       	cpc	r24, r20
 b04:	ba 07       	cpc	r27, r26
 b06:	20 f0       	brcs	.+8      	; 0xb10 <__divsf3_pse+0xaa>
 b08:	62 1b       	sub	r22, r18
 b0a:	73 0b       	sbc	r23, r19
 b0c:	84 0b       	sbc	r24, r20
 b0e:	ba 0b       	sbc	r27, r26
 b10:	ee 1f       	adc	r30, r30
 b12:	88 f7       	brcc	.-30     	; 0xaf6 <__divsf3_pse+0x90>
 b14:	e0 95       	com	r30
 b16:	08 95       	ret

00000b18 <__fixunssfsi>:
 b18:	bc d0       	rcall	.+376    	; 0xc92 <__fp_splitA>
 b1a:	88 f0       	brcs	.+34     	; 0xb3e <__fixunssfsi+0x26>
 b1c:	9f 57       	subi	r25, 0x7F	; 127
 b1e:	90 f0       	brcs	.+36     	; 0xb44 <__fixunssfsi+0x2c>
 b20:	b9 2f       	mov	r27, r25
 b22:	99 27       	eor	r25, r25
 b24:	b7 51       	subi	r27, 0x17	; 23
 b26:	a0 f0       	brcs	.+40     	; 0xb50 <__fixunssfsi+0x38>
 b28:	d1 f0       	breq	.+52     	; 0xb5e <__fixunssfsi+0x46>
 b2a:	66 0f       	add	r22, r22
 b2c:	77 1f       	adc	r23, r23
 b2e:	88 1f       	adc	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	1a f0       	brmi	.+6      	; 0xb3a <__fixunssfsi+0x22>
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__fixunssfsi+0x12>
 b38:	12 c0       	rjmp	.+36     	; 0xb5e <__fixunssfsi+0x46>
 b3a:	b1 30       	cpi	r27, 0x01	; 1
 b3c:	81 f0       	breq	.+32     	; 0xb5e <__fixunssfsi+0x46>
 b3e:	c3 d0       	rcall	.+390    	; 0xcc6 <__fp_zero>
 b40:	b1 e0       	ldi	r27, 0x01	; 1
 b42:	08 95       	ret
 b44:	c0 c0       	rjmp	.+384    	; 0xcc6 <__fp_zero>
 b46:	67 2f       	mov	r22, r23
 b48:	78 2f       	mov	r23, r24
 b4a:	88 27       	eor	r24, r24
 b4c:	b8 5f       	subi	r27, 0xF8	; 248
 b4e:	39 f0       	breq	.+14     	; 0xb5e <__fixunssfsi+0x46>
 b50:	b9 3f       	cpi	r27, 0xF9	; 249
 b52:	cc f3       	brlt	.-14     	; 0xb46 <__fixunssfsi+0x2e>
 b54:	86 95       	lsr	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	b3 95       	inc	r27
 b5c:	d9 f7       	brne	.-10     	; 0xb54 <__fixunssfsi+0x3c>
 b5e:	3e f4       	brtc	.+14     	; 0xb6e <__fixunssfsi+0x56>
 b60:	90 95       	com	r25
 b62:	80 95       	com	r24
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <__floatunsisf>:
 b70:	e8 94       	clt
 b72:	09 c0       	rjmp	.+18     	; 0xb86 <__floatsisf+0x12>

00000b74 <__floatsisf>:
 b74:	97 fb       	bst	r25, 7
 b76:	3e f4       	brtc	.+14     	; 0xb86 <__floatsisf+0x12>
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	99 23       	and	r25, r25
 b88:	a9 f0       	breq	.+42     	; 0xbb4 <__floatsisf+0x40>
 b8a:	f9 2f       	mov	r31, r25
 b8c:	96 e9       	ldi	r25, 0x96	; 150
 b8e:	bb 27       	eor	r27, r27
 b90:	93 95       	inc	r25
 b92:	f6 95       	lsr	r31
 b94:	87 95       	ror	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	b7 95       	ror	r27
 b9c:	f1 11       	cpse	r31, r1
 b9e:	f8 cf       	rjmp	.-16     	; 0xb90 <__floatsisf+0x1c>
 ba0:	fa f4       	brpl	.+62     	; 0xbe0 <__floatsisf+0x6c>
 ba2:	bb 0f       	add	r27, r27
 ba4:	11 f4       	brne	.+4      	; 0xbaa <__floatsisf+0x36>
 ba6:	60 ff       	sbrs	r22, 0
 ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <__floatsisf+0x6c>
 baa:	6f 5f       	subi	r22, 0xFF	; 255
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <__floatsisf+0x6c>
 bb4:	88 23       	and	r24, r24
 bb6:	11 f0       	breq	.+4      	; 0xbbc <__floatsisf+0x48>
 bb8:	96 e9       	ldi	r25, 0x96	; 150
 bba:	11 c0       	rjmp	.+34     	; 0xbde <__floatsisf+0x6a>
 bbc:	77 23       	and	r23, r23
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <__floatsisf+0x54>
 bc0:	9e e8       	ldi	r25, 0x8E	; 142
 bc2:	87 2f       	mov	r24, r23
 bc4:	76 2f       	mov	r23, r22
 bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <__floatsisf+0x5e>
 bc8:	66 23       	and	r22, r22
 bca:	71 f0       	breq	.+28     	; 0xbe8 <__floatsisf+0x74>
 bcc:	96 e8       	ldi	r25, 0x86	; 134
 bce:	86 2f       	mov	r24, r22
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	2a f0       	brmi	.+10     	; 0xbe0 <__floatsisf+0x6c>
 bd6:	9a 95       	dec	r25
 bd8:	66 0f       	add	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	da f7       	brpl	.-10     	; 0xbd6 <__floatsisf+0x62>
 be0:	88 0f       	add	r24, r24
 be2:	96 95       	lsr	r25
 be4:	87 95       	ror	r24
 be6:	97 f9       	bld	r25, 7
 be8:	08 95       	ret

00000bea <__fp_cmp>:
 bea:	99 0f       	add	r25, r25
 bec:	00 08       	sbc	r0, r0
 bee:	55 0f       	add	r21, r21
 bf0:	aa 0b       	sbc	r26, r26
 bf2:	e0 e8       	ldi	r30, 0x80	; 128
 bf4:	fe ef       	ldi	r31, 0xFE	; 254
 bf6:	16 16       	cp	r1, r22
 bf8:	17 06       	cpc	r1, r23
 bfa:	e8 07       	cpc	r30, r24
 bfc:	f9 07       	cpc	r31, r25
 bfe:	c0 f0       	brcs	.+48     	; 0xc30 <__fp_cmp+0x46>
 c00:	12 16       	cp	r1, r18
 c02:	13 06       	cpc	r1, r19
 c04:	e4 07       	cpc	r30, r20
 c06:	f5 07       	cpc	r31, r21
 c08:	98 f0       	brcs	.+38     	; 0xc30 <__fp_cmp+0x46>
 c0a:	62 1b       	sub	r22, r18
 c0c:	73 0b       	sbc	r23, r19
 c0e:	84 0b       	sbc	r24, r20
 c10:	95 0b       	sbc	r25, r21
 c12:	39 f4       	brne	.+14     	; 0xc22 <__fp_cmp+0x38>
 c14:	0a 26       	eor	r0, r26
 c16:	61 f0       	breq	.+24     	; 0xc30 <__fp_cmp+0x46>
 c18:	23 2b       	or	r18, r19
 c1a:	24 2b       	or	r18, r20
 c1c:	25 2b       	or	r18, r21
 c1e:	21 f4       	brne	.+8      	; 0xc28 <__fp_cmp+0x3e>
 c20:	08 95       	ret
 c22:	0a 26       	eor	r0, r26
 c24:	09 f4       	brne	.+2      	; 0xc28 <__fp_cmp+0x3e>
 c26:	a1 40       	sbci	r26, 0x01	; 1
 c28:	a6 95       	lsr	r26
 c2a:	8f ef       	ldi	r24, 0xFF	; 255
 c2c:	81 1d       	adc	r24, r1
 c2e:	81 1d       	adc	r24, r1
 c30:	08 95       	ret

00000c32 <__fp_inf>:
 c32:	97 f9       	bld	r25, 7
 c34:	9f 67       	ori	r25, 0x7F	; 127
 c36:	80 e8       	ldi	r24, 0x80	; 128
 c38:	70 e0       	ldi	r23, 0x00	; 0
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	08 95       	ret

00000c3e <__fp_nan>:
 c3e:	9f ef       	ldi	r25, 0xFF	; 255
 c40:	80 ec       	ldi	r24, 0xC0	; 192
 c42:	08 95       	ret

00000c44 <__fp_pscA>:
 c44:	00 24       	eor	r0, r0
 c46:	0a 94       	dec	r0
 c48:	16 16       	cp	r1, r22
 c4a:	17 06       	cpc	r1, r23
 c4c:	18 06       	cpc	r1, r24
 c4e:	09 06       	cpc	r0, r25
 c50:	08 95       	ret

00000c52 <__fp_pscB>:
 c52:	00 24       	eor	r0, r0
 c54:	0a 94       	dec	r0
 c56:	12 16       	cp	r1, r18
 c58:	13 06       	cpc	r1, r19
 c5a:	14 06       	cpc	r1, r20
 c5c:	05 06       	cpc	r0, r21
 c5e:	08 95       	ret

00000c60 <__fp_round>:
 c60:	09 2e       	mov	r0, r25
 c62:	03 94       	inc	r0
 c64:	00 0c       	add	r0, r0
 c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0xc>
 c68:	88 23       	and	r24, r24
 c6a:	52 f0       	brmi	.+20     	; 0xc80 <__fp_round+0x20>
 c6c:	bb 0f       	add	r27, r27
 c6e:	40 f4       	brcc	.+16     	; 0xc80 <__fp_round+0x20>
 c70:	bf 2b       	or	r27, r31
 c72:	11 f4       	brne	.+4      	; 0xc78 <__fp_round+0x18>
 c74:	60 ff       	sbrs	r22, 0
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <__fp_round+0x20>
 c78:	6f 5f       	subi	r22, 0xFF	; 255
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	08 95       	ret

00000c82 <__fp_split3>:
 c82:	57 fd       	sbrc	r21, 7
 c84:	90 58       	subi	r25, 0x80	; 128
 c86:	44 0f       	add	r20, r20
 c88:	55 1f       	adc	r21, r21
 c8a:	59 f0       	breq	.+22     	; 0xca2 <__fp_splitA+0x10>
 c8c:	5f 3f       	cpi	r21, 0xFF	; 255
 c8e:	71 f0       	breq	.+28     	; 0xcac <__fp_splitA+0x1a>
 c90:	47 95       	ror	r20

00000c92 <__fp_splitA>:
 c92:	88 0f       	add	r24, r24
 c94:	97 fb       	bst	r25, 7
 c96:	99 1f       	adc	r25, r25
 c98:	61 f0       	breq	.+24     	; 0xcb2 <__fp_splitA+0x20>
 c9a:	9f 3f       	cpi	r25, 0xFF	; 255
 c9c:	79 f0       	breq	.+30     	; 0xcbc <__fp_splitA+0x2a>
 c9e:	87 95       	ror	r24
 ca0:	08 95       	ret
 ca2:	12 16       	cp	r1, r18
 ca4:	13 06       	cpc	r1, r19
 ca6:	14 06       	cpc	r1, r20
 ca8:	55 1f       	adc	r21, r21
 caa:	f2 cf       	rjmp	.-28     	; 0xc90 <__fp_split3+0xe>
 cac:	46 95       	lsr	r20
 cae:	f1 df       	rcall	.-30     	; 0xc92 <__fp_splitA>
 cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <__fp_splitA+0x30>
 cb2:	16 16       	cp	r1, r22
 cb4:	17 06       	cpc	r1, r23
 cb6:	18 06       	cpc	r1, r24
 cb8:	99 1f       	adc	r25, r25
 cba:	f1 cf       	rjmp	.-30     	; 0xc9e <__fp_splitA+0xc>
 cbc:	86 95       	lsr	r24
 cbe:	71 05       	cpc	r23, r1
 cc0:	61 05       	cpc	r22, r1
 cc2:	08 94       	sec
 cc4:	08 95       	ret

00000cc6 <__fp_zero>:
 cc6:	e8 94       	clt

00000cc8 <__fp_szero>:
 cc8:	bb 27       	eor	r27, r27
 cca:	66 27       	eor	r22, r22
 ccc:	77 27       	eor	r23, r23
 cce:	cb 01       	movw	r24, r22
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__gesf2>:
 cd4:	8a df       	rcall	.-236    	; 0xbea <__fp_cmp>
 cd6:	08 f4       	brcc	.+2      	; 0xcda <__gesf2+0x6>
 cd8:	8f ef       	ldi	r24, 0xFF	; 255
 cda:	08 95       	ret

00000cdc <__mulsf3>:
 cdc:	0b d0       	rcall	.+22     	; 0xcf4 <__mulsf3x>
 cde:	c0 cf       	rjmp	.-128    	; 0xc60 <__fp_round>
 ce0:	b1 df       	rcall	.-158    	; 0xc44 <__fp_pscA>
 ce2:	28 f0       	brcs	.+10     	; 0xcee <__mulsf3+0x12>
 ce4:	b6 df       	rcall	.-148    	; 0xc52 <__fp_pscB>
 ce6:	18 f0       	brcs	.+6      	; 0xcee <__mulsf3+0x12>
 ce8:	95 23       	and	r25, r21
 cea:	09 f0       	breq	.+2      	; 0xcee <__mulsf3+0x12>
 cec:	a2 cf       	rjmp	.-188    	; 0xc32 <__fp_inf>
 cee:	a7 cf       	rjmp	.-178    	; 0xc3e <__fp_nan>
 cf0:	11 24       	eor	r1, r1
 cf2:	ea cf       	rjmp	.-44     	; 0xcc8 <__fp_szero>

00000cf4 <__mulsf3x>:
 cf4:	c6 df       	rcall	.-116    	; 0xc82 <__fp_split3>
 cf6:	a0 f3       	brcs	.-24     	; 0xce0 <__mulsf3+0x4>

00000cf8 <__mulsf3_pse>:
 cf8:	95 9f       	mul	r25, r21
 cfa:	d1 f3       	breq	.-12     	; 0xcf0 <__mulsf3+0x14>
 cfc:	95 0f       	add	r25, r21
 cfe:	50 e0       	ldi	r21, 0x00	; 0
 d00:	55 1f       	adc	r21, r21
 d02:	62 9f       	mul	r22, r18
 d04:	f0 01       	movw	r30, r0
 d06:	72 9f       	mul	r23, r18
 d08:	bb 27       	eor	r27, r27
 d0a:	f0 0d       	add	r31, r0
 d0c:	b1 1d       	adc	r27, r1
 d0e:	63 9f       	mul	r22, r19
 d10:	aa 27       	eor	r26, r26
 d12:	f0 0d       	add	r31, r0
 d14:	b1 1d       	adc	r27, r1
 d16:	aa 1f       	adc	r26, r26
 d18:	64 9f       	mul	r22, r20
 d1a:	66 27       	eor	r22, r22
 d1c:	b0 0d       	add	r27, r0
 d1e:	a1 1d       	adc	r26, r1
 d20:	66 1f       	adc	r22, r22
 d22:	82 9f       	mul	r24, r18
 d24:	22 27       	eor	r18, r18
 d26:	b0 0d       	add	r27, r0
 d28:	a1 1d       	adc	r26, r1
 d2a:	62 1f       	adc	r22, r18
 d2c:	73 9f       	mul	r23, r19
 d2e:	b0 0d       	add	r27, r0
 d30:	a1 1d       	adc	r26, r1
 d32:	62 1f       	adc	r22, r18
 d34:	83 9f       	mul	r24, r19
 d36:	a0 0d       	add	r26, r0
 d38:	61 1d       	adc	r22, r1
 d3a:	22 1f       	adc	r18, r18
 d3c:	74 9f       	mul	r23, r20
 d3e:	33 27       	eor	r19, r19
 d40:	a0 0d       	add	r26, r0
 d42:	61 1d       	adc	r22, r1
 d44:	23 1f       	adc	r18, r19
 d46:	84 9f       	mul	r24, r20
 d48:	60 0d       	add	r22, r0
 d4a:	21 1d       	adc	r18, r1
 d4c:	82 2f       	mov	r24, r18
 d4e:	76 2f       	mov	r23, r22
 d50:	6a 2f       	mov	r22, r26
 d52:	11 24       	eor	r1, r1
 d54:	9f 57       	subi	r25, 0x7F	; 127
 d56:	50 40       	sbci	r21, 0x00	; 0
 d58:	8a f0       	brmi	.+34     	; 0xd7c <__mulsf3_pse+0x84>
 d5a:	e1 f0       	breq	.+56     	; 0xd94 <__mulsf3_pse+0x9c>
 d5c:	88 23       	and	r24, r24
 d5e:	4a f0       	brmi	.+18     	; 0xd72 <__mulsf3_pse+0x7a>
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	bb 1f       	adc	r27, r27
 d66:	66 1f       	adc	r22, r22
 d68:	77 1f       	adc	r23, r23
 d6a:	88 1f       	adc	r24, r24
 d6c:	91 50       	subi	r25, 0x01	; 1
 d6e:	50 40       	sbci	r21, 0x00	; 0
 d70:	a9 f7       	brne	.-22     	; 0xd5c <__mulsf3_pse+0x64>
 d72:	9e 3f       	cpi	r25, 0xFE	; 254
 d74:	51 05       	cpc	r21, r1
 d76:	70 f0       	brcs	.+28     	; 0xd94 <__mulsf3_pse+0x9c>
 d78:	5c cf       	rjmp	.-328    	; 0xc32 <__fp_inf>
 d7a:	a6 cf       	rjmp	.-180    	; 0xcc8 <__fp_szero>
 d7c:	5f 3f       	cpi	r21, 0xFF	; 255
 d7e:	ec f3       	brlt	.-6      	; 0xd7a <__mulsf3_pse+0x82>
 d80:	98 3e       	cpi	r25, 0xE8	; 232
 d82:	dc f3       	brlt	.-10     	; 0xd7a <__mulsf3_pse+0x82>
 d84:	86 95       	lsr	r24
 d86:	77 95       	ror	r23
 d88:	67 95       	ror	r22
 d8a:	b7 95       	ror	r27
 d8c:	f7 95       	ror	r31
 d8e:	e7 95       	ror	r30
 d90:	9f 5f       	subi	r25, 0xFF	; 255
 d92:	c1 f7       	brne	.-16     	; 0xd84 <__mulsf3_pse+0x8c>
 d94:	fe 2b       	or	r31, r30
 d96:	88 0f       	add	r24, r24
 d98:	91 1d       	adc	r25, r1
 d9a:	96 95       	lsr	r25
 d9c:	87 95       	ror	r24
 d9e:	97 f9       	bld	r25, 7
 da0:	08 95       	ret

00000da2 <_exit>:
 da2:	f8 94       	cli

00000da4 <__stop_program>:
 da4:	ff cf       	rjmp	.-2      	; 0xda4 <__stop_program>

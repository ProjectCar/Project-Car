
ENERGY_MANAGEMENT_V0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d9  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a3  00000000  00000000  000016c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b0  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000389  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 04 	call	0x888	; 0x888 <main>
  78:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <powermanagement_init>:
* inits the general powermanagement
*
* @return Voltage
*/
void powermanagement_init()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PORTD4);                 //Set tristate for ENABLE_MCU
  88:	8a e2       	ldi	r24, 0x2A	; 42
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2a e2       	ldi	r18, 0x2A	; 42
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	20 61       	ori	r18, 0x10	; 16
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	DDRB |= (1<<PORTB0);                 //Set tristate for CRUISE_CONTROL
  9a:	84 e2       	ldi	r24, 0x24	; 36
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	24 e2       	ldi	r18, 0x24	; 36
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	21 60       	ori	r18, 0x01	; 1
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <adc_init>:
* inits the adc with the corresponding channel
*
* @param Channel
*/
void adc_init(int channel)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <adc_init+0x6>
  b8:	00 d0       	rcall	.+0      	; 0xba <adc_init+0x8>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX = 0x00;                        //Reset ADMUX register to 0
  c2:	8c e7       	ldi	r24, 0x7C	; 124
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	ADCSRA = 0x00;                       //Reset ADCSRA register to 0
  ca:	8a e7       	ldi	r24, 0x7A	; 122
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0);                 //Set ref to AVCC
  d2:	8c e7       	ldi	r24, 0x7C	; 124
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2c e7       	ldi	r18, 0x7C	; 124
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	20 64       	ori	r18, 0x40	; 64
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	int channel_bit = (channel);
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
	//ADMUX |= (channel << 4);           //Set channel
	
	ADMUX |= channel_bit;
  ec:	8c e7       	ldi	r24, 0x7C	; 124
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2c e7       	ldi	r18, 0x7C	; 124
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	32 2f       	mov	r19, r18
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	23 2b       	or	r18, r19
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	
	ADCSRA |= ( (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADATE) );   //Enable ADC, Star ADC, Set Clock Prescaler to 8
 102:	8a e7       	ldi	r24, 0x7A	; 122
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2a e7       	ldi	r18, 0x7A	; 122
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	23 6a       	ori	r18, 0xA3	; 163
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);
 114:	8a e7       	ldi	r24, 0x7A	; 122
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2a e7       	ldi	r18, 0x7A	; 122
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	20 64       	ori	r18, 0x40	; 64
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	
	//return 1;
}
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <adc_sample>:
* make a sample on the adc
*
* @return ADC-Value
*/
int adc_sample()
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <adc_sample+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	int result = 0;                      //Setup space for ADC result
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	19 82       	std	Y+1, r1	; 0x01
	
	result = ADCL + (ADCH << 8);         //Get 10bit result from ADC registers. Keep in mind to read ADCH!
 142:	88 e7       	ldi	r24, 0x78	; 120
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	89 e7       	ldi	r24, 0x79	; 121
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	98 2f       	mov	r25, r24
 15c:	88 27       	eor	r24, r24
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
	
	return result;
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
}
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <get_five_rail>:
* Returns the actual voltage on the five Volt rail
*
* @return Voltage
*/
float get_five_rail()
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	62 97       	sbiw	r28, 0x12	; 18
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
	adc_init(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a8 ec       	ldi	r26, 0xC8	; 200
 196:	b2 e4       	ldi	r27, 0x42	; 66
 198:	8d 83       	std	Y+5, r24	; 0x05
 19a:	9e 83       	std	Y+6, r25	; 0x06
 19c:	af 83       	std	Y+7, r26	; 0x07
 19e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	4a ef       	ldi	r20, 0xFA	; 250
 1a6:	54 e4       	ldi	r21, 0x44	; 68
 1a8:	6d 81       	ldd	r22, Y+5	; 0x05
 1aa:	7e 81       	ldd	r23, Y+6	; 0x06
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	89 87       	std	Y+9, r24	; 0x09
 1ba:	9a 87       	std	Y+10, r25	; 0x0a
 1bc:	ab 87       	std	Y+11, r26	; 0x0b
 1be:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	69 85       	ldd	r22, Y+9	; 0x09
 1ca:	7a 85       	ldd	r23, Y+10	; 0x0a
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d0:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 1d4:	88 23       	and	r24, r24
 1d6:	2c f4       	brge	.+10     	; 0x1e2 <get_five_rail+0x6e>
		__ticks = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	9e 87       	std	Y+14, r25	; 0x0e
 1de:	8d 87       	std	Y+13, r24	; 0x0d
 1e0:	3f c0       	rjmp	.+126    	; 0x260 <get_five_rail+0xec>
	else if (__tmp > 65535)
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	3f ef       	ldi	r19, 0xFF	; 255
 1e6:	4f e7       	ldi	r20, 0x7F	; 127
 1e8:	57 e4       	ldi	r21, 0x47	; 71
 1ea:	69 85       	ldd	r22, Y+9	; 0x09
 1ec:	7a 85       	ldd	r23, Y+10	; 0x0a
 1ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f2:	0e 94 5d 07 	call	0xeba	; 0xeba <__gesf2>
 1f6:	18 16       	cp	r1, r24
 1f8:	4c f5       	brge	.+82     	; 0x24c <get_five_rail+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e2       	ldi	r20, 0x20	; 32
 200:	51 e4       	ldi	r21, 0x41	; 65
 202:	6d 81       	ldd	r22, Y+5	; 0x05
 204:	7e 81       	ldd	r23, Y+6	; 0x06
 206:	8f 81       	ldd	r24, Y+7	; 0x07
 208:	98 85       	ldd	r25, Y+8	; 0x08
 20a:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	bc 01       	movw	r22, r24
 214:	cd 01       	movw	r24, r26
 216:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	9e 87       	std	Y+14, r25	; 0x0e
 220:	8d 87       	std	Y+13, r24	; 0x0d
 222:	0f c0       	rjmp	.+30     	; 0x242 <get_five_rail+0xce>
 224:	88 ec       	ldi	r24, 0xC8	; 200
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	98 8b       	std	Y+16, r25	; 0x10
 22a:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22c:	8f 85       	ldd	r24, Y+15	; 0x0f
 22e:	98 89       	ldd	r25, Y+16	; 0x10
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <get_five_rail+0xbc>
 234:	98 8b       	std	Y+16, r25	; 0x10
 236:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 238:	8d 85       	ldd	r24, Y+13	; 0x0d
 23a:	9e 85       	ldd	r25, Y+14	; 0x0e
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	9e 87       	std	Y+14, r25	; 0x0e
 240:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 242:	8d 85       	ldd	r24, Y+13	; 0x0d
 244:	9e 85       	ldd	r25, Y+14	; 0x0e
 246:	89 2b       	or	r24, r25
 248:	69 f7       	brne	.-38     	; 0x224 <get_five_rail+0xb0>
 24a:	14 c0       	rjmp	.+40     	; 0x274 <get_five_rail+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24c:	69 85       	ldd	r22, Y+9	; 0x09
 24e:	7a 85       	ldd	r23, Y+10	; 0x0a
 250:	8b 85       	ldd	r24, Y+11	; 0x0b
 252:	9c 85       	ldd	r25, Y+12	; 0x0c
 254:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 258:	dc 01       	movw	r26, r24
 25a:	cb 01       	movw	r24, r22
 25c:	9e 87       	std	Y+14, r25	; 0x0e
 25e:	8d 87       	std	Y+13, r24	; 0x0d
 260:	8d 85       	ldd	r24, Y+13	; 0x0d
 262:	9e 85       	ldd	r25, Y+14	; 0x0e
 264:	9a 8b       	std	Y+18, r25	; 0x12
 266:	89 8b       	std	Y+17, r24	; 0x11
 268:	89 89       	ldd	r24, Y+17	; 0x11
 26a:	9a 89       	ldd	r25, Y+18	; 0x12
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <get_five_rail+0xf8>
 270:	9a 8b       	std	Y+18, r25	; 0x12
 272:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 274:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 278:	09 2e       	mov	r0, r25
 27a:	00 0c       	add	r0, r0
 27c:	aa 0b       	sbc	r26, r26
 27e:	bb 0b       	sbc	r27, r27
 280:	bc 01       	movw	r22, r24
 282:	cd 01       	movw	r24, r26
 284:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 ec       	ldi	r19, 0xC0	; 192
 290:	4f e7       	ldi	r20, 0x7F	; 127
 292:	54 e4       	ldi	r21, 0x44	; 68
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	23 e3       	ldi	r18, 0x33	; 51
 2a2:	33 e3       	ldi	r19, 0x33	; 51
 2a4:	43 e5       	ldi	r20, 0x53	; 83
 2a6:	50 e4       	ldi	r21, 0x40	; 64
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	ab 83       	std	Y+3, r26	; 0x03
 2ba:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*5.2;
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e2       	ldi	r20, 0x20	; 32
 2c2:	50 e4       	ldi	r21, 0x40	; 64
 2c4:	69 81       	ldd	r22, Y+1	; 0x01
 2c6:	7a 81       	ldd	r23, Y+2	; 0x02
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	9c 81       	ldd	r25, Y+4	; 0x04
 2cc:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 2d0:	dc 01       	movw	r26, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	26 e6       	ldi	r18, 0x66	; 102
 2d6:	36 e6       	ldi	r19, 0x66	; 102
 2d8:	46 ea       	ldi	r20, 0xA6	; 166
 2da:	50 e4       	ldi	r21, 0x40	; 64
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	9a 83       	std	Y+2, r25	; 0x02
 2ec:	ab 83       	std	Y+3, r26	; 0x03
 2ee:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	ab 81       	ldd	r26, Y+3	; 0x03
 2f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
 2f8:	bc 01       	movw	r22, r24
 2fa:	cd 01       	movw	r24, r26
 2fc:	62 96       	adiw	r28, 0x12	; 18
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <get_three_rail>:
* Returns the actual voltage on the three point three Volt rail
*
* @return Voltage
*/
float get_three_rail()
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	62 97       	sbiw	r28, 0x12	; 18
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
	adc_init(1);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a8 ec       	ldi	r26, 0xC8	; 200
 330:	b2 e4       	ldi	r27, 0x42	; 66
 332:	8d 83       	std	Y+5, r24	; 0x05
 334:	9e 83       	std	Y+6, r25	; 0x06
 336:	af 83       	std	Y+7, r26	; 0x07
 338:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	4a ef       	ldi	r20, 0xFA	; 250
 340:	54 e4       	ldi	r21, 0x44	; 68
 342:	6d 81       	ldd	r22, Y+5	; 0x05
 344:	7e 81       	ldd	r23, Y+6	; 0x06
 346:	8f 81       	ldd	r24, Y+7	; 0x07
 348:	98 85       	ldd	r25, Y+8	; 0x08
 34a:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 34e:	dc 01       	movw	r26, r24
 350:	cb 01       	movw	r24, r22
 352:	89 87       	std	Y+9, r24	; 0x09
 354:	9a 87       	std	Y+10, r25	; 0x0a
 356:	ab 87       	std	Y+11, r26	; 0x0b
 358:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e8       	ldi	r20, 0x80	; 128
 360:	5f e3       	ldi	r21, 0x3F	; 63
 362:	69 85       	ldd	r22, Y+9	; 0x09
 364:	7a 85       	ldd	r23, Y+10	; 0x0a
 366:	8b 85       	ldd	r24, Y+11	; 0x0b
 368:	9c 85       	ldd	r25, Y+12	; 0x0c
 36a:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 36e:	88 23       	and	r24, r24
 370:	2c f4       	brge	.+10     	; 0x37c <get_three_rail+0x6e>
		__ticks = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	9e 87       	std	Y+14, r25	; 0x0e
 378:	8d 87       	std	Y+13, r24	; 0x0d
 37a:	3f c0       	rjmp	.+126    	; 0x3fa <get_three_rail+0xec>
	else if (__tmp > 65535)
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	3f ef       	ldi	r19, 0xFF	; 255
 380:	4f e7       	ldi	r20, 0x7F	; 127
 382:	57 e4       	ldi	r21, 0x47	; 71
 384:	69 85       	ldd	r22, Y+9	; 0x09
 386:	7a 85       	ldd	r23, Y+10	; 0x0a
 388:	8b 85       	ldd	r24, Y+11	; 0x0b
 38a:	9c 85       	ldd	r25, Y+12	; 0x0c
 38c:	0e 94 5d 07 	call	0xeba	; 0xeba <__gesf2>
 390:	18 16       	cp	r1, r24
 392:	4c f5       	brge	.+82     	; 0x3e6 <get_three_rail+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e2       	ldi	r20, 0x20	; 32
 39a:	51 e4       	ldi	r21, 0x41	; 65
 39c:	6d 81       	ldd	r22, Y+5	; 0x05
 39e:	7e 81       	ldd	r23, Y+6	; 0x06
 3a0:	8f 81       	ldd	r24, Y+7	; 0x07
 3a2:	98 85       	ldd	r25, Y+8	; 0x08
 3a4:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	9e 87       	std	Y+14, r25	; 0x0e
 3ba:	8d 87       	std	Y+13, r24	; 0x0d
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <get_three_rail+0xce>
 3be:	88 ec       	ldi	r24, 0xC8	; 200
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	98 8b       	std	Y+16, r25	; 0x10
 3c4:	8f 87       	std	Y+15, r24	; 0x0f
 3c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 3c8:	98 89       	ldd	r25, Y+16	; 0x10
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <get_three_rail+0xbc>
 3ce:	98 8b       	std	Y+16, r25	; 0x10
 3d0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 3d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	9e 87       	std	Y+14, r25	; 0x0e
 3da:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3de:	9e 85       	ldd	r25, Y+14	; 0x0e
 3e0:	89 2b       	or	r24, r25
 3e2:	69 f7       	brne	.-38     	; 0x3be <get_three_rail+0xb0>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <get_three_rail+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e6:	69 85       	ldd	r22, Y+9	; 0x09
 3e8:	7a 85       	ldd	r23, Y+10	; 0x0a
 3ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 3ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ee:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 3f2:	dc 01       	movw	r26, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	9e 87       	std	Y+14, r25	; 0x0e
 3f8:	8d 87       	std	Y+13, r24	; 0x0d
 3fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 3fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 3fe:	9a 8b       	std	Y+18, r25	; 0x12
 400:	89 8b       	std	Y+17, r24	; 0x11
 402:	89 89       	ldd	r24, Y+17	; 0x11
 404:	9a 89       	ldd	r25, Y+18	; 0x12
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <get_three_rail+0xf8>
 40a:	9a 8b       	std	Y+18, r25	; 0x12
 40c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 40e:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 412:	09 2e       	mov	r0, r25
 414:	00 0c       	add	r0, r0
 416:	aa 0b       	sbc	r26, r26
 418:	bb 0b       	sbc	r27, r27
 41a:	bc 01       	movw	r22, r24
 41c:	cd 01       	movw	r24, r26
 41e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
 422:	dc 01       	movw	r26, r24
 424:	cb 01       	movw	r24, r22
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 ec       	ldi	r19, 0xC0	; 192
 42a:	4f e7       	ldi	r20, 0x7F	; 127
 42c:	54 e4       	ldi	r21, 0x44	; 68
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 436:	dc 01       	movw	r26, r24
 438:	cb 01       	movw	r24, r22
 43a:	23 e3       	ldi	r18, 0x33	; 51
 43c:	33 e3       	ldi	r19, 0x33	; 51
 43e:	43 e5       	ldi	r20, 0x53	; 83
 440:	50 e4       	ldi	r21, 0x40	; 64
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	ab 83       	std	Y+3, r26	; 0x03
 454:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*3.4;
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e2       	ldi	r20, 0x20	; 32
 45c:	50 e4       	ldi	r21, 0x40	; 64
 45e:	69 81       	ldd	r22, Y+1	; 0x01
 460:	7a 81       	ldd	r23, Y+2	; 0x02
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	9c 81       	ldd	r25, Y+4	; 0x04
 466:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 46a:	dc 01       	movw	r26, r24
 46c:	cb 01       	movw	r24, r22
 46e:	2a e9       	ldi	r18, 0x9A	; 154
 470:	39 e9       	ldi	r19, 0x99	; 153
 472:	49 e5       	ldi	r20, 0x59	; 89
 474:	50 e4       	ldi	r21, 0x40	; 64
 476:	bc 01       	movw	r22, r24
 478:	cd 01       	movw	r24, r26
 47a:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	ab 83       	std	Y+3, r26	; 0x03
 488:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	ab 81       	ldd	r26, Y+3	; 0x03
 490:	bc 81       	ldd	r27, Y+4	; 0x04
}
 492:	bc 01       	movw	r22, r24
 494:	cd 01       	movw	r24, r26
 496:	62 96       	adiw	r28, 0x12	; 18
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <get_current>:
* Returns the actual current consumption (Not yet implemented!!)
*
* @return Current
*/
float get_current()
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	62 97       	sbiw	r28, 0x12	; 18
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
	adc_init(2);
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	a8 ec       	ldi	r26, 0xC8	; 200
 4ca:	b2 e4       	ldi	r27, 0x42	; 66
 4cc:	8d 83       	std	Y+5, r24	; 0x05
 4ce:	9e 83       	std	Y+6, r25	; 0x06
 4d0:	af 83       	std	Y+7, r26	; 0x07
 4d2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	4a ef       	ldi	r20, 0xFA	; 250
 4da:	54 e4       	ldi	r21, 0x44	; 68
 4dc:	6d 81       	ldd	r22, Y+5	; 0x05
 4de:	7e 81       	ldd	r23, Y+6	; 0x06
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 4e8:	dc 01       	movw	r26, r24
 4ea:	cb 01       	movw	r24, r22
 4ec:	89 87       	std	Y+9, r24	; 0x09
 4ee:	9a 87       	std	Y+10, r25	; 0x0a
 4f0:	ab 87       	std	Y+11, r26	; 0x0b
 4f2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e8       	ldi	r20, 0x80	; 128
 4fa:	5f e3       	ldi	r21, 0x3F	; 63
 4fc:	69 85       	ldd	r22, Y+9	; 0x09
 4fe:	7a 85       	ldd	r23, Y+10	; 0x0a
 500:	8b 85       	ldd	r24, Y+11	; 0x0b
 502:	9c 85       	ldd	r25, Y+12	; 0x0c
 504:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 508:	88 23       	and	r24, r24
 50a:	2c f4       	brge	.+10     	; 0x516 <get_current+0x6e>
		__ticks = 1;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9e 87       	std	Y+14, r25	; 0x0e
 512:	8d 87       	std	Y+13, r24	; 0x0d
 514:	3f c0       	rjmp	.+126    	; 0x594 <get_current+0xec>
	else if (__tmp > 65535)
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	3f ef       	ldi	r19, 0xFF	; 255
 51a:	4f e7       	ldi	r20, 0x7F	; 127
 51c:	57 e4       	ldi	r21, 0x47	; 71
 51e:	69 85       	ldd	r22, Y+9	; 0x09
 520:	7a 85       	ldd	r23, Y+10	; 0x0a
 522:	8b 85       	ldd	r24, Y+11	; 0x0b
 524:	9c 85       	ldd	r25, Y+12	; 0x0c
 526:	0e 94 5d 07 	call	0xeba	; 0xeba <__gesf2>
 52a:	18 16       	cp	r1, r24
 52c:	4c f5       	brge	.+82     	; 0x580 <get_current+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e2       	ldi	r20, 0x20	; 32
 534:	51 e4       	ldi	r21, 0x41	; 65
 536:	6d 81       	ldd	r22, Y+5	; 0x05
 538:	7e 81       	ldd	r23, Y+6	; 0x06
 53a:	8f 81       	ldd	r24, Y+7	; 0x07
 53c:	98 85       	ldd	r25, Y+8	; 0x08
 53e:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 542:	dc 01       	movw	r26, r24
 544:	cb 01       	movw	r24, r22
 546:	bc 01       	movw	r22, r24
 548:	cd 01       	movw	r24, r26
 54a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 54e:	dc 01       	movw	r26, r24
 550:	cb 01       	movw	r24, r22
 552:	9e 87       	std	Y+14, r25	; 0x0e
 554:	8d 87       	std	Y+13, r24	; 0x0d
 556:	0f c0       	rjmp	.+30     	; 0x576 <get_current+0xce>
 558:	88 ec       	ldi	r24, 0xC8	; 200
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	98 8b       	std	Y+16, r25	; 0x10
 55e:	8f 87       	std	Y+15, r24	; 0x0f
 560:	8f 85       	ldd	r24, Y+15	; 0x0f
 562:	98 89       	ldd	r25, Y+16	; 0x10
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <get_current+0xbc>
 568:	98 8b       	std	Y+16, r25	; 0x10
 56a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 56c:	8d 85       	ldd	r24, Y+13	; 0x0d
 56e:	9e 85       	ldd	r25, Y+14	; 0x0e
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	9e 87       	std	Y+14, r25	; 0x0e
 574:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 576:	8d 85       	ldd	r24, Y+13	; 0x0d
 578:	9e 85       	ldd	r25, Y+14	; 0x0e
 57a:	89 2b       	or	r24, r25
 57c:	69 f7       	brne	.-38     	; 0x558 <get_current+0xb0>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <get_current+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 580:	69 85       	ldd	r22, Y+9	; 0x09
 582:	7a 85       	ldd	r23, Y+10	; 0x0a
 584:	8b 85       	ldd	r24, Y+11	; 0x0b
 586:	9c 85       	ldd	r25, Y+12	; 0x0c
 588:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 58c:	dc 01       	movw	r26, r24
 58e:	cb 01       	movw	r24, r22
 590:	9e 87       	std	Y+14, r25	; 0x0e
 592:	8d 87       	std	Y+13, r24	; 0x0d
 594:	8d 85       	ldd	r24, Y+13	; 0x0d
 596:	9e 85       	ldd	r25, Y+14	; 0x0e
 598:	9a 8b       	std	Y+18, r25	; 0x12
 59a:	89 8b       	std	Y+17, r24	; 0x11
 59c:	89 89       	ldd	r24, Y+17	; 0x11
 59e:	9a 89       	ldd	r25, Y+18	; 0x12
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <get_current+0xf8>
 5a4:	9a 8b       	std	Y+18, r25	; 0x12
 5a6:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 5a8:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 5ac:	09 2e       	mov	r0, r25
 5ae:	00 0c       	add	r0, r0
 5b0:	aa 0b       	sbc	r26, r26
 5b2:	bb 0b       	sbc	r27, r27
 5b4:	bc 01       	movw	r22, r24
 5b6:	cd 01       	movw	r24, r26
 5b8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
 5bc:	dc 01       	movw	r26, r24
 5be:	cb 01       	movw	r24, r22
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 ec       	ldi	r19, 0xC0	; 192
 5c4:	4f e7       	ldi	r20, 0x7F	; 127
 5c6:	54 e4       	ldi	r21, 0x44	; 68
 5c8:	bc 01       	movw	r22, r24
 5ca:	cd 01       	movw	r24, r26
 5cc:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 5d0:	dc 01       	movw	r26, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	23 e3       	ldi	r18, 0x33	; 51
 5d6:	33 e3       	ldi	r19, 0x33	; 51
 5d8:	43 e5       	ldi	r20, 0x53	; 83
 5da:	50 e4       	ldi	r21, 0x40	; 64
 5dc:	bc 01       	movw	r22, r24
 5de:	cd 01       	movw	r24, r26
 5e0:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 5e4:	dc 01       	movw	r26, r24
 5e6:	cb 01       	movw	r24, r22
 5e8:	89 83       	std	Y+1, r24	; 0x01
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	ab 83       	std	Y+3, r26	; 0x03
 5ee:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*0;
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e2       	ldi	r20, 0x20	; 32
 5f6:	50 e4       	ldi	r21, 0x40	; 64
 5f8:	69 81       	ldd	r22, Y+1	; 0x01
 5fa:	7a 81       	ldd	r23, Y+2	; 0x02
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 604:	dc 01       	movw	r26, r24
 606:	cb 01       	movw	r24, r22
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a9 01       	movw	r20, r18
 60e:	bc 01       	movw	r22, r24
 610:	cd 01       	movw	r24, r26
 612:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 616:	dc 01       	movw	r26, r24
 618:	cb 01       	movw	r24, r22
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	9a 83       	std	Y+2, r25	; 0x02
 61e:	ab 83       	std	Y+3, r26	; 0x03
 620:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	9a 81       	ldd	r25, Y+2	; 0x02
 626:	ab 81       	ldd	r26, Y+3	; 0x03
 628:	bc 81       	ldd	r27, Y+4	; 0x04
}
 62a:	bc 01       	movw	r22, r24
 62c:	cd 01       	movw	r24, r26
 62e:	62 96       	adiw	r28, 0x12	; 18
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <get_lipo>:
* Returns the actual lipo voltage
*
* @return Voltage
*/
float get_lipo()
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	62 97       	sbiw	r28, 0x12	; 18
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
	adc_init(3);
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	a8 ec       	ldi	r26, 0xC8	; 200
 662:	b2 e4       	ldi	r27, 0x42	; 66
 664:	8d 83       	std	Y+5, r24	; 0x05
 666:	9e 83       	std	Y+6, r25	; 0x06
 668:	af 83       	std	Y+7, r26	; 0x07
 66a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	4a ef       	ldi	r20, 0xFA	; 250
 672:	54 e4       	ldi	r21, 0x44	; 68
 674:	6d 81       	ldd	r22, Y+5	; 0x05
 676:	7e 81       	ldd	r23, Y+6	; 0x06
 678:	8f 81       	ldd	r24, Y+7	; 0x07
 67a:	98 85       	ldd	r25, Y+8	; 0x08
 67c:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 680:	dc 01       	movw	r26, r24
 682:	cb 01       	movw	r24, r22
 684:	89 87       	std	Y+9, r24	; 0x09
 686:	9a 87       	std	Y+10, r25	; 0x0a
 688:	ab 87       	std	Y+11, r26	; 0x0b
 68a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	40 e8       	ldi	r20, 0x80	; 128
 692:	5f e3       	ldi	r21, 0x3F	; 63
 694:	69 85       	ldd	r22, Y+9	; 0x09
 696:	7a 85       	ldd	r23, Y+10	; 0x0a
 698:	8b 85       	ldd	r24, Y+11	; 0x0b
 69a:	9c 85       	ldd	r25, Y+12	; 0x0c
 69c:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 6a0:	88 23       	and	r24, r24
 6a2:	2c f4       	brge	.+10     	; 0x6ae <get_lipo+0x6e>
		__ticks = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	9e 87       	std	Y+14, r25	; 0x0e
 6aa:	8d 87       	std	Y+13, r24	; 0x0d
 6ac:	3f c0       	rjmp	.+126    	; 0x72c <get_lipo+0xec>
	else if (__tmp > 65535)
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	3f ef       	ldi	r19, 0xFF	; 255
 6b2:	4f e7       	ldi	r20, 0x7F	; 127
 6b4:	57 e4       	ldi	r21, 0x47	; 71
 6b6:	69 85       	ldd	r22, Y+9	; 0x09
 6b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 6ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 6bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 6be:	0e 94 5d 07 	call	0xeba	; 0xeba <__gesf2>
 6c2:	18 16       	cp	r1, r24
 6c4:	4c f5       	brge	.+82     	; 0x718 <get_lipo+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	40 e2       	ldi	r20, 0x20	; 32
 6cc:	51 e4       	ldi	r21, 0x41	; 65
 6ce:	6d 81       	ldd	r22, Y+5	; 0x05
 6d0:	7e 81       	ldd	r23, Y+6	; 0x06
 6d2:	8f 81       	ldd	r24, Y+7	; 0x07
 6d4:	98 85       	ldd	r25, Y+8	; 0x08
 6d6:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 6da:	dc 01       	movw	r26, r24
 6dc:	cb 01       	movw	r24, r22
 6de:	bc 01       	movw	r22, r24
 6e0:	cd 01       	movw	r24, r26
 6e2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 6e6:	dc 01       	movw	r26, r24
 6e8:	cb 01       	movw	r24, r22
 6ea:	9e 87       	std	Y+14, r25	; 0x0e
 6ec:	8d 87       	std	Y+13, r24	; 0x0d
 6ee:	0f c0       	rjmp	.+30     	; 0x70e <get_lipo+0xce>
 6f0:	88 ec       	ldi	r24, 0xC8	; 200
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	98 8b       	std	Y+16, r25	; 0x10
 6f6:	8f 87       	std	Y+15, r24	; 0x0f
 6f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 6fa:	98 89       	ldd	r25, Y+16	; 0x10
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <get_lipo+0xbc>
 700:	98 8b       	std	Y+16, r25	; 0x10
 702:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 704:	8d 85       	ldd	r24, Y+13	; 0x0d
 706:	9e 85       	ldd	r25, Y+14	; 0x0e
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	9e 87       	std	Y+14, r25	; 0x0e
 70c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 70e:	8d 85       	ldd	r24, Y+13	; 0x0d
 710:	9e 85       	ldd	r25, Y+14	; 0x0e
 712:	89 2b       	or	r24, r25
 714:	69 f7       	brne	.-38     	; 0x6f0 <get_lipo+0xb0>
 716:	14 c0       	rjmp	.+40     	; 0x740 <get_lipo+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 718:	69 85       	ldd	r22, Y+9	; 0x09
 71a:	7a 85       	ldd	r23, Y+10	; 0x0a
 71c:	8b 85       	ldd	r24, Y+11	; 0x0b
 71e:	9c 85       	ldd	r25, Y+12	; 0x0c
 720:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 724:	dc 01       	movw	r26, r24
 726:	cb 01       	movw	r24, r22
 728:	9e 87       	std	Y+14, r25	; 0x0e
 72a:	8d 87       	std	Y+13, r24	; 0x0d
 72c:	8d 85       	ldd	r24, Y+13	; 0x0d
 72e:	9e 85       	ldd	r25, Y+14	; 0x0e
 730:	9a 8b       	std	Y+18, r25	; 0x12
 732:	89 8b       	std	Y+17, r24	; 0x11
 734:	89 89       	ldd	r24, Y+17	; 0x11
 736:	9a 89       	ldd	r25, Y+18	; 0x12
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <get_lipo+0xf8>
 73c:	9a 8b       	std	Y+18, r25	; 0x12
 73e:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(100);
	
	float meassurement = (((float)adc_sample()/1023)*3.3);
 740:	0e 94 9a 00 	call	0x134	; 0x134 <adc_sample>
 744:	09 2e       	mov	r0, r25
 746:	00 0c       	add	r0, r0
 748:	aa 0b       	sbc	r26, r26
 74a:	bb 0b       	sbc	r27, r27
 74c:	bc 01       	movw	r22, r24
 74e:	cd 01       	movw	r24, r26
 750:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
 754:	dc 01       	movw	r26, r24
 756:	cb 01       	movw	r24, r22
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 ec       	ldi	r19, 0xC0	; 192
 75c:	4f e7       	ldi	r20, 0x7F	; 127
 75e:	54 e4       	ldi	r21, 0x44	; 68
 760:	bc 01       	movw	r22, r24
 762:	cd 01       	movw	r24, r26
 764:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 768:	dc 01       	movw	r26, r24
 76a:	cb 01       	movw	r24, r22
 76c:	23 e3       	ldi	r18, 0x33	; 51
 76e:	33 e3       	ldi	r19, 0x33	; 51
 770:	43 e5       	ldi	r20, 0x53	; 83
 772:	50 e4       	ldi	r21, 0x40	; 64
 774:	bc 01       	movw	r22, r24
 776:	cd 01       	movw	r24, r26
 778:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 77c:	dc 01       	movw	r26, r24
 77e:	cb 01       	movw	r24, r22
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	9a 83       	std	Y+2, r25	; 0x02
 784:	ab 83       	std	Y+3, r26	; 0x03
 786:	bc 83       	std	Y+4, r27	; 0x04
	
	meassurement = (meassurement/2.5)*12.4;
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	40 e2       	ldi	r20, 0x20	; 32
 78e:	50 e4       	ldi	r21, 0x40	; 64
 790:	69 81       	ldd	r22, Y+1	; 0x01
 792:	7a 81       	ldd	r23, Y+2	; 0x02
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	9c 81       	ldd	r25, Y+4	; 0x04
 798:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
 79c:	dc 01       	movw	r26, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	26 e6       	ldi	r18, 0x66	; 102
 7a2:	36 e6       	ldi	r19, 0x66	; 102
 7a4:	46 e4       	ldi	r20, 0x46	; 70
 7a6:	51 e4       	ldi	r21, 0x41	; 65
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 7b0:	dc 01       	movw	r26, r24
 7b2:	cb 01       	movw	r24, r22
 7b4:	89 83       	std	Y+1, r24	; 0x01
 7b6:	9a 83       	std	Y+2, r25	; 0x02
 7b8:	ab 83       	std	Y+3, r26	; 0x03
 7ba:	bc 83       	std	Y+4, r27	; 0x04
	
	return meassurement;
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	9a 81       	ldd	r25, Y+2	; 0x02
 7c0:	ab 81       	ldd	r26, Y+3	; 0x03
 7c2:	bc 81       	ldd	r27, Y+4	; 0x04
}
 7c4:	bc 01       	movw	r22, r24
 7c6:	cd 01       	movw	r24, r26
 7c8:	62 96       	adiw	r28, 0x12	; 18
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <power_control>:
* Power control
*
* @param on or off
*/
void power_control(char state)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	1f 92       	push	r1
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	51 f4       	brne	.+20     	; 0x800 <power_control+0x26>
	{
		PORTD &= ~(1<<PORTD4);
 7ec:	8b e2       	ldi	r24, 0x2B	; 43
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	2b e2       	ldi	r18, 0x2B	; 43
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f9 01       	movw	r30, r18
 7f6:	20 81       	ld	r18, Z
 7f8:	2f 7e       	andi	r18, 0xEF	; 239
 7fa:	fc 01       	movw	r30, r24
 7fc:	20 83       	st	Z, r18
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <power_control+0x3e>
		
	}
	else if(state == OFF)
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	88 23       	and	r24, r24
 804:	49 f4       	brne	.+18     	; 0x818 <power_control+0x3e>
	{
		PORTD |= (1<<PORTD4);
 806:	8b e2       	ldi	r24, 0x2B	; 43
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	2b e2       	ldi	r18, 0x2B	; 43
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	f9 01       	movw	r30, r18
 810:	20 81       	ld	r18, Z
 812:	20 61       	ori	r18, 0x10	; 16
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
	}
	
	//return 1;
}
 818:	0f 90       	pop	r0
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <cc_control>:
* CruiseControl control
*
* @param on or off
*/
void cc_control(char state)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	1f 92       	push	r1
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	89 83       	std	Y+1, r24	; 0x01
	if(state == ON)
 82c:	89 81       	ldd	r24, Y+1	; 0x01
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	51 f4       	brne	.+20     	; 0x846 <cc_control+0x26>
	{
		PORTB |= (1<<PORTB0);
 832:	85 e2       	ldi	r24, 0x25	; 37
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	25 e2       	ldi	r18, 0x25	; 37
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	20 81       	ld	r18, Z
 83e:	21 60       	ori	r18, 0x01	; 1
 840:	fc 01       	movw	r30, r24
 842:	20 83       	st	Z, r18
 844:	0c c0       	rjmp	.+24     	; 0x85e <cc_control+0x3e>
		
	}
	else if(state == OFF)
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	88 23       	and	r24, r24
 84a:	49 f4       	brne	.+18     	; 0x85e <cc_control+0x3e>
	{
		PORTB &= ~(1<<PORTB0);
 84c:	85 e2       	ldi	r24, 0x25	; 37
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	25 e2       	ldi	r18, 0x25	; 37
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	f9 01       	movw	r30, r18
 856:	20 81       	ld	r18, Z
 858:	2e 7f       	andi	r18, 0xFE	; 254
 85a:	fc 01       	movw	r30, r24
 85c:	20 83       	st	Z, r18
	}
	
	//return 1;
}
 85e:	0f 90       	pop	r0
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <twi_init>:
/**
* TWI Init
*
*/
void twi_init(void)
{
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
	//TWI Init
	TWAR = ( 0x0A << 1 );
 86e:	8a eb       	ldi	r24, 0xBA	; 186
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	24 e1       	ldi	r18, 0x14	; 20
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
	//TWAR |= 0x01;
	TWCR = ( (1<<TWEN) | (1<<TWEA) );
 878:	8c eb       	ldi	r24, 0xBC	; 188
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	24 e4       	ldi	r18, 0x44	; 68
 87e:	fc 01       	movw	r30, r24
 880:	20 83       	st	Z, r18
}
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <main>:

int main(void)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	e6 97       	sbiw	r28, 0x36	; 54
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
	powermanagement_init();
 89c:	0e 94 40 00 	call	0x80	; 0x80 <powermanagement_init>
	
	char power_status = 1;
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	8b 83       	std	Y+3, r24	; 0x03
	char cc_status = 1;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	8c 83       	std	Y+4, r24	; 0x04
	
	float five_rail = 0;
 8a8:	1d 82       	std	Y+5, r1	; 0x05
 8aa:	1e 82       	std	Y+6, r1	; 0x06
 8ac:	1f 82       	std	Y+7, r1	; 0x07
 8ae:	18 86       	std	Y+8, r1	; 0x08
	float three_rail = 0;
 8b0:	19 86       	std	Y+9, r1	; 0x09
 8b2:	1a 86       	std	Y+10, r1	; 0x0a
 8b4:	1b 86       	std	Y+11, r1	; 0x0b
 8b6:	1c 86       	std	Y+12, r1	; 0x0c
	float current = 0;
 8b8:	1d 86       	std	Y+13, r1	; 0x0d
 8ba:	1e 86       	std	Y+14, r1	; 0x0e
 8bc:	1f 86       	std	Y+15, r1	; 0x0f
 8be:	18 8a       	std	Y+16, r1	; 0x10
	float lipo = 0;
 8c0:	19 8a       	std	Y+17, r1	; 0x11
 8c2:	1a 8a       	std	Y+18, r1	; 0x12
 8c4:	1b 8a       	std	Y+19, r1	; 0x13
 8c6:	1c 8a       	std	Y+20, r1	; 0x14
	
	int counter = 0;
 8c8:	1a 82       	std	Y+2, r1	; 0x02
 8ca:	19 82       	std	Y+1, r1	; 0x01
	
	int data = 0;
 8cc:	1e 8a       	std	Y+22, r1	; 0x16
 8ce:	1d 8a       	std	Y+21, r1	; 0x15
	int data_twi[2];
	
	while(1)
	{
		DDRD |= ( (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) );
 8d0:	8a e2       	ldi	r24, 0x2A	; 42
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	2a e2       	ldi	r18, 0x2A	; 42
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	f9 01       	movw	r30, r18
 8da:	20 81       	ld	r18, Z
 8dc:	20 6e       	ori	r18, 0xE0	; 224
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
		power_control(power_status);
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	0e 94 ed 03 	call	0x7da	; 0x7da <power_control>
		cc_control(cc_status);
 8e8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ea:	0e 94 10 04 	call	0x820	; 0x820 <cc_control>
		
		five_rail = get_five_rail();
 8ee:	0e 94 ba 00 	call	0x174	; 0x174 <get_five_rail>
 8f2:	dc 01       	movw	r26, r24
 8f4:	cb 01       	movw	r24, r22
 8f6:	8d 83       	std	Y+5, r24	; 0x05
 8f8:	9e 83       	std	Y+6, r25	; 0x06
 8fa:	af 83       	std	Y+7, r26	; 0x07
 8fc:	b8 87       	std	Y+8, r27	; 0x08
		three_rail = get_three_rail();
 8fe:	0e 94 87 01 	call	0x30e	; 0x30e <get_three_rail>
 902:	dc 01       	movw	r26, r24
 904:	cb 01       	movw	r24, r22
 906:	89 87       	std	Y+9, r24	; 0x09
 908:	9a 87       	std	Y+10, r25	; 0x0a
 90a:	ab 87       	std	Y+11, r26	; 0x0b
 90c:	bc 87       	std	Y+12, r27	; 0x0c
		current = get_current();
 90e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <get_current>
 912:	dc 01       	movw	r26, r24
 914:	cb 01       	movw	r24, r22
 916:	8d 87       	std	Y+13, r24	; 0x0d
 918:	9e 87       	std	Y+14, r25	; 0x0e
 91a:	af 87       	std	Y+15, r26	; 0x0f
 91c:	b8 8b       	std	Y+16, r27	; 0x10
		lipo = get_lipo();
 91e:	0e 94 20 03 	call	0x640	; 0x640 <get_lipo>
 922:	dc 01       	movw	r26, r24
 924:	cb 01       	movw	r24, r22
 926:	89 8b       	std	Y+17, r24	; 0x11
 928:	9a 8b       	std	Y+18, r25	; 0x12
 92a:	ab 8b       	std	Y+19, r26	; 0x13
 92c:	bc 8b       	std	Y+20, r27	; 0x14

      twi_init();
 92e:	0e 94 33 04 	call	0x866	; 0x866 <twi_init>
		
		switch(TWSR)        //TWDR    Unknown identifier    Error
 932:	89 eb       	ldi	r24, 0xB9	; 185
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	fc 01       	movw	r30, r24
 938:	80 81       	ld	r24, Z
 93a:	88 2f       	mov	r24, r24
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	80 38       	cpi	r24, 0x80	; 128
 940:	91 05       	cpc	r25, r1
 942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
 944:	c1 c0       	rjmp	.+386    	; 0xac8 <__stack+0x1c9>
 946:	80 3a       	cpi	r24, 0xA0	; 160
 948:	91 05       	cpc	r25, r1
 94a:	09 f4       	brne	.+2      	; 0x94e <__stack+0x4f>
 94c:	53 c1       	rjmp	.+678    	; 0xbf4 <__stack+0x2f5>
 94e:	80 36       	cpi	r24, 0x60	; 96
 950:	91 05       	cpc	r25, r1
 952:	09 f0       	breq	.+2      	; 0x956 <__stack+0x57>
			case 0xA0:            /* Received Stop or Repeated Start while still addressed */
				TWCR |= ( (1<<TWINT) );                            /* Switch to not Addressed */
				break;
			
			default:
				break;
 954:	59 c1       	rjmp	.+690    	; 0xc08 <__stack+0x309>
      twi_init();
		
		switch(TWSR)        //TWDR    Unknown identifier    Error
		{
			case 0x60:
				TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 956:	8c eb       	ldi	r24, 0xBC	; 188
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	2c eb       	ldi	r18, 0xBC	; 188
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	f9 01       	movw	r30, r18
 960:	20 81       	ld	r18, Z
 962:	20 6c       	ori	r18, 0xC0	; 192
 964:	fc 01       	movw	r30, r24
 966:	20 83       	st	Z, r18
				
				while(counter < 5)
 968:	a7 c0       	rjmp	.+334    	; 0xab8 <__stack+0x1b9>
				{
					counter++;
 96a:	89 81       	ldd	r24, Y+1	; 0x01
 96c:	9a 81       	ldd	r25, Y+2	; 0x02
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	9a 83       	std	Y+2, r25	; 0x02
 972:	89 83       	std	Y+1, r24	; 0x01
					
					if(TWSR == 0x80)
 974:	89 eb       	ldi	r24, 0xB9	; 185
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	fc 01       	movw	r30, r24
 97a:	80 81       	ld	r24, Z
 97c:	80 38       	cpi	r24, 0x80	; 128
 97e:	51 f5       	brne	.+84     	; 0x9d4 <__stack+0xd5>
					{
						data_twi[0] = TWDR;
 980:	8b eb       	ldi	r24, 0xBB	; 187
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	fc 01       	movw	r30, r24
 986:	80 81       	ld	r24, Z
 988:	88 2f       	mov	r24, r24
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	9c ab       	std	Y+52, r25	; 0x34
 98e:	8b ab       	std	Y+51, r24	; 0x33
						TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 990:	8c eb       	ldi	r24, 0xBC	; 188
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	2c eb       	ldi	r18, 0xBC	; 188
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	f9 01       	movw	r30, r18
 99a:	20 81       	ld	r18, Z
 99c:	20 6c       	ori	r18, 0xC0	; 192
 99e:	fc 01       	movw	r30, r24
 9a0:	20 83       	st	Z, r18
						if(TWSR == 0x80)
 9a2:	89 eb       	ldi	r24, 0xB9	; 185
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	fc 01       	movw	r30, r24
 9a8:	80 81       	ld	r24, Z
 9aa:	80 38       	cpi	r24, 0x80	; 128
 9ac:	91 f4       	brne	.+36     	; 0x9d2 <__stack+0xd3>
						{
							data_twi[1] = TWDR;
 9ae:	8b eb       	ldi	r24, 0xBB	; 187
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	fc 01       	movw	r30, r24
 9b4:	80 81       	ld	r24, Z
 9b6:	88 2f       	mov	r24, r24
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	9e ab       	std	Y+54, r25	; 0x36
 9bc:	8d ab       	std	Y+53, r24	; 0x35
							TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 9be:	8c eb       	ldi	r24, 0xBC	; 188
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	2c eb       	ldi	r18, 0xBC	; 188
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	f9 01       	movw	r30, r18
 9c8:	20 81       	ld	r18, Z
 9ca:	20 6c       	ori	r18, 0xC0	; 192
 9cc:	fc 01       	movw	r30, r24
 9ce:	20 83       	st	Z, r18
							break;
 9d0:	78 c0       	rjmp	.+240    	; 0xac2 <__stack+0x1c3>
						}
						break;
 9d2:	77 c0       	rjmp	.+238    	; 0xac2 <__stack+0x1c3>
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	a8 ec       	ldi	r26, 0xC8	; 200
 9da:	b2 e4       	ldi	r27, 0x42	; 66
 9dc:	8f 8b       	std	Y+23, r24	; 0x17
 9de:	98 8f       	std	Y+24, r25	; 0x18
 9e0:	a9 8f       	std	Y+25, r26	; 0x19
 9e2:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	4a ef       	ldi	r20, 0xFA	; 250
 9ea:	54 e4       	ldi	r21, 0x44	; 68
 9ec:	6f 89       	ldd	r22, Y+23	; 0x17
 9ee:	78 8d       	ldd	r23, Y+24	; 0x18
 9f0:	89 8d       	ldd	r24, Y+25	; 0x19
 9f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 9f4:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 9f8:	dc 01       	movw	r26, r24
 9fa:	cb 01       	movw	r24, r22
 9fc:	8b 8f       	std	Y+27, r24	; 0x1b
 9fe:	9c 8f       	std	Y+28, r25	; 0x1c
 a00:	ad 8f       	std	Y+29, r26	; 0x1d
 a02:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 a04:	20 e0       	ldi	r18, 0x00	; 0
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	40 e8       	ldi	r20, 0x80	; 128
 a0a:	5f e3       	ldi	r21, 0x3F	; 63
 a0c:	6b 8d       	ldd	r22, Y+27	; 0x1b
 a0e:	7c 8d       	ldd	r23, Y+28	; 0x1c
 a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
 a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
 a14:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 a18:	88 23       	and	r24, r24
 a1a:	2c f4       	brge	.+10     	; 0xa26 <__stack+0x127>
		__ticks = 1;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	98 a3       	std	Y+32, r25	; 0x20
 a22:	8f 8f       	std	Y+31, r24	; 0x1f
 a24:	3f c0       	rjmp	.+126    	; 0xaa4 <__stack+0x1a5>
	else if (__tmp > 65535)
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	3f ef       	ldi	r19, 0xFF	; 255
 a2a:	4f e7       	ldi	r20, 0x7F	; 127
 a2c:	57 e4       	ldi	r21, 0x47	; 71
 a2e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 a30:	7c 8d       	ldd	r23, Y+28	; 0x1c
 a32:	8d 8d       	ldd	r24, Y+29	; 0x1d
 a34:	9e 8d       	ldd	r25, Y+30	; 0x1e
 a36:	0e 94 5d 07 	call	0xeba	; 0xeba <__gesf2>
 a3a:	18 16       	cp	r1, r24
 a3c:	4c f5       	brge	.+82     	; 0xa90 <__stack+0x191>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	40 e2       	ldi	r20, 0x20	; 32
 a44:	51 e4       	ldi	r21, 0x41	; 65
 a46:	6f 89       	ldd	r22, Y+23	; 0x17
 a48:	78 8d       	ldd	r23, Y+24	; 0x18
 a4a:	89 8d       	ldd	r24, Y+25	; 0x19
 a4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 a4e:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 a52:	dc 01       	movw	r26, r24
 a54:	cb 01       	movw	r24, r22
 a56:	bc 01       	movw	r22, r24
 a58:	cd 01       	movw	r24, r26
 a5a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 a5e:	dc 01       	movw	r26, r24
 a60:	cb 01       	movw	r24, r22
 a62:	98 a3       	std	Y+32, r25	; 0x20
 a64:	8f 8f       	std	Y+31, r24	; 0x1f
 a66:	0f c0       	rjmp	.+30     	; 0xa86 <__stack+0x187>
 a68:	88 ec       	ldi	r24, 0xC8	; 200
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	9a a3       	std	Y+34, r25	; 0x22
 a6e:	89 a3       	std	Y+33, r24	; 0x21
 a70:	89 a1       	ldd	r24, Y+33	; 0x21
 a72:	9a a1       	ldd	r25, Y+34	; 0x22
 a74:	01 97       	sbiw	r24, 0x01	; 1
 a76:	f1 f7       	brne	.-4      	; 0xa74 <__stack+0x175>
 a78:	9a a3       	std	Y+34, r25	; 0x22
 a7a:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 a7e:	98 a1       	ldd	r25, Y+32	; 0x20
 a80:	01 97       	sbiw	r24, 0x01	; 1
 a82:	98 a3       	std	Y+32, r25	; 0x20
 a84:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a86:	8f 8d       	ldd	r24, Y+31	; 0x1f
 a88:	98 a1       	ldd	r25, Y+32	; 0x20
 a8a:	89 2b       	or	r24, r25
 a8c:	69 f7       	brne	.-38     	; 0xa68 <__stack+0x169>
 a8e:	14 c0       	rjmp	.+40     	; 0xab8 <__stack+0x1b9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a90:	6b 8d       	ldd	r22, Y+27	; 0x1b
 a92:	7c 8d       	ldd	r23, Y+28	; 0x1c
 a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
 a96:	9e 8d       	ldd	r25, Y+30	; 0x1e
 a98:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 a9c:	dc 01       	movw	r26, r24
 a9e:	cb 01       	movw	r24, r22
 aa0:	98 a3       	std	Y+32, r25	; 0x20
 aa2:	8f 8f       	std	Y+31, r24	; 0x1f
 aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
 aa6:	98 a1       	ldd	r25, Y+32	; 0x20
 aa8:	9c a3       	std	Y+36, r25	; 0x24
 aaa:	8b a3       	std	Y+35, r24	; 0x23
 aac:	8b a1       	ldd	r24, Y+35	; 0x23
 aae:	9c a1       	ldd	r25, Y+36	; 0x24
 ab0:	01 97       	sbiw	r24, 0x01	; 1
 ab2:	f1 f7       	brne	.-4      	; 0xab0 <__stack+0x1b1>
 ab4:	9c a3       	std	Y+36, r25	; 0x24
 ab6:	8b a3       	std	Y+35, r24	; 0x23
		switch(TWSR)        //TWDR    Unknown identifier    Error
		{
			case 0x60:
				TWCR |= ( (1<<TWINT) | (1<<TWEA) );
				
				while(counter < 5)
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	9a 81       	ldd	r25, Y+2	; 0x02
 abc:	05 97       	sbiw	r24, 0x05	; 5
 abe:	0c f4       	brge	.+2      	; 0xac2 <__stack+0x1c3>
 ac0:	54 cf       	rjmp	.-344    	; 0x96a <__stack+0x6b>
						break;
					}
					_delay_ms(100);
				}
				counter = counter;
				counter = 0;
 ac2:	1a 82       	std	Y+2, r1	; 0x02
 ac4:	19 82       	std	Y+1, r1	; 0x01
				
				break;
 ac6:	a0 c0       	rjmp	.+320    	; 0xc08 <__stack+0x309>
			
			case 0x80:
				data = TWDR;
 ac8:	8b eb       	ldi	r24, 0xBB	; 187
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	fc 01       	movw	r30, r24
 ace:	80 81       	ld	r24, Z
 ad0:	88 2f       	mov	r24, r24
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	9e 8b       	std	Y+22, r25	; 0x16
 ad6:	8d 8b       	std	Y+21, r24	; 0x15
				TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 ad8:	8c eb       	ldi	r24, 0xBC	; 188
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	2c eb       	ldi	r18, 0xBC	; 188
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	f9 01       	movw	r30, r18
 ae2:	20 81       	ld	r18, Z
 ae4:	20 6c       	ori	r18, 0xC0	; 192
 ae6:	fc 01       	movw	r30, r24
 ae8:	20 83       	st	Z, r18
				PORTD |= ( (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) );
 aea:	8b e2       	ldi	r24, 0x2B	; 43
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	2b e2       	ldi	r18, 0x2B	; 43
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	f9 01       	movw	r30, r18
 af4:	20 81       	ld	r18, Z
 af6:	20 6e       	ori	r18, 0xE0	; 224
 af8:	fc 01       	movw	r30, r24
 afa:	20 83       	st	Z, r18
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	a8 e4       	ldi	r26, 0x48	; 72
 b02:	b2 e4       	ldi	r27, 0x42	; 66
 b04:	8d a3       	std	Y+37, r24	; 0x25
 b06:	9e a3       	std	Y+38, r25	; 0x26
 b08:	af a3       	std	Y+39, r26	; 0x27
 b0a:	b8 a7       	std	Y+40, r27	; 0x28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 b0c:	20 e0       	ldi	r18, 0x00	; 0
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	4a ef       	ldi	r20, 0xFA	; 250
 b12:	54 e4       	ldi	r21, 0x44	; 68
 b14:	6d a1       	ldd	r22, Y+37	; 0x25
 b16:	7e a1       	ldd	r23, Y+38	; 0x26
 b18:	8f a1       	ldd	r24, Y+39	; 0x27
 b1a:	98 a5       	ldd	r25, Y+40	; 0x28
 b1c:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 b20:	dc 01       	movw	r26, r24
 b22:	cb 01       	movw	r24, r22
 b24:	89 a7       	std	Y+41, r24	; 0x29
 b26:	9a a7       	std	Y+42, r25	; 0x2a
 b28:	ab a7       	std	Y+43, r26	; 0x2b
 b2a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 b2c:	20 e0       	ldi	r18, 0x00	; 0
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	40 e8       	ldi	r20, 0x80	; 128
 b32:	5f e3       	ldi	r21, 0x3F	; 63
 b34:	69 a5       	ldd	r22, Y+41	; 0x29
 b36:	7a a5       	ldd	r23, Y+42	; 0x2a
 b38:	8b a5       	ldd	r24, Y+43	; 0x2b
 b3a:	9c a5       	ldd	r25, Y+44	; 0x2c
 b3c:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 b40:	88 23       	and	r24, r24
 b42:	2c f4       	brge	.+10     	; 0xb4e <__stack+0x24f>
		__ticks = 1;
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	9e a7       	std	Y+46, r25	; 0x2e
 b4a:	8d a7       	std	Y+45, r24	; 0x2d
 b4c:	3f c0       	rjmp	.+126    	; 0xbcc <__stack+0x2cd>
	else if (__tmp > 65535)
 b4e:	20 e0       	ldi	r18, 0x00	; 0
 b50:	3f ef       	ldi	r19, 0xFF	; 255
 b52:	4f e7       	ldi	r20, 0x7F	; 127
 b54:	57 e4       	ldi	r21, 0x47	; 71
 b56:	69 a5       	ldd	r22, Y+41	; 0x29
 b58:	7a a5       	ldd	r23, Y+42	; 0x2a
 b5a:	8b a5       	ldd	r24, Y+43	; 0x2b
 b5c:	9c a5       	ldd	r25, Y+44	; 0x2c
 b5e:	0e 94 5d 07 	call	0xeba	; 0xeba <__gesf2>
 b62:	18 16       	cp	r1, r24
 b64:	4c f5       	brge	.+82     	; 0xbb8 <__stack+0x2b9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 b66:	20 e0       	ldi	r18, 0x00	; 0
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	40 e2       	ldi	r20, 0x20	; 32
 b6c:	51 e4       	ldi	r21, 0x41	; 65
 b6e:	6d a1       	ldd	r22, Y+37	; 0x25
 b70:	7e a1       	ldd	r23, Y+38	; 0x26
 b72:	8f a1       	ldd	r24, Y+39	; 0x27
 b74:	98 a5       	ldd	r25, Y+40	; 0x28
 b76:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 b7a:	dc 01       	movw	r26, r24
 b7c:	cb 01       	movw	r24, r22
 b7e:	bc 01       	movw	r22, r24
 b80:	cd 01       	movw	r24, r26
 b82:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 b86:	dc 01       	movw	r26, r24
 b88:	cb 01       	movw	r24, r22
 b8a:	9e a7       	std	Y+46, r25	; 0x2e
 b8c:	8d a7       	std	Y+45, r24	; 0x2d
 b8e:	0f c0       	rjmp	.+30     	; 0xbae <__stack+0x2af>
 b90:	88 ec       	ldi	r24, 0xC8	; 200
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	98 ab       	std	Y+48, r25	; 0x30
 b96:	8f a7       	std	Y+47, r24	; 0x2f
 b98:	8f a5       	ldd	r24, Y+47	; 0x2f
 b9a:	98 a9       	ldd	r25, Y+48	; 0x30
 b9c:	01 97       	sbiw	r24, 0x01	; 1
 b9e:	f1 f7       	brne	.-4      	; 0xb9c <__stack+0x29d>
 ba0:	98 ab       	std	Y+48, r25	; 0x30
 ba2:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
 ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
 ba8:	01 97       	sbiw	r24, 0x01	; 1
 baa:	9e a7       	std	Y+46, r25	; 0x2e
 bac:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 bae:	8d a5       	ldd	r24, Y+45	; 0x2d
 bb0:	9e a5       	ldd	r25, Y+46	; 0x2e
 bb2:	89 2b       	or	r24, r25
 bb4:	69 f7       	brne	.-38     	; 0xb90 <__stack+0x291>
 bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <__stack+0x2e1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 bb8:	69 a5       	ldd	r22, Y+41	; 0x29
 bba:	7a a5       	ldd	r23, Y+42	; 0x2a
 bbc:	8b a5       	ldd	r24, Y+43	; 0x2b
 bbe:	9c a5       	ldd	r25, Y+44	; 0x2c
 bc0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 bc4:	dc 01       	movw	r26, r24
 bc6:	cb 01       	movw	r24, r22
 bc8:	9e a7       	std	Y+46, r25	; 0x2e
 bca:	8d a7       	std	Y+45, r24	; 0x2d
 bcc:	8d a5       	ldd	r24, Y+45	; 0x2d
 bce:	9e a5       	ldd	r25, Y+46	; 0x2e
 bd0:	9a ab       	std	Y+50, r25	; 0x32
 bd2:	89 ab       	std	Y+49, r24	; 0x31
 bd4:	89 a9       	ldd	r24, Y+49	; 0x31
 bd6:	9a a9       	ldd	r25, Y+50	; 0x32
 bd8:	01 97       	sbiw	r24, 0x01	; 1
 bda:	f1 f7       	brne	.-4      	; 0xbd8 <__stack+0x2d9>
 bdc:	9a ab       	std	Y+50, r25	; 0x32
 bde:	89 ab       	std	Y+49, r24	; 0x31
				_delay_ms(50);
				PORTD &= ~( (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) );
 be0:	8b e2       	ldi	r24, 0x2B	; 43
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	2b e2       	ldi	r18, 0x2B	; 43
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	f9 01       	movw	r30, r18
 bea:	20 81       	ld	r18, Z
 bec:	2f 71       	andi	r18, 0x1F	; 31
 bee:	fc 01       	movw	r30, r24
 bf0:	20 83       	st	Z, r18
				break;
 bf2:	0a c0       	rjmp	.+20     	; 0xc08 <__stack+0x309>
			
			case 0xA0:            /* Received Stop or Repeated Start while still addressed */
				TWCR |= ( (1<<TWINT) );                            /* Switch to not Addressed */
 bf4:	8c eb       	ldi	r24, 0xBC	; 188
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	2c eb       	ldi	r18, 0xBC	; 188
 bfa:	30 e0       	ldi	r19, 0x00	; 0
 bfc:	f9 01       	movw	r30, r18
 bfe:	20 81       	ld	r18, Z
 c00:	20 68       	ori	r18, 0x80	; 128
 c02:	fc 01       	movw	r30, r24
 c04:	20 83       	st	Z, r18
				break;
 c06:	00 00       	nop
			
			default:
				break;
		}
	}
 c08:	63 ce       	rjmp	.-826    	; 0x8d0 <main+0x48>

00000c0a <__cmpsf2>:
 c0a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fp_cmp>
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <__cmpsf2+0x8>
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	08 95       	ret

00000c14 <__divsf3>:
 c14:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__divsf3x>
 c18:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_round>
 c1c:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fp_pscB>
 c20:	58 f0       	brcs	.+22     	; 0xc38 <__divsf3+0x24>
 c22:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_pscA>
 c26:	40 f0       	brcs	.+16     	; 0xc38 <__divsf3+0x24>
 c28:	29 f4       	brne	.+10     	; 0xc34 <__divsf3+0x20>
 c2a:	5f 3f       	cpi	r21, 0xFF	; 255
 c2c:	29 f0       	breq	.+10     	; 0xc38 <__divsf3+0x24>
 c2e:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__fp_inf>
 c32:	51 11       	cpse	r21, r1
 c34:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_szero>
 c38:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_nan>

00000c3c <__divsf3x>:
 c3c:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_split3>
 c40:	68 f3       	brcs	.-38     	; 0xc1c <__divsf3+0x8>

00000c42 <__divsf3_pse>:
 c42:	99 23       	and	r25, r25
 c44:	b1 f3       	breq	.-20     	; 0xc32 <__divsf3+0x1e>
 c46:	55 23       	and	r21, r21
 c48:	91 f3       	breq	.-28     	; 0xc2e <__divsf3+0x1a>
 c4a:	95 1b       	sub	r25, r21
 c4c:	55 0b       	sbc	r21, r21
 c4e:	bb 27       	eor	r27, r27
 c50:	aa 27       	eor	r26, r26
 c52:	62 17       	cp	r22, r18
 c54:	73 07       	cpc	r23, r19
 c56:	84 07       	cpc	r24, r20
 c58:	38 f0       	brcs	.+14     	; 0xc68 <__divsf3_pse+0x26>
 c5a:	9f 5f       	subi	r25, 0xFF	; 255
 c5c:	5f 4f       	sbci	r21, 0xFF	; 255
 c5e:	22 0f       	add	r18, r18
 c60:	33 1f       	adc	r19, r19
 c62:	44 1f       	adc	r20, r20
 c64:	aa 1f       	adc	r26, r26
 c66:	a9 f3       	breq	.-22     	; 0xc52 <__divsf3_pse+0x10>
 c68:	35 d0       	rcall	.+106    	; 0xcd4 <__divsf3_pse+0x92>
 c6a:	0e 2e       	mov	r0, r30
 c6c:	3a f0       	brmi	.+14     	; 0xc7c <__divsf3_pse+0x3a>
 c6e:	e0 e8       	ldi	r30, 0x80	; 128
 c70:	32 d0       	rcall	.+100    	; 0xcd6 <__divsf3_pse+0x94>
 c72:	91 50       	subi	r25, 0x01	; 1
 c74:	50 40       	sbci	r21, 0x00	; 0
 c76:	e6 95       	lsr	r30
 c78:	00 1c       	adc	r0, r0
 c7a:	ca f7       	brpl	.-14     	; 0xc6e <__divsf3_pse+0x2c>
 c7c:	2b d0       	rcall	.+86     	; 0xcd4 <__divsf3_pse+0x92>
 c7e:	fe 2f       	mov	r31, r30
 c80:	29 d0       	rcall	.+82     	; 0xcd4 <__divsf3_pse+0x92>
 c82:	66 0f       	add	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	bb 1f       	adc	r27, r27
 c8a:	26 17       	cp	r18, r22
 c8c:	37 07       	cpc	r19, r23
 c8e:	48 07       	cpc	r20, r24
 c90:	ab 07       	cpc	r26, r27
 c92:	b0 e8       	ldi	r27, 0x80	; 128
 c94:	09 f0       	breq	.+2      	; 0xc98 <__divsf3_pse+0x56>
 c96:	bb 0b       	sbc	r27, r27
 c98:	80 2d       	mov	r24, r0
 c9a:	bf 01       	movw	r22, r30
 c9c:	ff 27       	eor	r31, r31
 c9e:	93 58       	subi	r25, 0x83	; 131
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255
 ca2:	3a f0       	brmi	.+14     	; 0xcb2 <__divsf3_pse+0x70>
 ca4:	9e 3f       	cpi	r25, 0xFE	; 254
 ca6:	51 05       	cpc	r21, r1
 ca8:	78 f0       	brcs	.+30     	; 0xcc8 <__divsf3_pse+0x86>
 caa:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__fp_inf>
 cae:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_szero>
 cb2:	5f 3f       	cpi	r21, 0xFF	; 255
 cb4:	e4 f3       	brlt	.-8      	; 0xcae <__divsf3_pse+0x6c>
 cb6:	98 3e       	cpi	r25, 0xE8	; 232
 cb8:	d4 f3       	brlt	.-12     	; 0xcae <__divsf3_pse+0x6c>
 cba:	86 95       	lsr	r24
 cbc:	77 95       	ror	r23
 cbe:	67 95       	ror	r22
 cc0:	b7 95       	ror	r27
 cc2:	f7 95       	ror	r31
 cc4:	9f 5f       	subi	r25, 0xFF	; 255
 cc6:	c9 f7       	brne	.-14     	; 0xcba <__divsf3_pse+0x78>
 cc8:	88 0f       	add	r24, r24
 cca:	91 1d       	adc	r25, r1
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret
 cd4:	e1 e0       	ldi	r30, 0x01	; 1
 cd6:	66 0f       	add	r22, r22
 cd8:	77 1f       	adc	r23, r23
 cda:	88 1f       	adc	r24, r24
 cdc:	bb 1f       	adc	r27, r27
 cde:	62 17       	cp	r22, r18
 ce0:	73 07       	cpc	r23, r19
 ce2:	84 07       	cpc	r24, r20
 ce4:	ba 07       	cpc	r27, r26
 ce6:	20 f0       	brcs	.+8      	; 0xcf0 <__divsf3_pse+0xae>
 ce8:	62 1b       	sub	r22, r18
 cea:	73 0b       	sbc	r23, r19
 cec:	84 0b       	sbc	r24, r20
 cee:	ba 0b       	sbc	r27, r26
 cf0:	ee 1f       	adc	r30, r30
 cf2:	88 f7       	brcc	.-30     	; 0xcd6 <__divsf3_pse+0x94>
 cf4:	e0 95       	com	r30
 cf6:	08 95       	ret

00000cf8 <__fixunssfsi>:
 cf8:	0e 94 3c 07 	call	0xe78	; 0xe78 <__fp_splitA>
 cfc:	88 f0       	brcs	.+34     	; 0xd20 <__fixunssfsi+0x28>
 cfe:	9f 57       	subi	r25, 0x7F	; 127
 d00:	98 f0       	brcs	.+38     	; 0xd28 <__fixunssfsi+0x30>
 d02:	b9 2f       	mov	r27, r25
 d04:	99 27       	eor	r25, r25
 d06:	b7 51       	subi	r27, 0x17	; 23
 d08:	b0 f0       	brcs	.+44     	; 0xd36 <__fixunssfsi+0x3e>
 d0a:	e1 f0       	breq	.+56     	; 0xd44 <__fixunssfsi+0x4c>
 d0c:	66 0f       	add	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	99 1f       	adc	r25, r25
 d14:	1a f0       	brmi	.+6      	; 0xd1c <__fixunssfsi+0x24>
 d16:	ba 95       	dec	r27
 d18:	c9 f7       	brne	.-14     	; 0xd0c <__fixunssfsi+0x14>
 d1a:	14 c0       	rjmp	.+40     	; 0xd44 <__fixunssfsi+0x4c>
 d1c:	b1 30       	cpi	r27, 0x01	; 1
 d1e:	91 f0       	breq	.+36     	; 0xd44 <__fixunssfsi+0x4c>
 d20:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_zero>
 d24:	b1 e0       	ldi	r27, 0x01	; 1
 d26:	08 95       	ret
 d28:	0c 94 56 07 	jmp	0xeac	; 0xeac <__fp_zero>
 d2c:	67 2f       	mov	r22, r23
 d2e:	78 2f       	mov	r23, r24
 d30:	88 27       	eor	r24, r24
 d32:	b8 5f       	subi	r27, 0xF8	; 248
 d34:	39 f0       	breq	.+14     	; 0xd44 <__fixunssfsi+0x4c>
 d36:	b9 3f       	cpi	r27, 0xF9	; 249
 d38:	cc f3       	brlt	.-14     	; 0xd2c <__fixunssfsi+0x34>
 d3a:	86 95       	lsr	r24
 d3c:	77 95       	ror	r23
 d3e:	67 95       	ror	r22
 d40:	b3 95       	inc	r27
 d42:	d9 f7       	brne	.-10     	; 0xd3a <__fixunssfsi+0x42>
 d44:	3e f4       	brtc	.+14     	; 0xd54 <__fixunssfsi+0x5c>
 d46:	90 95       	com	r25
 d48:	80 95       	com	r24
 d4a:	70 95       	com	r23
 d4c:	61 95       	neg	r22
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	08 95       	ret

00000d56 <__floatunsisf>:
 d56:	e8 94       	clt
 d58:	09 c0       	rjmp	.+18     	; 0xd6c <__floatsisf+0x12>

00000d5a <__floatsisf>:
 d5a:	97 fb       	bst	r25, 7
 d5c:	3e f4       	brtc	.+14     	; 0xd6c <__floatsisf+0x12>
 d5e:	90 95       	com	r25
 d60:	80 95       	com	r24
 d62:	70 95       	com	r23
 d64:	61 95       	neg	r22
 d66:	7f 4f       	sbci	r23, 0xFF	; 255
 d68:	8f 4f       	sbci	r24, 0xFF	; 255
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	99 23       	and	r25, r25
 d6e:	a9 f0       	breq	.+42     	; 0xd9a <__floatsisf+0x40>
 d70:	f9 2f       	mov	r31, r25
 d72:	96 e9       	ldi	r25, 0x96	; 150
 d74:	bb 27       	eor	r27, r27
 d76:	93 95       	inc	r25
 d78:	f6 95       	lsr	r31
 d7a:	87 95       	ror	r24
 d7c:	77 95       	ror	r23
 d7e:	67 95       	ror	r22
 d80:	b7 95       	ror	r27
 d82:	f1 11       	cpse	r31, r1
 d84:	f8 cf       	rjmp	.-16     	; 0xd76 <__floatsisf+0x1c>
 d86:	fa f4       	brpl	.+62     	; 0xdc6 <__floatsisf+0x6c>
 d88:	bb 0f       	add	r27, r27
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__floatsisf+0x36>
 d8c:	60 ff       	sbrs	r22, 0
 d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__floatsisf+0x6c>
 d90:	6f 5f       	subi	r22, 0xFF	; 255
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	16 c0       	rjmp	.+44     	; 0xdc6 <__floatsisf+0x6c>
 d9a:	88 23       	and	r24, r24
 d9c:	11 f0       	breq	.+4      	; 0xda2 <__floatsisf+0x48>
 d9e:	96 e9       	ldi	r25, 0x96	; 150
 da0:	11 c0       	rjmp	.+34     	; 0xdc4 <__floatsisf+0x6a>
 da2:	77 23       	and	r23, r23
 da4:	21 f0       	breq	.+8      	; 0xdae <__floatsisf+0x54>
 da6:	9e e8       	ldi	r25, 0x8E	; 142
 da8:	87 2f       	mov	r24, r23
 daa:	76 2f       	mov	r23, r22
 dac:	05 c0       	rjmp	.+10     	; 0xdb8 <__floatsisf+0x5e>
 dae:	66 23       	and	r22, r22
 db0:	71 f0       	breq	.+28     	; 0xdce <__floatsisf+0x74>
 db2:	96 e8       	ldi	r25, 0x86	; 134
 db4:	86 2f       	mov	r24, r22
 db6:	70 e0       	ldi	r23, 0x00	; 0
 db8:	60 e0       	ldi	r22, 0x00	; 0
 dba:	2a f0       	brmi	.+10     	; 0xdc6 <__floatsisf+0x6c>
 dbc:	9a 95       	dec	r25
 dbe:	66 0f       	add	r22, r22
 dc0:	77 1f       	adc	r23, r23
 dc2:	88 1f       	adc	r24, r24
 dc4:	da f7       	brpl	.-10     	; 0xdbc <__floatsisf+0x62>
 dc6:	88 0f       	add	r24, r24
 dc8:	96 95       	lsr	r25
 dca:	87 95       	ror	r24
 dcc:	97 f9       	bld	r25, 7
 dce:	08 95       	ret

00000dd0 <__fp_cmp>:
 dd0:	99 0f       	add	r25, r25
 dd2:	00 08       	sbc	r0, r0
 dd4:	55 0f       	add	r21, r21
 dd6:	aa 0b       	sbc	r26, r26
 dd8:	e0 e8       	ldi	r30, 0x80	; 128
 dda:	fe ef       	ldi	r31, 0xFE	; 254
 ddc:	16 16       	cp	r1, r22
 dde:	17 06       	cpc	r1, r23
 de0:	e8 07       	cpc	r30, r24
 de2:	f9 07       	cpc	r31, r25
 de4:	c0 f0       	brcs	.+48     	; 0xe16 <__fp_cmp+0x46>
 de6:	12 16       	cp	r1, r18
 de8:	13 06       	cpc	r1, r19
 dea:	e4 07       	cpc	r30, r20
 dec:	f5 07       	cpc	r31, r21
 dee:	98 f0       	brcs	.+38     	; 0xe16 <__fp_cmp+0x46>
 df0:	62 1b       	sub	r22, r18
 df2:	73 0b       	sbc	r23, r19
 df4:	84 0b       	sbc	r24, r20
 df6:	95 0b       	sbc	r25, r21
 df8:	39 f4       	brne	.+14     	; 0xe08 <__fp_cmp+0x38>
 dfa:	0a 26       	eor	r0, r26
 dfc:	61 f0       	breq	.+24     	; 0xe16 <__fp_cmp+0x46>
 dfe:	23 2b       	or	r18, r19
 e00:	24 2b       	or	r18, r20
 e02:	25 2b       	or	r18, r21
 e04:	21 f4       	brne	.+8      	; 0xe0e <__fp_cmp+0x3e>
 e06:	08 95       	ret
 e08:	0a 26       	eor	r0, r26
 e0a:	09 f4       	brne	.+2      	; 0xe0e <__fp_cmp+0x3e>
 e0c:	a1 40       	sbci	r26, 0x01	; 1
 e0e:	a6 95       	lsr	r26
 e10:	8f ef       	ldi	r24, 0xFF	; 255
 e12:	81 1d       	adc	r24, r1
 e14:	81 1d       	adc	r24, r1
 e16:	08 95       	ret

00000e18 <__fp_inf>:
 e18:	97 f9       	bld	r25, 7
 e1a:	9f 67       	ori	r25, 0x7F	; 127
 e1c:	80 e8       	ldi	r24, 0x80	; 128
 e1e:	70 e0       	ldi	r23, 0x00	; 0
 e20:	60 e0       	ldi	r22, 0x00	; 0
 e22:	08 95       	ret

00000e24 <__fp_nan>:
 e24:	9f ef       	ldi	r25, 0xFF	; 255
 e26:	80 ec       	ldi	r24, 0xC0	; 192
 e28:	08 95       	ret

00000e2a <__fp_pscA>:
 e2a:	00 24       	eor	r0, r0
 e2c:	0a 94       	dec	r0
 e2e:	16 16       	cp	r1, r22
 e30:	17 06       	cpc	r1, r23
 e32:	18 06       	cpc	r1, r24
 e34:	09 06       	cpc	r0, r25
 e36:	08 95       	ret

00000e38 <__fp_pscB>:
 e38:	00 24       	eor	r0, r0
 e3a:	0a 94       	dec	r0
 e3c:	12 16       	cp	r1, r18
 e3e:	13 06       	cpc	r1, r19
 e40:	14 06       	cpc	r1, r20
 e42:	05 06       	cpc	r0, r21
 e44:	08 95       	ret

00000e46 <__fp_round>:
 e46:	09 2e       	mov	r0, r25
 e48:	03 94       	inc	r0
 e4a:	00 0c       	add	r0, r0
 e4c:	11 f4       	brne	.+4      	; 0xe52 <__fp_round+0xc>
 e4e:	88 23       	and	r24, r24
 e50:	52 f0       	brmi	.+20     	; 0xe66 <__fp_round+0x20>
 e52:	bb 0f       	add	r27, r27
 e54:	40 f4       	brcc	.+16     	; 0xe66 <__fp_round+0x20>
 e56:	bf 2b       	or	r27, r31
 e58:	11 f4       	brne	.+4      	; 0xe5e <__fp_round+0x18>
 e5a:	60 ff       	sbrs	r22, 0
 e5c:	04 c0       	rjmp	.+8      	; 0xe66 <__fp_round+0x20>
 e5e:	6f 5f       	subi	r22, 0xFF	; 255
 e60:	7f 4f       	sbci	r23, 0xFF	; 255
 e62:	8f 4f       	sbci	r24, 0xFF	; 255
 e64:	9f 4f       	sbci	r25, 0xFF	; 255
 e66:	08 95       	ret

00000e68 <__fp_split3>:
 e68:	57 fd       	sbrc	r21, 7
 e6a:	90 58       	subi	r25, 0x80	; 128
 e6c:	44 0f       	add	r20, r20
 e6e:	55 1f       	adc	r21, r21
 e70:	59 f0       	breq	.+22     	; 0xe88 <__fp_splitA+0x10>
 e72:	5f 3f       	cpi	r21, 0xFF	; 255
 e74:	71 f0       	breq	.+28     	; 0xe92 <__fp_splitA+0x1a>
 e76:	47 95       	ror	r20

00000e78 <__fp_splitA>:
 e78:	88 0f       	add	r24, r24
 e7a:	97 fb       	bst	r25, 7
 e7c:	99 1f       	adc	r25, r25
 e7e:	61 f0       	breq	.+24     	; 0xe98 <__fp_splitA+0x20>
 e80:	9f 3f       	cpi	r25, 0xFF	; 255
 e82:	79 f0       	breq	.+30     	; 0xea2 <__fp_splitA+0x2a>
 e84:	87 95       	ror	r24
 e86:	08 95       	ret
 e88:	12 16       	cp	r1, r18
 e8a:	13 06       	cpc	r1, r19
 e8c:	14 06       	cpc	r1, r20
 e8e:	55 1f       	adc	r21, r21
 e90:	f2 cf       	rjmp	.-28     	; 0xe76 <__fp_split3+0xe>
 e92:	46 95       	lsr	r20
 e94:	f1 df       	rcall	.-30     	; 0xe78 <__fp_splitA>
 e96:	08 c0       	rjmp	.+16     	; 0xea8 <__fp_splitA+0x30>
 e98:	16 16       	cp	r1, r22
 e9a:	17 06       	cpc	r1, r23
 e9c:	18 06       	cpc	r1, r24
 e9e:	99 1f       	adc	r25, r25
 ea0:	f1 cf       	rjmp	.-30     	; 0xe84 <__fp_splitA+0xc>
 ea2:	86 95       	lsr	r24
 ea4:	71 05       	cpc	r23, r1
 ea6:	61 05       	cpc	r22, r1
 ea8:	08 94       	sec
 eaa:	08 95       	ret

00000eac <__fp_zero>:
 eac:	e8 94       	clt

00000eae <__fp_szero>:
 eae:	bb 27       	eor	r27, r27
 eb0:	66 27       	eor	r22, r22
 eb2:	77 27       	eor	r23, r23
 eb4:	cb 01       	movw	r24, r22
 eb6:	97 f9       	bld	r25, 7
 eb8:	08 95       	ret

00000eba <__gesf2>:
 eba:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fp_cmp>
 ebe:	08 f4       	brcc	.+2      	; 0xec2 <__gesf2+0x8>
 ec0:	8f ef       	ldi	r24, 0xFF	; 255
 ec2:	08 95       	ret

00000ec4 <__mulsf3>:
 ec4:	0e 94 75 07 	call	0xeea	; 0xeea <__mulsf3x>
 ec8:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_round>
 ecc:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_pscA>
 ed0:	38 f0       	brcs	.+14     	; 0xee0 <__mulsf3+0x1c>
 ed2:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fp_pscB>
 ed6:	20 f0       	brcs	.+8      	; 0xee0 <__mulsf3+0x1c>
 ed8:	95 23       	and	r25, r21
 eda:	11 f0       	breq	.+4      	; 0xee0 <__mulsf3+0x1c>
 edc:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__fp_inf>
 ee0:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_nan>
 ee4:	11 24       	eor	r1, r1
 ee6:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_szero>

00000eea <__mulsf3x>:
 eea:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_split3>
 eee:	70 f3       	brcs	.-36     	; 0xecc <__mulsf3+0x8>

00000ef0 <__mulsf3_pse>:
 ef0:	95 9f       	mul	r25, r21
 ef2:	c1 f3       	breq	.-16     	; 0xee4 <__mulsf3+0x20>
 ef4:	95 0f       	add	r25, r21
 ef6:	50 e0       	ldi	r21, 0x00	; 0
 ef8:	55 1f       	adc	r21, r21
 efa:	62 9f       	mul	r22, r18
 efc:	f0 01       	movw	r30, r0
 efe:	72 9f       	mul	r23, r18
 f00:	bb 27       	eor	r27, r27
 f02:	f0 0d       	add	r31, r0
 f04:	b1 1d       	adc	r27, r1
 f06:	63 9f       	mul	r22, r19
 f08:	aa 27       	eor	r26, r26
 f0a:	f0 0d       	add	r31, r0
 f0c:	b1 1d       	adc	r27, r1
 f0e:	aa 1f       	adc	r26, r26
 f10:	64 9f       	mul	r22, r20
 f12:	66 27       	eor	r22, r22
 f14:	b0 0d       	add	r27, r0
 f16:	a1 1d       	adc	r26, r1
 f18:	66 1f       	adc	r22, r22
 f1a:	82 9f       	mul	r24, r18
 f1c:	22 27       	eor	r18, r18
 f1e:	b0 0d       	add	r27, r0
 f20:	a1 1d       	adc	r26, r1
 f22:	62 1f       	adc	r22, r18
 f24:	73 9f       	mul	r23, r19
 f26:	b0 0d       	add	r27, r0
 f28:	a1 1d       	adc	r26, r1
 f2a:	62 1f       	adc	r22, r18
 f2c:	83 9f       	mul	r24, r19
 f2e:	a0 0d       	add	r26, r0
 f30:	61 1d       	adc	r22, r1
 f32:	22 1f       	adc	r18, r18
 f34:	74 9f       	mul	r23, r20
 f36:	33 27       	eor	r19, r19
 f38:	a0 0d       	add	r26, r0
 f3a:	61 1d       	adc	r22, r1
 f3c:	23 1f       	adc	r18, r19
 f3e:	84 9f       	mul	r24, r20
 f40:	60 0d       	add	r22, r0
 f42:	21 1d       	adc	r18, r1
 f44:	82 2f       	mov	r24, r18
 f46:	76 2f       	mov	r23, r22
 f48:	6a 2f       	mov	r22, r26
 f4a:	11 24       	eor	r1, r1
 f4c:	9f 57       	subi	r25, 0x7F	; 127
 f4e:	50 40       	sbci	r21, 0x00	; 0
 f50:	9a f0       	brmi	.+38     	; 0xf78 <__mulsf3_pse+0x88>
 f52:	f1 f0       	breq	.+60     	; 0xf90 <__mulsf3_pse+0xa0>
 f54:	88 23       	and	r24, r24
 f56:	4a f0       	brmi	.+18     	; 0xf6a <__mulsf3_pse+0x7a>
 f58:	ee 0f       	add	r30, r30
 f5a:	ff 1f       	adc	r31, r31
 f5c:	bb 1f       	adc	r27, r27
 f5e:	66 1f       	adc	r22, r22
 f60:	77 1f       	adc	r23, r23
 f62:	88 1f       	adc	r24, r24
 f64:	91 50       	subi	r25, 0x01	; 1
 f66:	50 40       	sbci	r21, 0x00	; 0
 f68:	a9 f7       	brne	.-22     	; 0xf54 <__mulsf3_pse+0x64>
 f6a:	9e 3f       	cpi	r25, 0xFE	; 254
 f6c:	51 05       	cpc	r21, r1
 f6e:	80 f0       	brcs	.+32     	; 0xf90 <__mulsf3_pse+0xa0>
 f70:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__fp_inf>
 f74:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_szero>
 f78:	5f 3f       	cpi	r21, 0xFF	; 255
 f7a:	e4 f3       	brlt	.-8      	; 0xf74 <__mulsf3_pse+0x84>
 f7c:	98 3e       	cpi	r25, 0xE8	; 232
 f7e:	d4 f3       	brlt	.-12     	; 0xf74 <__mulsf3_pse+0x84>
 f80:	86 95       	lsr	r24
 f82:	77 95       	ror	r23
 f84:	67 95       	ror	r22
 f86:	b7 95       	ror	r27
 f88:	f7 95       	ror	r31
 f8a:	e7 95       	ror	r30
 f8c:	9f 5f       	subi	r25, 0xFF	; 255
 f8e:	c1 f7       	brne	.-16     	; 0xf80 <__mulsf3_pse+0x90>
 f90:	fe 2b       	or	r31, r30
 f92:	88 0f       	add	r24, r24
 f94:	91 1d       	adc	r25, r1
 f96:	96 95       	lsr	r25
 f98:	87 95       	ror	r24
 f9a:	97 f9       	bld	r25, 7
 f9c:	08 95       	ret

00000f9e <_exit>:
 f9e:	f8 94       	cli

00000fa0 <__stop_program>:
 fa0:	ff cf       	rjmp	.-2      	; 0xfa0 <__stop_program>

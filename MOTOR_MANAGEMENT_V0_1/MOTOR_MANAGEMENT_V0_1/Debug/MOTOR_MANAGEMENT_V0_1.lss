
MOTOR_MANAGEMENT_V0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011e  0080011e  00000a02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000553  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ac  00000000  00000000  0000101d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040d  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c6  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cc  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  9e:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
/**
* TWI Init
*
*/
void twi_init(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	//TWI Init
	TWAR = ( 0x0B << 1 );
  ae:	8a eb       	ldi	r24, 0xBA	; 186
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	26 e1       	ldi	r18, 0x16	; 22
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	//TWAR |= 0x01;
	TWCR = ( (1<<TWEN) | (1<<TWEA) );
  b8:	8c eb       	ldi	r24, 0xBC	; 188
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	24 e4       	ldi	r18, 0x44	; 68
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <main>:


int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2d 97       	sbiw	r28, 0x0d	; 13
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
    init_servo_1();                                                 //Initalize our Servo1
  dc:	0e 94 bc 00 	call	0x178	; 0x178 <init_servo_1>
    init_motor_1();                                                 //Initalize our Motor1
  e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <init_motor_1>

    init_uart(MYUBRR);
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 32 03 	call	0x664	; 0x664 <init_uart>

    int motor = 0;                                                  //variabel
  ec:	1a 82       	std	Y+2, r1	; 0x02
  ee:	19 82       	std	Y+1, r1	; 0x01
    
    unsigned char value_uart = 0;
  f0:	1b 82       	std	Y+3, r1	; 0x03
    
    char str[10];

    transmit_uart_string("Motor Controller V0.1 Ready!!");
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 6f 03 	call	0x6de	; 0x6de <transmit_uart_string>
    transmit_uart('\r');
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 55 03 	call	0x6aa	; 0x6aa <transmit_uart>
    transmit_uart('\n');    
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 55 03 	call	0x6aa	; 0x6aa <transmit_uart>

	twi_init();
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>

    while(1)
    {        
        
		switch(TWSR)        //TWDR    Unknown identifier    Error
 10e:	89 eb       	ldi	r24, 0xB9	; 185
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	80 38       	cpi	r24, 0x80	; 128
 11c:	91 05       	cpc	r25, r1
 11e:	89 f0       	breq	.+34     	; 0x142 <main+0x7a>
 120:	80 3a       	cpi	r24, 0xA0	; 160
 122:	91 05       	cpc	r25, r1
 124:	f1 f0       	breq	.+60     	; 0x162 <main+0x9a>
 126:	80 36       	cpi	r24, 0x60	; 96
 128:	91 05       	cpc	r25, r1
 12a:	09 f0       	breq	.+2      	; 0x12e <main+0x66>
			case 0xA0:            /* Received Stop or Repeated Start while still addressed */
			TWCR |= ( (1<<TWINT) );                            /* Switch to not Addressed */
			break;
			
			default:
			break;
 12c:	24 c0       	rjmp	.+72     	; 0x176 <main+0xae>
    {        
        
		switch(TWSR)        //TWDR    Unknown identifier    Error
		{
			case 0x60:
			TWCR |= ( (1<<TWINT) | (1<<TWEA) );
 12e:	8c eb       	ldi	r24, 0xBC	; 188
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	2c eb       	ldi	r18, 0xBC	; 188
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	20 6c       	ori	r18, 0xC0	; 192
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
			break;
 140:	1a c0       	rjmp	.+52     	; 0x176 <main+0xae>
			
			case 0x80:
			data = TWDR;
 142:	8b eb       	ldi	r24, 0xBB	; 187
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	80 93 1e 01 	sts	0x011E, r24
			TWCR |= ( (1<<TWINT) );
 14e:	8c eb       	ldi	r24, 0xBC	; 188
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2c eb       	ldi	r18, 0xBC	; 188
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	20 68       	ori	r18, 0x80	; 128
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
			break;
 160:	0a c0       	rjmp	.+20     	; 0x176 <main+0xae>
			
			case 0xA0:            /* Received Stop or Repeated Start while still addressed */
			TWCR |= ( (1<<TWINT) );                            /* Switch to not Addressed */
 162:	8c eb       	ldi	r24, 0xBC	; 188
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2c eb       	ldi	r18, 0xBC	; 188
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	20 68       	ori	r18, 0x80	; 128
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
			break;
 174:	00 00       	nop
        }

        _delay_ms(1000);
        
        */
    }
 176:	cb cf       	rjmp	.-106    	; 0x10e <main+0x46>

00000178 <init_servo_1>:
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	6c 97       	sbiw	r28, 0x1c	; 28
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	84 e2       	ldi	r24, 0x24	; 36
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	24 e2       	ldi	r18, 0x24	; 36
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	22 60       	ori	r18, 0x02	; 2
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
 19e:	87 e2       	ldi	r24, 0x27	; 39
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	27 e2       	ldi	r18, 0x27	; 39
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	27 60       	ori	r18, 0x07	; 7
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	20 e8       	ldi	r18, 0x80	; 128
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	22 68       	ori	r18, 0x82	; 130
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
 1c2:	81 e8       	ldi	r24, 0x81	; 129
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	21 e8       	ldi	r18, 0x81	; 129
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	2a 61       	ori	r18, 0x1A	; 26
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
 1d4:	88 e8       	ldi	r24, 0x88	; 136
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	38 e0       	ldi	r19, 0x08	; 8
 1dc:	fc 01       	movw	r30, r24
 1de:	31 83       	std	Z+1, r19	; 0x01
 1e0:	20 83       	st	Z, r18
 1e2:	86 e8       	ldi	r24, 0x86	; 134
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e5       	ldi	r19, 0x50	; 80
 1ea:	fc 01       	movw	r30, r24
 1ec:	31 83       	std	Z+1, r19	; 0x01
 1ee:	20 83       	st	Z, r18
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	28 e2       	ldi	r18, 0x28	; 40
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	20 81       	ld	r18, Z
 1fc:	27 60       	ori	r18, 0x07	; 7
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a6 e9       	ldi	r26, 0x96	; 150
 208:	b3 e4       	ldi	r27, 0x43	; 67
 20a:	89 83       	std	Y+1, r24	; 0x01
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	ab 83       	std	Y+3, r26	; 0x03
 210:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	4a ef       	ldi	r20, 0xFA	; 250
 218:	54 e4       	ldi	r21, 0x44	; 68
 21a:	69 81       	ldd	r22, Y+1	; 0x01
 21c:	7a 81       	ldd	r23, Y+2	; 0x02
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	8d 83       	std	Y+5, r24	; 0x05
 22c:	9e 83       	std	Y+6, r25	; 0x06
 22e:	af 83       	std	Y+7, r26	; 0x07
 230:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e8       	ldi	r20, 0x80	; 128
 238:	5f e3       	ldi	r21, 0x3F	; 63
 23a:	6d 81       	ldd	r22, Y+5	; 0x05
 23c:	7e 81       	ldd	r23, Y+6	; 0x06
 23e:	8f 81       	ldd	r24, Y+7	; 0x07
 240:	98 85       	ldd	r25, Y+8	; 0x08
 242:	0e 94 9a 03 	call	0x734	; 0x734 <__cmpsf2>
 246:	88 23       	and	r24, r24
 248:	2c f4       	brge	.+10     	; 0x254 <init_servo_1+0xdc>
		__ticks = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	9a 87       	std	Y+10, r25	; 0x0a
 250:	89 87       	std	Y+9, r24	; 0x09
 252:	3f c0       	rjmp	.+126    	; 0x2d2 <init_servo_1+0x15a>
	else if (__tmp > 65535)
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	3f ef       	ldi	r19, 0xFF	; 255
 258:	4f e7       	ldi	r20, 0x7F	; 127
 25a:	57 e4       	ldi	r21, 0x47	; 71
 25c:	6d 81       	ldd	r22, Y+5	; 0x05
 25e:	7e 81       	ldd	r23, Y+6	; 0x06
 260:	8f 81       	ldd	r24, Y+7	; 0x07
 262:	98 85       	ldd	r25, Y+8	; 0x08
 264:	0e 94 3f 04 	call	0x87e	; 0x87e <__gesf2>
 268:	18 16       	cp	r1, r24
 26a:	4c f5       	brge	.+82     	; 0x2be <init_servo_1+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e2       	ldi	r20, 0x20	; 32
 272:	51 e4       	ldi	r21, 0x41	; 65
 274:	69 81       	ldd	r22, Y+1	; 0x01
 276:	7a 81       	ldd	r23, Y+2	; 0x02
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 280:	dc 01       	movw	r26, r24
 282:	cb 01       	movw	r24, r22
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 28c:	dc 01       	movw	r26, r24
 28e:	cb 01       	movw	r24, r22
 290:	9a 87       	std	Y+10, r25	; 0x0a
 292:	89 87       	std	Y+9, r24	; 0x09
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <init_servo_1+0x13c>
 296:	88 ec       	ldi	r24, 0xC8	; 200
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9c 87       	std	Y+12, r25	; 0x0c
 29c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 29e:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a0:	9c 85       	ldd	r25, Y+12	; 0x0c
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <init_servo_1+0x12a>
 2a6:	9c 87       	std	Y+12, r25	; 0x0c
 2a8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2aa:	89 85       	ldd	r24, Y+9	; 0x09
 2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	9a 87       	std	Y+10, r25	; 0x0a
 2b2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b4:	89 85       	ldd	r24, Y+9	; 0x09
 2b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	69 f7       	brne	.-38     	; 0x296 <init_servo_1+0x11e>
 2bc:	14 c0       	rjmp	.+40     	; 0x2e6 <init_servo_1+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2be:	6d 81       	ldd	r22, Y+5	; 0x05
 2c0:	7e 81       	ldd	r23, Y+6	; 0x06
 2c2:	8f 81       	ldd	r24, Y+7	; 0x07
 2c4:	98 85       	ldd	r25, Y+8	; 0x08
 2c6:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	9a 87       	std	Y+10, r25	; 0x0a
 2d0:	89 87       	std	Y+9, r24	; 0x09
 2d2:	89 85       	ldd	r24, Y+9	; 0x09
 2d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d6:	9e 87       	std	Y+14, r25	; 0x0e
 2d8:	8d 87       	std	Y+13, r24	; 0x0d
 2da:	8d 85       	ldd	r24, Y+13	; 0x0d
 2dc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <init_servo_1+0x166>
 2e2:	9e 87       	std	Y+14, r25	; 0x0e
 2e4:	8d 87       	std	Y+13, r24	; 0x0d
 2e6:	88 e2       	ldi	r24, 0x28	; 40
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	28 e2       	ldi	r18, 0x28	; 40
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	20 81       	ld	r18, Z
 2f2:	28 7f       	andi	r18, 0xF8	; 248
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	a6 e9       	ldi	r26, 0x96	; 150
 2fe:	b3 e4       	ldi	r27, 0x43	; 67
 300:	8f 87       	std	Y+15, r24	; 0x0f
 302:	98 8b       	std	Y+16, r25	; 0x10
 304:	a9 8b       	std	Y+17, r26	; 0x11
 306:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	4a ef       	ldi	r20, 0xFA	; 250
 30e:	54 e4       	ldi	r21, 0x44	; 68
 310:	6f 85       	ldd	r22, Y+15	; 0x0f
 312:	78 89       	ldd	r23, Y+16	; 0x10
 314:	89 89       	ldd	r24, Y+17	; 0x11
 316:	9a 89       	ldd	r25, Y+18	; 0x12
 318:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	8b 8b       	std	Y+19, r24	; 0x13
 322:	9c 8b       	std	Y+20, r25	; 0x14
 324:	ad 8b       	std	Y+21, r26	; 0x15
 326:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e8       	ldi	r20, 0x80	; 128
 32e:	5f e3       	ldi	r21, 0x3F	; 63
 330:	6b 89       	ldd	r22, Y+19	; 0x13
 332:	7c 89       	ldd	r23, Y+20	; 0x14
 334:	8d 89       	ldd	r24, Y+21	; 0x15
 336:	9e 89       	ldd	r25, Y+22	; 0x16
 338:	0e 94 9a 03 	call	0x734	; 0x734 <__cmpsf2>
 33c:	88 23       	and	r24, r24
 33e:	2c f4       	brge	.+10     	; 0x34a <init_servo_1+0x1d2>
		__ticks = 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	98 8f       	std	Y+24, r25	; 0x18
 346:	8f 8b       	std	Y+23, r24	; 0x17
 348:	3f c0       	rjmp	.+126    	; 0x3c8 <init_servo_1+0x250>
	else if (__tmp > 65535)
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	3f ef       	ldi	r19, 0xFF	; 255
 34e:	4f e7       	ldi	r20, 0x7F	; 127
 350:	57 e4       	ldi	r21, 0x47	; 71
 352:	6b 89       	ldd	r22, Y+19	; 0x13
 354:	7c 89       	ldd	r23, Y+20	; 0x14
 356:	8d 89       	ldd	r24, Y+21	; 0x15
 358:	9e 89       	ldd	r25, Y+22	; 0x16
 35a:	0e 94 3f 04 	call	0x87e	; 0x87e <__gesf2>
 35e:	18 16       	cp	r1, r24
 360:	4c f5       	brge	.+82     	; 0x3b4 <init_servo_1+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e2       	ldi	r20, 0x20	; 32
 368:	51 e4       	ldi	r21, 0x41	; 65
 36a:	6f 85       	ldd	r22, Y+15	; 0x0f
 36c:	78 89       	ldd	r23, Y+16	; 0x10
 36e:	89 89       	ldd	r24, Y+17	; 0x11
 370:	9a 89       	ldd	r25, Y+18	; 0x12
 372:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 376:	dc 01       	movw	r26, r24
 378:	cb 01       	movw	r24, r22
 37a:	bc 01       	movw	r22, r24
 37c:	cd 01       	movw	r24, r26
 37e:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 382:	dc 01       	movw	r26, r24
 384:	cb 01       	movw	r24, r22
 386:	98 8f       	std	Y+24, r25	; 0x18
 388:	8f 8b       	std	Y+23, r24	; 0x17
 38a:	0f c0       	rjmp	.+30     	; 0x3aa <init_servo_1+0x232>
 38c:	88 ec       	ldi	r24, 0xC8	; 200
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	9a 8f       	std	Y+26, r25	; 0x1a
 392:	89 8f       	std	Y+25, r24	; 0x19
 394:	89 8d       	ldd	r24, Y+25	; 0x19
 396:	9a 8d       	ldd	r25, Y+26	; 0x1a
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <init_servo_1+0x220>
 39c:	9a 8f       	std	Y+26, r25	; 0x1a
 39e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a0:	8f 89       	ldd	r24, Y+23	; 0x17
 3a2:	98 8d       	ldd	r25, Y+24	; 0x18
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	98 8f       	std	Y+24, r25	; 0x18
 3a8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3aa:	8f 89       	ldd	r24, Y+23	; 0x17
 3ac:	98 8d       	ldd	r25, Y+24	; 0x18
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	69 f7       	brne	.-38     	; 0x38c <init_servo_1+0x214>
 3b2:	14 c0       	rjmp	.+40     	; 0x3dc <init_servo_1+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3b4:	6b 89       	ldd	r22, Y+19	; 0x13
 3b6:	7c 89       	ldd	r23, Y+20	; 0x14
 3b8:	8d 89       	ldd	r24, Y+21	; 0x15
 3ba:	9e 89       	ldd	r25, Y+22	; 0x16
 3bc:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 3c0:	dc 01       	movw	r26, r24
 3c2:	cb 01       	movw	r24, r22
 3c4:	98 8f       	std	Y+24, r25	; 0x18
 3c6:	8f 8b       	std	Y+23, r24	; 0x17
 3c8:	8f 89       	ldd	r24, Y+23	; 0x17
 3ca:	98 8d       	ldd	r25, Y+24	; 0x18
 3cc:	9c 8f       	std	Y+28, r25	; 0x1c
 3ce:	8b 8f       	std	Y+27, r24	; 0x1b
 3d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <init_servo_1+0x25c>
 3d8:	9c 8f       	std	Y+28, r25	; 0x1c
 3da:	8b 8f       	std	Y+27, r24	; 0x1b
 3dc:	6c 96       	adiw	r28, 0x1c	; 28
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <init_motor_1>:
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	6c 97       	sbiw	r28, 0x1c	; 28
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	84 e2       	ldi	r24, 0x24	; 36
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	24 e2       	ldi	r18, 0x24	; 36
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	24 60       	ori	r18, 0x04	; 4
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
 414:	87 e2       	ldi	r24, 0x27	; 39
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	27 e2       	ldi	r18, 0x27	; 39
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	20 81       	ld	r18, Z
 420:	27 60       	ori	r18, 0x07	; 7
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
 426:	80 e8       	ldi	r24, 0x80	; 128
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	20 e8       	ldi	r18, 0x80	; 128
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	f9 01       	movw	r30, r18
 430:	20 81       	ld	r18, Z
 432:	22 62       	ori	r18, 0x22	; 34
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
 438:	81 e8       	ldi	r24, 0x81	; 129
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	21 e8       	ldi	r18, 0x81	; 129
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	2a 61       	ori	r18, 0x1A	; 26
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
 44a:	8a e8       	ldi	r24, 0x8A	; 138
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	38 e0       	ldi	r19, 0x08	; 8
 452:	fc 01       	movw	r30, r24
 454:	31 83       	std	Z+1, r19	; 0x01
 456:	20 83       	st	Z, r18
 458:	86 e8       	ldi	r24, 0x86	; 134
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e5       	ldi	r19, 0x50	; 80
 460:	fc 01       	movw	r30, r24
 462:	31 83       	std	Z+1, r19	; 0x01
 464:	20 83       	st	Z, r18
 466:	88 e2       	ldi	r24, 0x28	; 40
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	28 e2       	ldi	r18, 0x28	; 40
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	20 81       	ld	r18, Z
 472:	27 60       	ori	r18, 0x07	; 7
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	a6 e9       	ldi	r26, 0x96	; 150
 47e:	b3 e4       	ldi	r27, 0x43	; 67
 480:	89 83       	std	Y+1, r24	; 0x01
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	ab 83       	std	Y+3, r26	; 0x03
 486:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	4a ef       	ldi	r20, 0xFA	; 250
 48e:	54 e4       	ldi	r21, 0x44	; 68
 490:	69 81       	ldd	r22, Y+1	; 0x01
 492:	7a 81       	ldd	r23, Y+2	; 0x02
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	9c 81       	ldd	r25, Y+4	; 0x04
 498:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 49c:	dc 01       	movw	r26, r24
 49e:	cb 01       	movw	r24, r22
 4a0:	8d 83       	std	Y+5, r24	; 0x05
 4a2:	9e 83       	std	Y+6, r25	; 0x06
 4a4:	af 83       	std	Y+7, r26	; 0x07
 4a6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e8       	ldi	r20, 0x80	; 128
 4ae:	5f e3       	ldi	r21, 0x3F	; 63
 4b0:	6d 81       	ldd	r22, Y+5	; 0x05
 4b2:	7e 81       	ldd	r23, Y+6	; 0x06
 4b4:	8f 81       	ldd	r24, Y+7	; 0x07
 4b6:	98 85       	ldd	r25, Y+8	; 0x08
 4b8:	0e 94 9a 03 	call	0x734	; 0x734 <__cmpsf2>
 4bc:	88 23       	and	r24, r24
 4be:	2c f4       	brge	.+10     	; 0x4ca <init_motor_1+0xdc>
		__ticks = 1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	9a 87       	std	Y+10, r25	; 0x0a
 4c6:	89 87       	std	Y+9, r24	; 0x09
 4c8:	3f c0       	rjmp	.+126    	; 0x548 <init_motor_1+0x15a>
	else if (__tmp > 65535)
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	3f ef       	ldi	r19, 0xFF	; 255
 4ce:	4f e7       	ldi	r20, 0x7F	; 127
 4d0:	57 e4       	ldi	r21, 0x47	; 71
 4d2:	6d 81       	ldd	r22, Y+5	; 0x05
 4d4:	7e 81       	ldd	r23, Y+6	; 0x06
 4d6:	8f 81       	ldd	r24, Y+7	; 0x07
 4d8:	98 85       	ldd	r25, Y+8	; 0x08
 4da:	0e 94 3f 04 	call	0x87e	; 0x87e <__gesf2>
 4de:	18 16       	cp	r1, r24
 4e0:	4c f5       	brge	.+82     	; 0x534 <init_motor_1+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	40 e2       	ldi	r20, 0x20	; 32
 4e8:	51 e4       	ldi	r21, 0x41	; 65
 4ea:	69 81       	ldd	r22, Y+1	; 0x01
 4ec:	7a 81       	ldd	r23, Y+2	; 0x02
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	9c 81       	ldd	r25, Y+4	; 0x04
 4f2:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 4f6:	dc 01       	movw	r26, r24
 4f8:	cb 01       	movw	r24, r22
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 502:	dc 01       	movw	r26, r24
 504:	cb 01       	movw	r24, r22
 506:	9a 87       	std	Y+10, r25	; 0x0a
 508:	89 87       	std	Y+9, r24	; 0x09
 50a:	0f c0       	rjmp	.+30     	; 0x52a <init_motor_1+0x13c>
 50c:	88 ec       	ldi	r24, 0xC8	; 200
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9c 87       	std	Y+12, r25	; 0x0c
 512:	8b 87       	std	Y+11, r24	; 0x0b
 514:	8b 85       	ldd	r24, Y+11	; 0x0b
 516:	9c 85       	ldd	r25, Y+12	; 0x0c
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <init_motor_1+0x12a>
 51c:	9c 87       	std	Y+12, r25	; 0x0c
 51e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 520:	89 85       	ldd	r24, Y+9	; 0x09
 522:	9a 85       	ldd	r25, Y+10	; 0x0a
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	9a 87       	std	Y+10, r25	; 0x0a
 528:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 52a:	89 85       	ldd	r24, Y+9	; 0x09
 52c:	9a 85       	ldd	r25, Y+10	; 0x0a
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	69 f7       	brne	.-38     	; 0x50c <init_motor_1+0x11e>
 532:	14 c0       	rjmp	.+40     	; 0x55c <init_motor_1+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 534:	6d 81       	ldd	r22, Y+5	; 0x05
 536:	7e 81       	ldd	r23, Y+6	; 0x06
 538:	8f 81       	ldd	r24, Y+7	; 0x07
 53a:	98 85       	ldd	r25, Y+8	; 0x08
 53c:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 540:	dc 01       	movw	r26, r24
 542:	cb 01       	movw	r24, r22
 544:	9a 87       	std	Y+10, r25	; 0x0a
 546:	89 87       	std	Y+9, r24	; 0x09
 548:	89 85       	ldd	r24, Y+9	; 0x09
 54a:	9a 85       	ldd	r25, Y+10	; 0x0a
 54c:	9e 87       	std	Y+14, r25	; 0x0e
 54e:	8d 87       	std	Y+13, r24	; 0x0d
 550:	8d 85       	ldd	r24, Y+13	; 0x0d
 552:	9e 85       	ldd	r25, Y+14	; 0x0e
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <init_motor_1+0x166>
 558:	9e 87       	std	Y+14, r25	; 0x0e
 55a:	8d 87       	std	Y+13, r24	; 0x0d
 55c:	88 e2       	ldi	r24, 0x28	; 40
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	28 e2       	ldi	r18, 0x28	; 40
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	f9 01       	movw	r30, r18
 566:	20 81       	ld	r18, Z
 568:	28 7f       	andi	r18, 0xF8	; 248
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	a6 e9       	ldi	r26, 0x96	; 150
 574:	b3 e4       	ldi	r27, 0x43	; 67
 576:	8f 87       	std	Y+15, r24	; 0x0f
 578:	98 8b       	std	Y+16, r25	; 0x10
 57a:	a9 8b       	std	Y+17, r26	; 0x11
 57c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	4a ef       	ldi	r20, 0xFA	; 250
 584:	54 e4       	ldi	r21, 0x44	; 68
 586:	6f 85       	ldd	r22, Y+15	; 0x0f
 588:	78 89       	ldd	r23, Y+16	; 0x10
 58a:	89 89       	ldd	r24, Y+17	; 0x11
 58c:	9a 89       	ldd	r25, Y+18	; 0x12
 58e:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 592:	dc 01       	movw	r26, r24
 594:	cb 01       	movw	r24, r22
 596:	8b 8b       	std	Y+19, r24	; 0x13
 598:	9c 8b       	std	Y+20, r25	; 0x14
 59a:	ad 8b       	std	Y+21, r26	; 0x15
 59c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	40 e8       	ldi	r20, 0x80	; 128
 5a4:	5f e3       	ldi	r21, 0x3F	; 63
 5a6:	6b 89       	ldd	r22, Y+19	; 0x13
 5a8:	7c 89       	ldd	r23, Y+20	; 0x14
 5aa:	8d 89       	ldd	r24, Y+21	; 0x15
 5ac:	9e 89       	ldd	r25, Y+22	; 0x16
 5ae:	0e 94 9a 03 	call	0x734	; 0x734 <__cmpsf2>
 5b2:	88 23       	and	r24, r24
 5b4:	2c f4       	brge	.+10     	; 0x5c0 <init_motor_1+0x1d2>
		__ticks = 1;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	98 8f       	std	Y+24, r25	; 0x18
 5bc:	8f 8b       	std	Y+23, r24	; 0x17
 5be:	3f c0       	rjmp	.+126    	; 0x63e <init_motor_1+0x250>
	else if (__tmp > 65535)
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	3f ef       	ldi	r19, 0xFF	; 255
 5c4:	4f e7       	ldi	r20, 0x7F	; 127
 5c6:	57 e4       	ldi	r21, 0x47	; 71
 5c8:	6b 89       	ldd	r22, Y+19	; 0x13
 5ca:	7c 89       	ldd	r23, Y+20	; 0x14
 5cc:	8d 89       	ldd	r24, Y+21	; 0x15
 5ce:	9e 89       	ldd	r25, Y+22	; 0x16
 5d0:	0e 94 3f 04 	call	0x87e	; 0x87e <__gesf2>
 5d4:	18 16       	cp	r1, r24
 5d6:	4c f5       	brge	.+82     	; 0x62a <init_motor_1+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e2       	ldi	r20, 0x20	; 32
 5de:	51 e4       	ldi	r21, 0x41	; 65
 5e0:	6f 85       	ldd	r22, Y+15	; 0x0f
 5e2:	78 89       	ldd	r23, Y+16	; 0x10
 5e4:	89 89       	ldd	r24, Y+17	; 0x11
 5e6:	9a 89       	ldd	r25, Y+18	; 0x12
 5e8:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 5f8:	dc 01       	movw	r26, r24
 5fa:	cb 01       	movw	r24, r22
 5fc:	98 8f       	std	Y+24, r25	; 0x18
 5fe:	8f 8b       	std	Y+23, r24	; 0x17
 600:	0f c0       	rjmp	.+30     	; 0x620 <init_motor_1+0x232>
 602:	88 ec       	ldi	r24, 0xC8	; 200
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	9a 8f       	std	Y+26, r25	; 0x1a
 608:	89 8f       	std	Y+25, r24	; 0x19
 60a:	89 8d       	ldd	r24, Y+25	; 0x19
 60c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <init_motor_1+0x220>
 612:	9a 8f       	std	Y+26, r25	; 0x1a
 614:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 616:	8f 89       	ldd	r24, Y+23	; 0x17
 618:	98 8d       	ldd	r25, Y+24	; 0x18
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	98 8f       	std	Y+24, r25	; 0x18
 61e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 620:	8f 89       	ldd	r24, Y+23	; 0x17
 622:	98 8d       	ldd	r25, Y+24	; 0x18
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	69 f7       	brne	.-38     	; 0x602 <init_motor_1+0x214>
 628:	14 c0       	rjmp	.+40     	; 0x652 <init_motor_1+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 62a:	6b 89       	ldd	r22, Y+19	; 0x13
 62c:	7c 89       	ldd	r23, Y+20	; 0x14
 62e:	8d 89       	ldd	r24, Y+21	; 0x15
 630:	9e 89       	ldd	r25, Y+22	; 0x16
 632:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 636:	dc 01       	movw	r26, r24
 638:	cb 01       	movw	r24, r22
 63a:	98 8f       	std	Y+24, r25	; 0x18
 63c:	8f 8b       	std	Y+23, r24	; 0x17
 63e:	8f 89       	ldd	r24, Y+23	; 0x17
 640:	98 8d       	ldd	r25, Y+24	; 0x18
 642:	9c 8f       	std	Y+28, r25	; 0x1c
 644:	8b 8f       	std	Y+27, r24	; 0x1b
 646:	8b 8d       	ldd	r24, Y+27	; 0x1b
 648:	9c 8d       	ldd	r25, Y+28	; 0x1c
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <init_motor_1+0x25c>
 64e:	9c 8f       	std	Y+28, r25	; 0x1c
 650:	8b 8f       	std	Y+27, r24	; 0x1b
 652:	6c 96       	adiw	r28, 0x1c	; 28
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <init_uart>:
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	00 d0       	rcall	.+0      	; 0x66a <init_uart+0x6>
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
 66e:	9a 83       	std	Y+2, r25	; 0x02
 670:	89 83       	std	Y+1, r24	; 0x01
 672:	85 ec       	ldi	r24, 0xC5	; 197
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	29 81       	ldd	r18, Y+1	; 0x01
 678:	3a 81       	ldd	r19, Y+2	; 0x02
 67a:	23 2f       	mov	r18, r19
 67c:	33 27       	eor	r19, r19
 67e:	fc 01       	movw	r30, r24
 680:	20 83       	st	Z, r18
 682:	84 ec       	ldi	r24, 0xC4	; 196
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	29 81       	ldd	r18, Y+1	; 0x01
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
 68c:	81 ec       	ldi	r24, 0xC1	; 193
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	28 e1       	ldi	r18, 0x18	; 24
 692:	fc 01       	movw	r30, r24
 694:	20 83       	st	Z, r18
 696:	82 ec       	ldi	r24, 0xC2	; 194
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	2e e0       	ldi	r18, 0x0E	; 14
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <transmit_uart>:
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	1f 92       	push	r1
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	00 00       	nop
 6b8:	80 ec       	ldi	r24, 0xC0	; 192
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	fc 01       	movw	r30, r24
 6be:	80 81       	ld	r24, Z
 6c0:	88 2f       	mov	r24, r24
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	80 72       	andi	r24, 0x20	; 32
 6c6:	99 27       	eor	r25, r25
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	b1 f3       	breq	.-20     	; 0x6b8 <transmit_uart+0xe>
 6cc:	86 ec       	ldi	r24, 0xC6	; 198
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	29 81       	ldd	r18, Y+1	; 0x01
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
 6d6:	0f 90       	pop	r0
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <transmit_uart_string>:
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	00 d0       	rcall	.+0      	; 0x6e4 <transmit_uart_string+0x6>
 6e4:	00 d0       	rcall	.+0      	; 0x6e6 <transmit_uart_string+0x8>
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	9c 83       	std	Y+4, r25	; 0x04
 6ec:	8b 83       	std	Y+3, r24	; 0x03
 6ee:	1a 82       	std	Y+2, r1	; 0x02
 6f0:	19 82       	std	Y+1, r1	; 0x01
 6f2:	0f c0       	rjmp	.+30     	; 0x712 <transmit_uart_string+0x34>
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	9a 81       	ldd	r25, Y+2	; 0x02
 6f8:	2b 81       	ldd	r18, Y+3	; 0x03
 6fa:	3c 81       	ldd	r19, Y+4	; 0x04
 6fc:	82 0f       	add	r24, r18
 6fe:	93 1f       	adc	r25, r19
 700:	fc 01       	movw	r30, r24
 702:	80 81       	ld	r24, Z
 704:	0e 94 55 03 	call	0x6aa	; 0x6aa <transmit_uart>
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	9a 81       	ldd	r25, Y+2	; 0x02
 70c:	01 96       	adiw	r24, 0x01	; 1
 70e:	9a 83       	std	Y+2, r25	; 0x02
 710:	89 83       	std	Y+1, r24	; 0x01
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	9a 81       	ldd	r25, Y+2	; 0x02
 716:	2b 81       	ldd	r18, Y+3	; 0x03
 718:	3c 81       	ldd	r19, Y+4	; 0x04
 71a:	82 0f       	add	r24, r18
 71c:	93 1f       	adc	r25, r19
 71e:	fc 01       	movw	r30, r24
 720:	80 81       	ld	r24, Z
 722:	88 23       	and	r24, r24
 724:	39 f7       	brne	.-50     	; 0x6f4 <transmit_uart_string+0x16>
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	0f 90       	pop	r0
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	08 95       	ret

00000734 <__cmpsf2>:
 734:	2f d0       	rcall	.+94     	; 0x794 <__fp_cmp>
 736:	08 f4       	brcc	.+2      	; 0x73a <__cmpsf2+0x6>
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret

0000073c <__fixunssfsi>:
 73c:	7f d0       	rcall	.+254    	; 0x83c <__fp_splitA>
 73e:	88 f0       	brcs	.+34     	; 0x762 <__fixunssfsi+0x26>
 740:	9f 57       	subi	r25, 0x7F	; 127
 742:	90 f0       	brcs	.+36     	; 0x768 <__fixunssfsi+0x2c>
 744:	b9 2f       	mov	r27, r25
 746:	99 27       	eor	r25, r25
 748:	b7 51       	subi	r27, 0x17	; 23
 74a:	a0 f0       	brcs	.+40     	; 0x774 <__fixunssfsi+0x38>
 74c:	d1 f0       	breq	.+52     	; 0x782 <__fixunssfsi+0x46>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a f0       	brmi	.+6      	; 0x75e <__fixunssfsi+0x22>
 758:	ba 95       	dec	r27
 75a:	c9 f7       	brne	.-14     	; 0x74e <__fixunssfsi+0x12>
 75c:	12 c0       	rjmp	.+36     	; 0x782 <__fixunssfsi+0x46>
 75e:	b1 30       	cpi	r27, 0x01	; 1
 760:	81 f0       	breq	.+32     	; 0x782 <__fixunssfsi+0x46>
 762:	86 d0       	rcall	.+268    	; 0x870 <__fp_zero>
 764:	b1 e0       	ldi	r27, 0x01	; 1
 766:	08 95       	ret
 768:	83 c0       	rjmp	.+262    	; 0x870 <__fp_zero>
 76a:	67 2f       	mov	r22, r23
 76c:	78 2f       	mov	r23, r24
 76e:	88 27       	eor	r24, r24
 770:	b8 5f       	subi	r27, 0xF8	; 248
 772:	39 f0       	breq	.+14     	; 0x782 <__fixunssfsi+0x46>
 774:	b9 3f       	cpi	r27, 0xF9	; 249
 776:	cc f3       	brlt	.-14     	; 0x76a <__fixunssfsi+0x2e>
 778:	86 95       	lsr	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b3 95       	inc	r27
 780:	d9 f7       	brne	.-10     	; 0x778 <__fixunssfsi+0x3c>
 782:	3e f4       	brtc	.+14     	; 0x792 <__fixunssfsi+0x56>
 784:	90 95       	com	r25
 786:	80 95       	com	r24
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	08 95       	ret

00000794 <__fp_cmp>:
 794:	99 0f       	add	r25, r25
 796:	00 08       	sbc	r0, r0
 798:	55 0f       	add	r21, r21
 79a:	aa 0b       	sbc	r26, r26
 79c:	e0 e8       	ldi	r30, 0x80	; 128
 79e:	fe ef       	ldi	r31, 0xFE	; 254
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	e8 07       	cpc	r30, r24
 7a6:	f9 07       	cpc	r31, r25
 7a8:	c0 f0       	brcs	.+48     	; 0x7da <__fp_cmp+0x46>
 7aa:	12 16       	cp	r1, r18
 7ac:	13 06       	cpc	r1, r19
 7ae:	e4 07       	cpc	r30, r20
 7b0:	f5 07       	cpc	r31, r21
 7b2:	98 f0       	brcs	.+38     	; 0x7da <__fp_cmp+0x46>
 7b4:	62 1b       	sub	r22, r18
 7b6:	73 0b       	sbc	r23, r19
 7b8:	84 0b       	sbc	r24, r20
 7ba:	95 0b       	sbc	r25, r21
 7bc:	39 f4       	brne	.+14     	; 0x7cc <__fp_cmp+0x38>
 7be:	0a 26       	eor	r0, r26
 7c0:	61 f0       	breq	.+24     	; 0x7da <__fp_cmp+0x46>
 7c2:	23 2b       	or	r18, r19
 7c4:	24 2b       	or	r18, r20
 7c6:	25 2b       	or	r18, r21
 7c8:	21 f4       	brne	.+8      	; 0x7d2 <__fp_cmp+0x3e>
 7ca:	08 95       	ret
 7cc:	0a 26       	eor	r0, r26
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <__fp_cmp+0x3e>
 7d0:	a1 40       	sbci	r26, 0x01	; 1
 7d2:	a6 95       	lsr	r26
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	81 1d       	adc	r24, r1
 7d8:	81 1d       	adc	r24, r1
 7da:	08 95       	ret

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_nan>:
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	08 95       	ret

000007ee <__fp_pscA>:
 7ee:	00 24       	eor	r0, r0
 7f0:	0a 94       	dec	r0
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	09 06       	cpc	r0, r25
 7fa:	08 95       	ret

000007fc <__fp_pscB>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	05 06       	cpc	r0, r21
 808:	08 95       	ret

0000080a <__fp_round>:
 80a:	09 2e       	mov	r0, r25
 80c:	03 94       	inc	r0
 80e:	00 0c       	add	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0xc>
 812:	88 23       	and	r24, r24
 814:	52 f0       	brmi	.+20     	; 0x82a <__fp_round+0x20>
 816:	bb 0f       	add	r27, r27
 818:	40 f4       	brcc	.+16     	; 0x82a <__fp_round+0x20>
 81a:	bf 2b       	or	r27, r31
 81c:	11 f4       	brne	.+4      	; 0x822 <__fp_round+0x18>
 81e:	60 ff       	sbrs	r22, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <__fp_round+0x20>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__fp_split3>:
 82c:	57 fd       	sbrc	r21, 7
 82e:	90 58       	subi	r25, 0x80	; 128
 830:	44 0f       	add	r20, r20
 832:	55 1f       	adc	r21, r21
 834:	59 f0       	breq	.+22     	; 0x84c <__fp_splitA+0x10>
 836:	5f 3f       	cpi	r21, 0xFF	; 255
 838:	71 f0       	breq	.+28     	; 0x856 <__fp_splitA+0x1a>
 83a:	47 95       	ror	r20

0000083c <__fp_splitA>:
 83c:	88 0f       	add	r24, r24
 83e:	97 fb       	bst	r25, 7
 840:	99 1f       	adc	r25, r25
 842:	61 f0       	breq	.+24     	; 0x85c <__fp_splitA+0x20>
 844:	9f 3f       	cpi	r25, 0xFF	; 255
 846:	79 f0       	breq	.+30     	; 0x866 <__fp_splitA+0x2a>
 848:	87 95       	ror	r24
 84a:	08 95       	ret
 84c:	12 16       	cp	r1, r18
 84e:	13 06       	cpc	r1, r19
 850:	14 06       	cpc	r1, r20
 852:	55 1f       	adc	r21, r21
 854:	f2 cf       	rjmp	.-28     	; 0x83a <__fp_split3+0xe>
 856:	46 95       	lsr	r20
 858:	f1 df       	rcall	.-30     	; 0x83c <__fp_splitA>
 85a:	08 c0       	rjmp	.+16     	; 0x86c <__fp_splitA+0x30>
 85c:	16 16       	cp	r1, r22
 85e:	17 06       	cpc	r1, r23
 860:	18 06       	cpc	r1, r24
 862:	99 1f       	adc	r25, r25
 864:	f1 cf       	rjmp	.-30     	; 0x848 <__fp_splitA+0xc>
 866:	86 95       	lsr	r24
 868:	71 05       	cpc	r23, r1
 86a:	61 05       	cpc	r22, r1
 86c:	08 94       	sec
 86e:	08 95       	ret

00000870 <__fp_zero>:
 870:	e8 94       	clt

00000872 <__fp_szero>:
 872:	bb 27       	eor	r27, r27
 874:	66 27       	eor	r22, r22
 876:	77 27       	eor	r23, r23
 878:	cb 01       	movw	r24, r22
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__gesf2>:
 87e:	8a df       	rcall	.-236    	; 0x794 <__fp_cmp>
 880:	08 f4       	brcc	.+2      	; 0x884 <__gesf2+0x6>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	08 95       	ret

00000886 <__mulsf3>:
 886:	0b d0       	rcall	.+22     	; 0x89e <__mulsf3x>
 888:	c0 cf       	rjmp	.-128    	; 0x80a <__fp_round>
 88a:	b1 df       	rcall	.-158    	; 0x7ee <__fp_pscA>
 88c:	28 f0       	brcs	.+10     	; 0x898 <__mulsf3+0x12>
 88e:	b6 df       	rcall	.-148    	; 0x7fc <__fp_pscB>
 890:	18 f0       	brcs	.+6      	; 0x898 <__mulsf3+0x12>
 892:	95 23       	and	r25, r21
 894:	09 f0       	breq	.+2      	; 0x898 <__mulsf3+0x12>
 896:	a2 cf       	rjmp	.-188    	; 0x7dc <__fp_inf>
 898:	a7 cf       	rjmp	.-178    	; 0x7e8 <__fp_nan>
 89a:	11 24       	eor	r1, r1
 89c:	ea cf       	rjmp	.-44     	; 0x872 <__fp_szero>

0000089e <__mulsf3x>:
 89e:	c6 df       	rcall	.-116    	; 0x82c <__fp_split3>
 8a0:	a0 f3       	brcs	.-24     	; 0x88a <__mulsf3+0x4>

000008a2 <__mulsf3_pse>:
 8a2:	95 9f       	mul	r25, r21
 8a4:	d1 f3       	breq	.-12     	; 0x89a <__mulsf3+0x14>
 8a6:	95 0f       	add	r25, r21
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	55 1f       	adc	r21, r21
 8ac:	62 9f       	mul	r22, r18
 8ae:	f0 01       	movw	r30, r0
 8b0:	72 9f       	mul	r23, r18
 8b2:	bb 27       	eor	r27, r27
 8b4:	f0 0d       	add	r31, r0
 8b6:	b1 1d       	adc	r27, r1
 8b8:	63 9f       	mul	r22, r19
 8ba:	aa 27       	eor	r26, r26
 8bc:	f0 0d       	add	r31, r0
 8be:	b1 1d       	adc	r27, r1
 8c0:	aa 1f       	adc	r26, r26
 8c2:	64 9f       	mul	r22, r20
 8c4:	66 27       	eor	r22, r22
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	66 1f       	adc	r22, r22
 8cc:	82 9f       	mul	r24, r18
 8ce:	22 27       	eor	r18, r18
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 9f       	mul	r23, r19
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	62 1f       	adc	r22, r18
 8de:	83 9f       	mul	r24, r19
 8e0:	a0 0d       	add	r26, r0
 8e2:	61 1d       	adc	r22, r1
 8e4:	22 1f       	adc	r18, r18
 8e6:	74 9f       	mul	r23, r20
 8e8:	33 27       	eor	r19, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	23 1f       	adc	r18, r19
 8f0:	84 9f       	mul	r24, r20
 8f2:	60 0d       	add	r22, r0
 8f4:	21 1d       	adc	r18, r1
 8f6:	82 2f       	mov	r24, r18
 8f8:	76 2f       	mov	r23, r22
 8fa:	6a 2f       	mov	r22, r26
 8fc:	11 24       	eor	r1, r1
 8fe:	9f 57       	subi	r25, 0x7F	; 127
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	8a f0       	brmi	.+34     	; 0x926 <__stack+0x27>
 904:	e1 f0       	breq	.+56     	; 0x93e <__stack+0x3f>
 906:	88 23       	and	r24, r24
 908:	4a f0       	brmi	.+18     	; 0x91c <__stack+0x1d>
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	bb 1f       	adc	r27, r27
 910:	66 1f       	adc	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	91 50       	subi	r25, 0x01	; 1
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	a9 f7       	brne	.-22     	; 0x906 <__stack+0x7>
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	51 05       	cpc	r21, r1
 920:	70 f0       	brcs	.+28     	; 0x93e <__stack+0x3f>
 922:	5c cf       	rjmp	.-328    	; 0x7dc <__fp_inf>
 924:	a6 cf       	rjmp	.-180    	; 0x872 <__fp_szero>
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	ec f3       	brlt	.-6      	; 0x924 <__stack+0x25>
 92a:	98 3e       	cpi	r25, 0xE8	; 232
 92c:	dc f3       	brlt	.-10     	; 0x924 <__stack+0x25>
 92e:	86 95       	lsr	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	b7 95       	ror	r27
 936:	f7 95       	ror	r31
 938:	e7 95       	ror	r30
 93a:	9f 5f       	subi	r25, 0xFF	; 255
 93c:	c1 f7       	brne	.-16     	; 0x92e <__stack+0x2f>
 93e:	fe 2b       	or	r31, r30
 940:	88 0f       	add	r24, r24
 942:	91 1d       	adc	r25, r1
 944:	96 95       	lsr	r25
 946:	87 95       	ror	r24
 948:	97 f9       	bld	r25, 7
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
